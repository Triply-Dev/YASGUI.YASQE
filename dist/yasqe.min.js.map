{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/deparam.js","yasqe.min.js","lib/grammar/_tokenizer-table.js","lib/grammar/tokenizer.js","lib/trie.js","node_modules/codemirror/addon/display/fullscreen.js","node_modules/codemirror/addon/edit/matchbrackets.js","node_modules/codemirror/addon/fold/brace-fold.js","node_modules/codemirror/addon/fold/foldcode.js","node_modules/codemirror/addon/fold/foldgutter.js","node_modules/codemirror/addon/fold/xml-fold.js","node_modules/codemirror/addon/hint/show-hint.js","node_modules/codemirror/addon/runmode/runmode.js","node_modules/codemirror/addon/search/searchcursor.js","node_modules/store/store.js","node_modules/yasgui-utils/package.json","node_modules/yasgui-utils/src/main.js","node_modules/yasgui-utils/src/storage.js","node_modules/yasgui-utils/src/svg.js","package.json","src/autocompleters/autocompleterBase.js","src/autocompleters/classes.js","src/autocompleters/prefixes.js","src/autocompleters/properties.js","src/autocompleters/utils.js","src/autocompleters/variables.js","src/curl.js","src/defaults.js","src/entry.js","src/imgs.js","src/main.js","src/prefixFold.js","src/prefixUtils.js","src/sparql.js","src/tokenUtils.js","src/tooltip.js","src/utils.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","YASQE","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","$","jQuery","deparam","params","coerce","obj","coerce_types","true","false","null","each","replace","split","j","v","val","param","key","decodeURIComponent","cur","keys","keys_last","test","shift","concat","isNaN","undefined","isArray","push","jquery","2","table","*[&&,valueLogical]","&&","AS",")",",","||",";","*[,,expression]","*[,,objectPath]",".","]","{","OPTIONAL","MINUS","GRAPH","SERVICE","FILTER","BIND","VALUES","}","*[,,object]","*[/,pathEltOrInverse]","/","|","(","[","VAR1","VAR2","NIL","IRI_REF","TRUE","FALSE","BLANK_NODE_LABEL","ANON","PNAME_LN","PNAME_NS","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","INTEGER","DECIMAL","DOUBLE","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","*[;,?[or([verbPath,verbSimple]),objectList]]","*[;,?[verb,objectList]]","*[UNION,groupGraphPattern]","UNION","*[graphPatternNotTriples,?.,?triplesBlock]","*[quadsNotTriples,?.,?triplesTemplate]","*[|,pathOneInPropertySet]","*[|,pathSequence]","*[||,conditionalAndExpression]","*dataBlockValue","UNDEF","*datasetClause","FROM","WHERE","*describeDatasetClause","ORDER","HAVING","GROUP","LIMIT","OFFSET","*graphNode","*graphNodePath","*groupCondition","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","SAMETERM","ISIRI","ISURI","ISBLANK","ISLITERAL","ISNUMERIC","SUBSTR","REPLACE","REGEX","EXISTS","NOT","*havingCondition","*or([[ (,*dataBlockValue,)],NIL])","*or([[*,unaryExpression],[/,unaryExpression]])","*","=","!=","<",">","<=",">=","IN","+","-","*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","*or([baseDecl,prefixDecl])","BASE","PREFIX","CONSTRUCT","DESCRIBE","ASK","INSERT","DELETE","SELECT","LOAD","CLEAR","DROP","ADD","MOVE","COPY","CREATE","WITH","*or([var,[ (,expression,AS,var,)]])","*orderCondition","ASC","DESC","*usingClause","USING","*var","*varOrIRIref","+graphNode","+graphNodePath","+groupCondition","+havingCondition","+or([var,[ (,expression,AS,var,)]])","+orderCondition","+varOrIRIref","?.","?DISTINCT","DISTINCT","!","COUNT","SUM","MIN","MAX","AVG","SAMPLE","GROUP_CONCAT","?GRAPH","?SILENT","SILENT","?SILENT_1","?SILENT_2","DEFAULT","NAMED","ALL","?SILENT_3","?SILENT_4","?WHERE","?[,,expression]","?[.,?constructTriples]","?[.,?triplesBlock]","?[.,?triplesTemplate]","?[;,SEPARATOR,=,string]","?[;,update]","?[AS,var]","?[INTO,graphRef]","INTO","?[or([verbPath,verbSimple]),objectList]","^","?[pathOneInPropertySet,*[|,pathOneInPropertySet]]","?[update1,?[;,update]]","?[verb,objectList]","?argList","?constructTriples","?groupClause","?havingClause","?insertClause","?limitClause","?limitOffsetClauses","?offsetClause","?or([DISTINCT,REDUCED])","REDUCED","?or([LANGTAG,[^^,iriRef]])","LANGTAG","^^","?or([[*,unaryExpression],[/,unaryExpression]])","?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","?orderClause","?pathMod","?","?triplesBlock","?triplesTemplate","?whereClause","[ (,*dataBlockValue,)]","[ (,*var,)]","[ (,expression,)]","[ (,expression,AS,var,)]","[!=,numericExpression]","[&&,valueLogical]","[*,unaryExpression]","[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]","[+,multiplicativeExpression]","[,,expression]","[,,integer,}]","[,,objectPath]","[,,object]","[,,or([},[integer,}]])]","[-,multiplicativeExpression]","[.,?constructTriples]","[.,?triplesBlock]","[.,?triplesTemplate]","[/,pathEltOrInverse]","[/,unaryExpression]","[;,?[or([verbPath,verbSimple]),objectList]]","[;,?[verb,objectList]]","[;,SEPARATOR,=,string]","[;,update]","[<,numericExpression]","[<=,numericExpression]","[=,numericExpression]","[>,numericExpression]","[>=,numericExpression]","[AS,var]","[IN,expressionList]","[INTO,graphRef]","[NAMED,iriRef]","[NOT,IN,expressionList]","[UNION,groupGraphPattern]","[^^,iriRef]","[constructTemplate,*datasetClause,whereClause,solutionModifier]","[deleteClause,?insertClause]","[graphPatternNotTriples,?.,?triplesBlock]","[integer,or([[,,or([},[integer,}]])],}])]","[integer,}]","[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]","[or([verbPath,verbSimple]),objectList]","[pathOneInPropertySet,*[|,pathOneInPropertySet]]","[quadsNotTriples,?.,?triplesTemplate]","[update1,?[;,update]]","[verb,objectList]","[|,pathOneInPropertySet]","[|,pathSequence]","[||,conditionalAndExpression]","add","additiveExpression","aggregate","allowBnodes","allowVars","argList","askQuery","baseDecl","bind","blankNode","blankNodePropertyList","blankNodePropertyListPath","booleanLiteral","brackettedExpression","builtInCall","clear","collection","collectionPath","conditionalAndExpression","conditionalOrExpression","constraint","constructQuery","constructTemplate","constructTriples","copy","create","dataBlock","dataBlockValue","datasetClause","defaultGraphClause","delete1","DATA","deleteClause","describeDatasetClause","describeQuery","disallowBnodes","disallowVars","drop","existsFunc","expression","expressionList","filter","functionCall","graphGraphPattern","graphNode","graphNodePath","graphOrDefault","graphPatternNotTriples","graphRef","graphRefAll","graphTerm","groupClause","groupCondition","groupGraphPattern","groupGraphPatternSub","groupOrUnionGraphPattern","havingClause","havingCondition","inlineData","inlineDataFull","inlineDataOneVar","insert1","insertClause","integer","iriRef","iriRefOrFunction","limitClause","limitOffsetClauses","load","minusGraphPattern","modify","move","multiplicativeExpression","namedGraphClause","notExistsFunc","numericExpression","numericLiteral","numericLiteralNegative","numericLiteralPositive","numericLiteralUnsigned","object","objectList","objectListPath","objectPath","offsetClause","optionalGraphPattern","or([*,expression])","or([+or([var,[ (,expression,AS,var,)]]),*])","or([+varOrIRIref,*])","or([ASC,DESC])","or([DISTINCT,REDUCED])","or([LANGTAG,[^^,iriRef]])","or([NIL,[ (,*var,)]])","or([[ (,*dataBlockValue,)],NIL])","or([[ (,expression,)],NIL])","or([[*,unaryExpression],[/,unaryExpression]])","or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])","or([[,,or([},[integer,}]])],}])","or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])","or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])","or([[deleteClause,?insertClause],insertClause])","or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])","or([baseDecl,prefixDecl])","or([defaultGraphClause,namedGraphClause])","or([inlineDataOneVar,inlineDataFull])","or([iriRef,[NAMED,iriRef]])","or([iriRef,a])","or([numericLiteralPositive,numericLiteralNegative])","or([queryAll,updateAll])","or([selectQuery,constructQuery,describeQuery,askQuery])","or([subSelect,groupGraphPatternSub])","or([var,[ (,expression,AS,var,)]])","or([verbPath,verbSimple])","or([},[integer,}]])","orderClause","orderCondition","path","pathAlternative","pathElt","pathEltOrInverse","pathMod","pathNegatedPropertySet","pathOneInPropertySet","pathPrimary","pathSequence","prefixDecl","prefixedName","primaryExpression","prologue","propertyList","propertyListNotEmpty","propertyListPath","propertyListPathNotEmpty","quadData","quadDataNoBnodes","quadPattern","quadPatternNoBnodes","quads","quadsNotTriples","queryAll","rdfLiteral","regexExpression","relationalExpression","selectClause","selectQuery","serviceGraphPattern","solutionModifier","sourceSelector","sparql11","storeProperty","strReplaceExpression","string","subSelect","substringExpression","triplesBlock","triplesNode","triplesNodePath","triplesSameSubject","triplesSameSubjectPath","triplesTemplate","unaryExpression","update","update1","updateAll","usingClause","valueLogical","valuesClause","var","varOrIRIref","varOrTerm","verb","verbPath","verbSimple","whereClause","keywords","punct","startSymbol","acceptEmpty","3","CodeMirror","defineMode","config","parserConfig","getPossibles","symbol","possibles","possiblesOb","ll1_table","property","toString","tokenBase","stream","state","nextToken","consumed","inLiteral","closingQuotes","match","stringLiteralLongRegex","contents","regex","closing","returnObj","quotePos","cat","STRING_LITERAL_LONG","CAT","style","complete","text","start","quoteType","quotes","terminals","name","grammar","current","toUpperCase","recordFailurePos","col","column","errorStartPos","errorEndPos","tokenOb","setQueryType","queryType","setSideConditions","topSymbol","inPrefixDecl","checkSideConditions","pos","possibleCurrent","possibleNext","OK","finished","token","stack","pop","nextSymbols","currentPnameNs","slice","prefixes","allNillable","sp","item","lastProperty","colonIndex","indexOf","prefNs","errorMsg","lastPredicateOffset","indent","textAfter","closeBracket","substr","dn","indentTop","indentTable","indentUnit","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","VARNAME","PN_PREFIX","HEX","PERCENT","PN_LOCAL_ESC","PLX","PN_LOCAL","EXPONENT","ECHAR","hex4","unicode","SINGLE","QUOTES","CONTENTS","COMPLETE","RegExp","WS","COMMENT","WS_OR_COMMENT_STAR","*[,, object]","*[(,),object]","*[(,),objectPath]","startState","base","tokenize","electricChars","defineMIME","./_tokenizer-table.js","codemirror","4","Trie","words","children","prototype","insert","str","k","child","T","remove","strOld","strNew","countWord","ret","countPrefix","find","getAllWords","hasOwnProperty","autoComplete","5","mod","setFullscreen","cm","wrap","getWrapperElement","fullScreenRestore","scrollTop","pageYOffset","scrollLeft","pageXOffset","width","height","className","document","documentElement","overflow","refresh","setNormal","info","scrollTo","defineOption","old","Init","6","findMatchingBracket","where","strict","line","getLineHandle","ch","matching","charAt","dir","getTokenTypeAt","Pos","found","scanForBracket","from","to","forward","maxScanLen","maxScanLineLength","maxScanLines","re","bracketRegex","lineEnd","Math","min","lastLine","max","firstLine","lineNo","getLine","end","matchBrackets","autoclear","maxHighlightLen","maxHighlightLineLength","marks","ranges","listSelections","empty","head","markText","ie_lt8","focused","focus","operation","setTimeout","doMatchBrackets","currentlyHighlighted","navigator","userAgent","documentMode","off","on","defineExtension","7","registerHelper","findOpening","openCh","at","pass","lineText","lastIndexOf","tokenType","startToken","endToken","startCh","endCh","count","outer","nextOpen","nextClose","hasImport","getTokenAt","type","semi","prev","startLine","has","next","clipPos","hasInclude","8","doFold","options","force","getRange","allowFolded","range","finder","minSize","findMarksAt","__isFold","cleared","getOption","myWidget","makeWidget","myRange","e_preventDefault","replacedWith","clearOnEnter","signal","widget","createTextNode","createElement","appendChild","editorOptions","foldOptions","defaultOptions","newFoldFunction","rangeFinder","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","unfoldAll","funcs","Array","arguments","helpers","getHelpers","auto","minFoldSize","scanUp","9","State","parseOptions","opts","gutter","indicatorOpen","indicatorFolded","isFolded","findMarks","marker","spec","elt","cloneNode","updateFoldInfo","foldGutter","foldOption","func","eachLine","mark","setGutterMarker","updateInViewport","vp","getViewport","onGutterClick","folded","onChange","clearTimeout","changeUpdate","foldOnChangeTimeSpan","onViewportChange","updateViewportTimeSpan","onFold","clearGutter","./foldcode","10","cmp","b","Iter","tagAt","iter","nextLine","prevLine","toTagEnd","gt","lastSlash","selfClose","toTagStart","lt","xmlTagStart","lastIndex","exec","index","toNextTag","toPrevTag","findMatchingClose","tag","findMatchingOpen","endLine","nameStartChar","nameChar","openTag","startPos","endPos","findMatchingTag","here","open","close","findEnclosingTag","scanForClosingTag","11","Completion","debounce","tick","startLen","getSelection","activityFunc","cursorActivity","isNewCompletion","nw","moved","cmpPos","editor","hintOptions","out","prop","hint","resolve","getText","completion","buildKeyMap","handle","addBinding","bound","baseMap","ourMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","custom","customKeys","extra","extraKeys","getHintElement","hintsElement","el","nodeName","parentNode","Widget","data","picked","hints","selectedHint","completions","list","HINT_ELEMENT_CLASS","ACTIVE_HINT_ELEMENT_CLASS","render","displayText","hintId","cursorCoords","alignWithWord","left","top","bottom","below","winW","innerWidth","body","offsetWidth","winH","innerHeight","offsetHeight","container","box","getBoundingClientRect","overlapY","scrolls","scrollHeight","clientHeight","startScroll","getScrollInfo","curTop","cursor","overlapX","right","node","firstChild","nextSibling","paddingRight","display","nativeBarWidth","addKeyMap","keyMap","avoidWrap","changeActive","screenAmount","closeOnUnfocus","closingOnBlur","onBlur","onFocus","onScroll","curScroll","newTop","point","target","srcElement","completeOnSingleClick","applicableHelpers","somethingSelected","result","supportsSelection","fetchHints","callback","async","then","resolveAutoHints","resolved","run","app","getHelper","fromList","anyword","showHint","getHints","newOpts","selections","anchor","completionActive","requestAnimationFrame","fn","cancelAnimationFrame","active","replaceRange","closeCharacters","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","childNodes","offsetTop","floor","term","word","autocomplete","12","runMode","modespec","mode","getMode","defaults","ie","ie_lt9","tabSize","innerHTML","content","idx","size","lines","splitLines","StringStream","blankLine","eol","13","SearchCursor","doc","query","caseFold","atOccurrence","source","ignoreCase","matches","reverse","cutOff","newMatch","matchLen","origQuery","toLowerCase","orig","adjustPos","origTarget","last","ln","cut","pos1","len1","findNext","findPrevious","savePosAndFail","maxLine","lineCount","newText","origin","defineDocExtension","getSearchCursor","setSelections","14","root","factory","store","isLocalStorageNameSupported","localStorageName","win","err","storage","scriptTag","disabled","version","set","value","get","defaultVal","transact","transactionFn","getAll","forEach","serialize","JSON","stringify","deserialize","parse","setItem","getItem","removeItem","addBehavior","storageOwner","storageContainer","ActiveXObject","write","w","frames","withIEStorage","storeFunction","args","unshift","apply","forbiddenCharsRegex","ieKeyFix","setAttribute","save","getAttribute","removeAttribute","attributes","XMLDocument","attr","testKey","enabled","15","_args","raw","scope","escapedName","rawSpec","_from","_id","_inCache","_installable","_location","_npmUser","email","_npmVersion","_phantomChildren","_requested","_requiredBy","_resolved","_shasum","_shrinkwrap","_spec","_where","author","bugs","url","dependencies","description","devDependencies","directories","dist","shasum","tarball","homepage","licenses","main","maintainers","optionalDependencies","readme","repository","16","console","log","svg","yasgui-utils","nestedExists","../package.json","./storage.js","./svg.js","17","times","day","month","year","exp","XMLSerializer","serializeToString","time","Date","getTime","removeAll","18","draw","parent","svgString","getElement","append","parser","DOMParser","dom","parseFromString","svgContainer","19","license","scripts","dev","build","patch","minor","major","bootstrap-sass","browserify","browserify-shim","browserify-transform-tools","exorcist","gulp","gulp-autoprefixer","gulp-concat","gulp-cssimport","gulp-cssnano","gulp-filter","gulp-jsvalidate","gulp-notify","gulp-rename","gulp-sass","gulp-sourcemaps","gulp-streamify","gulp-uglify","gulp-bump","gulp-connect","gulp-embedlr","gulp-git","gulp-livereload","gulp-tag-version","node-sass","require-dir","run-sequence","vinyl-buffer","vinyl-source-stream","vinyl-transform","watchify","web","optionalShim","../../lib/codemirror","20","utils","yutils","yasqe","completionNotifications","completers","tries","eventInfo","needPossibleAdjustment","notificationName","is","scrollBar","offset","outerWidth","notification","css","storeBulkCompletions","completer","storageId","getPersistencyId","persistent","initCompleter","completionInit","bulk","storeArrayAsBulk","suggestions","completionsFromStorage","persistencyIdentifier","Function","fromAutoShow","tryHintType","autoShow","hintConfig","wrappedHintCallback","getCompletionHintsObject","completerName","inArray","autocompleters","isValidCompletionPosition","callbacks","validPosition","success","invalidPosition","getSuggestionsFromToken","partialToken","stringToAutocomplete","autocompletionString","partialTokenLength","getSuggestionsAsHintObject","getCompleteToken","preProcessToken","wrappedCallback","hintList","suggestedString","postProcessToken","selectHint","completionToken","callbackName","init","notifications","getEl","show","autoshow","appendTo","hide","getTrie","../../lib/trie.js","../main.js","../utils.js","21","fetchFromLov","previousToken","getPreviousNonWsToken","preprocessResourceTokenForCompletion","postprocessResourceTokenForCompletion","./utils","./utils.js","22","tokenTypes","string-2","atom","appendPrefixIfNeeded","fetchFrom","prefixArray","prefix","completeString","sort","preprocessPrefixTokenForCompletion","collapsePrefixes","lastNonWsTokenString","currentPrefix","substring","queryPrefixes","getPrefixesFromQuery","addPrefixes","location","protocol","23","24","tokenPrefix","tokenPrefixUri","trim","reqProtocol","maxResults","q","page","results","updateUrl","increasePage","doRequests","uri","total_results","fail","jqXHR","textStatus","errorThrown","loader","addClass","../imgs.js","25","distinctVars","variable","nextEl","nextElClass","variables","26","sparql","quote","createCurlString","ajaxConfig","getAjaxConfig","host","pathname","cmds","requestMethod","header","headers","join","./sparql.js","27","extend","highlightSelectionMatches","showToken","tabMode","lineNumbers","lineWrapping","backdrop","combine","brace","collapsePrefixesOnLoad","gutters","fixedGutter","syntaxErrorCheck","Ctrl-Space","Cmd-Space","Ctrl-D","deleteLine","Ctrl-K","Shift-Ctrl-K","Cmd-D","Cmd-K","Ctrl-/","commentLines","Cmd-/","Ctrl-Alt-Down","copyLineDown","Ctrl-Alt-Up","copyLineUp","Cmd-Alt-Down","Cmd-Alt-Up","Shift-Ctrl-F","doAutoFormat","Shift-Cmd-F","Ctrl-]","indentMore","Cmd-]","Ctrl-[","indentLess","Cmd-[","Ctrl-S","storeQuery","Cmd-S","Ctrl-Enter","executeQuery","Cmd-Enter","F11","setOption","cursorHeight","createShareLink","createShortLink","consumeShareLink","closest","queryName","getQueryMode","showQueryButton","endpoint","acceptHeaderGraph","acceptHeaderSelect","acceptHeaderUpdate","namedGraphs","defaultGraphs","getQueryForAjax","beforeSend","error","handlers","./main.js","28","29","queryInvalid","download","share","warning","fullscreen","smallscreen","30","imgs","rootEl","class","extendConfig","extendCmInstance","postProcessCmElement","extendedConfig","Autocompleters","lastQueryDuration","getNextNonWsToken","lineNumber","charNumber","collapse","findFirstPrefixLine","animateSpeed","setBackdrop","click","insertAfter","callbackOrConfig","getUrlArguments","removePrefixes","getValueWithoutComments","cleanedQuery","getValue","stringVal","getQueryType","setCheckSyntaxErrors","isEnabled","checkSyntax","enableCompleter","addCompleterToSettings","disableCompleter","removeCompleterFromSettings","settings","splice","valueFromStorage","setValue","drawButtons","updateQueryButton","positionButtons","updateButtonsTransparency","prevQueryValid","matchText","removeClass","getUrlParams","addEventListener","urlParams","hash","href","search","buttons","elementsOverlap","deepcheck","queryValid","precise","warningEl","html","expectedEncoded","expected","marginTop","marginLeft","len","registerAutocompleter","constructor","getAsCurl","curl","svgShare","event","stopPropagation","popup","$input","$this","select","mouseup","unbind","errString","shortLink","positions","position","outerHeight","parseInt","toggleFullscreen","hasClass","xhr","abort","queryButtonIds","busy","valid","status","queryButton","queryStatus","classNames","c","fromTextArea","textAreaEl","insertBefore","linesAreCommented","setCursor","execCommand","autoFormatRange","absStart","indexFromPos","absEnd","res","autoFormatLineBreaks","posFromIndex","indentLine","breakAfterArray","breakAfterCharacters","breakBeforeCharacters","getBreakType","stackTrace","valueOf","currentLine","formattedQuery","breakType","../lib/deparam.js","../lib/grammar/tokenizer.js","./autocompleters/autocompleterBase.js","./autocompleters/classes.js","./autocompleters/prefixes.js","./autocompleters/properties.js","./autocompleters/variables.js","./curl.js","./defaults.js","./imgs.js","./prefixFold.js","./prefixUtils.js","./tokenUtils.js","./tooltip","codemirror/addon/display/fullscreen.js","codemirror/addon/edit/matchbrackets.js","codemirror/addon/fold/brace-fold.js","codemirror/addon/fold/foldcode.js","codemirror/addon/fold/foldgutter.js","codemirror/addon/fold/xml-fold.js","codemirror/addon/hint/show-hint.js","codemirror/addon/runmode/runmode.js","codemirror/addon/search/searchcursor.js","31","findFirstPrefix","lookFor","tokenUtils","hasPreviousPrefix","getLastPrefixPos","prefixKeywordToken","prefixShortname","prefixUri","prefixStart","stopAt","stopAtNextLine","prefixEndChar","prefixEndLine","nextPrefixDeclaration","32","existingPrefixes","addPrefixAsString","pref","prefixString","lastPrefix","lastPrefixLine","numLines","firstToken","previousIndent","getIndentFromLine","escapeRegex","33","Accept","getAcceptHeader","xhrFields","handlerDefined","handler","encodeURIComponent","isEmptyObject","queryStart","updateYasqe","completeCallbacks","ajax","queryMode","getString","argName","merge","acceptHeader","qType","34","prevToken","35","tooltip","hover","repositionTooltip","36","keyExists","objectToTest","exists","persistentIdCreator","persistencyId","getPositions","elem","comparePositions","p1","p2","r1","r2","pos2"],"mappings":"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8CAAA,gDACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QAEA+B,2BACA5C,KAAA,yBAAA,2BACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WAEAiC,8BACAC,OAAA,4BAAA,8BACA1B,QACAC,QACAC,OACAJ,OACAC,OACAI,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAvC,OACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QAEAkC,8CACA1C,KAAA,4CAAA,8CACAC,UAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,OAAA,4CAAA,8CACAC,SAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,MAAA,4CAAA,8CACAC,QAAA,4CAAA,8CACAC,QAEAmC,0CACAxC,OAAA,wCAAA,0CACAK,QAEAoC,6BACAhC,KAAA,2BAAA,6BACApB,QAEAqD,qBACAjC,KAAA,mBAAA,qBACApB,OACAqB,OACAC,OACAC,QACAC,QACAC,OACAC,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBAEAS,kCACApD,MAAA,gCAAA,kCACAH,MACAC,OACAC,OACAE,QAEAoD,mBACAC,OAAA,iBAAA,mBACA9B,SAAA,iBAAA,mBACAC,MAAA,iBAAA,mBACAC,OAAA,iBAAA,mBACAG,UAAA,iBAAA,mBACAC,UAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAC,sBAAA,iBAAA,mBACAC,sBAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,SAAA,iBAAA,mBACAC,QAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,kBAAA,iBAAA,mBACAC,iBAAA,iBAAA,mBACAC,kBA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BACAhG,SAAA,iBAAA,mBACAK,UAAA,iBAAA,mBACAC,UAAA,iBAAA,oBAEAwI,gBACAjJ,MAAA,cAAA,gBACAC,MAAA,cAAA,gBACAE,SAAA,cAAA;AACAK,UAAA,cAAA,gBACAC,UAAA,cAAA,iBAEAyI,MACAnK,KAAA,KACAiB,QACAC,QACAC,OACAJ,OACAC,OACAI,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAlC,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,UACAC,QAEA0J,aACAC,UAAA,YACAC,OACAtC,OACAC,OACAhH,QACAC,QACAH,OACAgD,OACAC,QACAC,eACAC,YACAC,SACAC,OACAC,OACAC,SACAC,QACAC,OACAC,QACAC,SACAC,SACAC,UACAC,UACAC,SACAC,SACAC,kBACAC,YACAC,aACAC,WACAC,aACAC,YACAC,QACAC,SACAC,OACAC,SACAC,WACAC,WACAC,YACAC,MACAC,OACAC,QACAC,WACAC,OACAC,QACAC,UACAC,UACAC,UACAC,YACAC,MACAC,WACAC,SACAC,YACAC,SACAC,SACAC,WACAC,aACAC,aACA1F,QACAC,SACAiJ,SACAC,OACAC,OACAC,OACAC,OACAC,UACAC,gBACA7D,UACAC,WACAC,SACAC,UACAC,OACAhG,WACAO,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAd,YACAC,YACA8F,QAEAsD,UACAzK,OAAA,SACAe,WACAK,YACAC,aAEAqJ,WACAC,QAAA,UACA/J,QACAC,QACAE,WACAK,YACAC,aAEAuJ,aACAD,QAAA,UACA5J,WACAK,YACAC,aAEAwJ,aACAF,QAAA,UACA3K,SACA8K,WACAC,SACAC,QAEAC,aACAN,QAAA,UACA3K,UAEAkL,aACAP,QAAA,UACAG,WACA9K,SACAe,WACAK,YACAC,aAEA8J,UACAnI,OAAA,SACAnD,QAEAuL,mBACA9L,KAAA,kBACAD,QAEAgM,0BACA1L,KAAA,yBACAU,QAEAiL,sBACA3L,KAAA,qBACAE,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QAEAkL,yBACA5L,KAAA,wBACAU,OACAL,UAEAwL,2BACAhM,KAAA,0BACAH,QAEAoM,eACAjM,KAAA,cACAtC,MAEAwO,aACAtM,IAAA,YACAC,QAEAsM,oBACAC,MAAA,mBACApM,OACAtC,MAEA2O,2CACAjL,MAAA,0CACAC,MAAA,0CACAiL,KAAA,0CACArP,GAAA,0CACAwN,KAAA,0CACAvJ,KAAA,0CACAK,SAAA,0CACAK,UAAA,0CACAC,UAAA,0CACA7B,OACAG,OACAC,OACAC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QAEA0L,qDACAtP,GAAA,oDACAqP,KAAA,oDACA/K,SAAA,oDACAK,UAAA,oDACAC,UAAA,oDACAhC,QAEA2M,0BACA5D,QAAA,yBACAC,QAAA,yBACAE,MAAA,yBACAC,OAAA,yBACAC,MAAA,yBACAC,KAAA,yBACAC,MAAA,yBACAC,MAAA,yBACAC,QAAA,yBACAC,MAAA,yBACA5L,MAEA+O,sBACAxP,GAAA,qBACAmE,MAAA,qBACAC,MAAA,qBACAE,SAAA,qBACAK,UAAA,qBACAC,UAAA,qBACA7B,OACAG,OACAC,OACAS,OACAL,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WAEA8L,YACApL,KAAA,WACAJ,KAAA,WACAtB,MACAC,OACAC,OACAC,QACAJ,QACAiI,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACA/F,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAiF,OACA3G,OACAhB,QAEA2M,qBACAvL,MAAA,oBACAC,MAAA,oBACAC,KAAA,oBACAJ,KAAA,oBACAC,KAAA,oBACAI,SAAA,oBACAC,MAAA,oBACAC,OAAA,oBACAC,kBAAA,oBACAC,MAAA,oBACAC,UAAA,oBACAC,UAAA,oBACAC,iBAAA,oBACAC,iBAAA,oBACAC,sBAAA,oBACAC,sBAAA,oBACAC,SAAA,oBACAC,SAAA,oBACAC,QAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACAC,kBAAA,oBACAC,kBAAA,oBACAC,iBAAA,oBACA7B,QAEA+L,gBACAhJ,OAAA,eACAhD,UACAiD,SACAC,UACAJ,SACAC,UACAjG,KACAmD,QAEAgM,iBACAlJ,QAAA,gBACA/C,UACAiD,SACAC,UACAJ,SACAhG,KACAmD,QAEAiM,iBACAlE,QAAA,gBACApF,SACAoG,UAEAmD,gBACAlJ,OAAA,eACAjD,UACAlD,KACAmD,QAEAmM,uBACAnJ,OAAA,sBACAC,QAAA,sBACAlD,UACAlD,KACAmD,QAEAoM,iBACAnJ,QAAA,gBACAlD,UACAlD,KACAmD,QAEAqM,2BACA1C,UAAA,0BACA2C,SAAA,0BACAxF,OACAzG,OACAE,QACAC,SAEA+L,8BACAC,SAAA,6BACAC,MAAA,6BACAjK,SACA9B,WACAC,QACAC,SACAG,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACAzF,KACAmE,QACAC,QACAiL,OACA7B,OACAvJ,OACAf,OACAH,OACAF,OACAF,MACAC,OACAE,QACAJ,QACAiI,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAY,OACAC,OACAT,OACA3G,OACAH,OACAM,OACAG,OACAI,oBACAC,QACAvB,OACAI,SACAH,OACAC,YACAC,SACAE,WACAC,UACAC,QACAC,WAEA2M,kDACA5F,KAAA,iDACA3G,KAAA,iDACAmH,OACAC,OACA/F,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,mBACA9C,MACAC,OACAC,OACAC,QACAJ,QACAiI,OACAC,QACAC,OACAC,OACAC,QACAC,QACAC,MACAX,OACAvH,QAEAwN,6LACA5F,KACA,4LAEAC,MACA,4LAEAC,KACA,4LAEAC,KACA,4LAEAC,MACA,4LAEAC,MACA,4LAEAC,IACA,4LAEAX,KACA,4LAEA3H,MACAC,OACAC,OACAC,QACAJ,QACAK,QAEAyN,gBACA/J,OAAA,eACA9C,UACAiD,SACAC,UACApG,KACAmD,QAEA6M,YACA/F,KAAA,WACAgG,KAAA,WACAxF,KAAA,WACA9H,KAAA,WACAY,OACAD,OACAnB,OACAqB,OACAC,OACAC,QACAC,QACAC,OACAC,WACAC,QACAC,SACAC,oBACAC,QACAC,YACAC,YACAC,mBACAC,mBACAC,wBACAC,wBACAC,WACAC,WACAC,UACAC,oBACAC,oBACAC,mBACAC,oBACAC,oBACAC,oBAEAkL,iBACAxM,MAAA,gBACAC,MAAA,gBACAC,KAAA,gBACAJ,KAAA,gBACAC,KAAA,gBACAI,SAAA,gBACAC,MAAA,gBACAC,OAAA,gBACAC,kBAAA,gBACAC,MAAA,gBACAC,UAAA,gBACAC,UAAA,gBACAC,iBAAA,gBACAC,iBAAA,gBACAC,sBAAA,gBACAC,sBAAA,gBACAC,SAAA,gBACAC,SAAA,gBACAC,QAAA,gBACAC,kBAAA,gBACAC,kBAAA,gBACAC,iBAAA,gBACAC,kBAAA,gBACAC,kBAAA,gBACAC,iBAAA,gBACArC,OACAC,YACAC,SACAC,SACAC,WACAC,UACAC,QACAC,UACAC,QAEAgN,oBACAzM,MAAA,mBACAC,MAAA,mBACAC,KAAA,mBACAJ,KAAA,mBACAC,KAAA,mBACAI,SAAA,mBACAC,MAAA,mBACAC,OAAA,mBACAC,kBAAA,mBACAC,MAAA,mBACAC,UAAA,mBACAC,UAAA,mBACAC,iBAAA,mBACAC,iBAAA,mBACAC,sBAAA,mBACAC,sBAAA,mBACAC,SAAA,mBACAC,SAAA,mBACAC,QAAA,mBACAC,kBAAA,mBACAC,kBAAA,mBACAC,iBAAA,mBACAC,kBAAA,mBACAC,kBAAA,mBACAC,iBAAA,mBACA7B,OACAL,UAEAsN,gBACAtK,OAAA,eACAnD,KAAA,eACAqD,SACAC,UACAC,SACAC,SACAC,UACAlD,UACAlD,MAEAqQ,0BACA7M,KAAA,IAAA,kBAAA,MAEA8M,eACA9M,KAAA,IAAA,OAAA,MAEA+M,qBACA/M,KAAA,IAAA,aAAA,MA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AC,OACA,2BACA,yKAEAC,QACA,2BACA,yKAEAC,QACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,gBACA,2BACA,yKAEAC,UACA,2BACA,yKAEAC,WACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,WACA,2BACA,yKAEAC,UACA,2BACA,yKAEAC,MACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,KACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,UACA,2BACA,yKAEAC,IACA,2BACA,yKAEAC,KACA,2BACA,yKAEAC,MACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,KACA,2BACA,yKAEAC,MACA,2BACA,yKAEAC,QACA,2BACA,yKAEAC,QACA,2BACA,yKAEAC,QACA,2BACA,yKAEAC,UACA,2BACA,yKAEAC,IACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,UACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,WACA,2BACA,yKAEAC,WACA,2BACA,yKAEA1F,MACA,2BACA,yKAEAC,OACA,2BACA,yKAEAiJ,OACA,2BACA,yKAEAC,KACA,2BACA,yKAEAC,KACA,2BACA,yKAEAC,KACA,2BACA,yKAEAC,KACA,2BACA,yKAEAC,QACA,2BACA,yKAEAC,cACA,2BACA,yKAEA7D,QACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,OACA,2BACA,yKAEAC,QACA,2BACA,yKAEAC,KACA,2BACA,yKAEAhG,SACA,2BACA,yKAEAO,iBACA,2BACA,yKAEAC,iBACA,2BACA,yKAEAC,sBACA,2BACA,yKAEAC,sBACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,SACA,2BACA,yKAEAC,QACA,2BACA;AAEAC,kBACA,2BACA,yKAEAC,kBACA,2BACA,yKAEAC,iBACA,2BACA,yKAEAC,kBACA,2BACA,yKAEAC,kBACA,2BACA,yKAEAC,iBACA,2BACA,yKAEAd,UACA,2BACA,yK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AAA,kBAAA,MAEA0S,sBACAtP,KACA,oBACA,6LAEAtC,KACA,oBACA,6LAEAC,KACA,oBACA,6LAEAhH,MACA,oBACA,6LAEAC,MACA,oBACA,6LAEAH,KACA,oBACA,6LAEAgD,KACA,oBACA,6LAEAC,MACA,oBACA,6LAEAC,aACA,oBACA,6LAEAC,UACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,MACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,MACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,QACA,oBACA,6LAEAC,QACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,gBACA,oBACA,6LAEAC,UACA,oBACA,6LAEAC,WACA,oBACA,6LAEAC,SACA,oBACA,6LAEAC,WACA,oBACA,6LAEAC,UACA,oBACA,6LAEAC,MACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,SACA,oBACA,6LAEAC,SACA,oBACA,6LAEAC,UACA,oBACA,6LAEAC,IACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,MACA,oBACA,6LAEAC,SACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,MACA,oBACA,6LAEAC,QACA,oBACA,6LAEAC,QACA,oBACA,6LAEAC,QACA,oBACA,6LAEAC,UACA,oBACA,6LAEAC,IACA,oBACA,6LAEAC,SACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,UACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,OACA,oBACA,6LAEAC,SACA,oBACA,6LAEAC,WACA,oBACA,6LAEAC,WACA,oBACA,6LAEA1F,MACA,oBACA,6LAEAC,OACA,oBACA,6LAEAiJ,OACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,KACA,oBACA,6LAEAC,QACA,oBACA,6LAEAC,cACA,oBACA,6LAEA7D,QACA,oBACA,6LAEA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","file":"yasqe.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n/*\r\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\r\n  http://benalman.com/projects/jquery-bbq-plugin/\r\n*/\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n$.deparam = function(params, coerce) {\r\n  var obj = {}, coerce_types = { true: !0, false: !1, null: null };\r\n\r\n  // Iterate over all name=value pairs.\r\n  $.each(params.replace(/\\+/g, \" \").split(\"&\"), function(j, v) {\r\n    var param = v.split(\"=\"),\r\n      key = decodeURIComponent(param[0]),\r\n      val,\r\n      cur = obj,\r\n      i = 0,\r\n      // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\r\n      // into its component parts.\r\n      keys = key.split(\"][\"),\r\n      keys_last = keys.length - 1;\r\n\r\n    // If the first keys part contains [ and the last ends with ], then []\r\n    // are correctly balanced.\r\n    if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\r\n      // Remove the trailing ] from the last keys part.\r\n      keys[keys_last] = keys[keys_last].replace(/\\]$/, \"\");\r\n\r\n      // Split first keys part into two parts on the [ and add them back onto\r\n      // the beginning of the keys array.\r\n      keys = keys.shift().split(\"[\").concat(keys);\r\n\r\n      keys_last = keys.length - 1;\r\n    } else {\r\n      // Basic 'foo' style key.\r\n      keys_last = 0;\r\n    }\r\n\r\n    // Are we dealing with a name=value pair, or just a name?\r\n    if (param.length === 2) {\r\n      val = decodeURIComponent(param[1]);\r\n\r\n      // Coerce values.\r\n      if (coerce) {\r\n        val = val && !isNaN(val)\r\n          ? +val // number\r\n          : val === \"undefined\"\r\n              ? undefined // undefined\r\n              : coerce_types[val] !== undefined\r\n                  ? coerce_types[val] // true, false, null\r\n                  : val; // string\r\n      }\r\n\r\n      if (keys_last) {\r\n        // Complex key, build deep object structure based on a few rules:\r\n        // * The 'cur' pointer starts at the object top-level.\r\n        // * [] = array push (n is set to array length), [n] = array if n is\r\n        //   numeric, otherwise object.\r\n        // * If at the last keys part, set the value.\r\n        // * For each keys part, if the current level is undefined create an\r\n        //   object or array based on the type of the next keys part.\r\n        // * Move the 'cur' pointer to the next level.\r\n        // * Rinse & repeat.\r\n        for (; i <= keys_last; i++) {\r\n          key = keys[i] === \"\" ? cur.length : keys[i];\r\n          cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;\r\n        }\r\n      } else {\r\n        // Simple key, even simpler rules, since only scalars and shallow\r\n        // arrays are allowed.\r\n\r\n        if ($.isArray(obj[key])) {\r\n          // val is already an array, so push on the next value.\r\n          obj[key].push(val);\r\n        } else if (obj[key] !== undefined) {\r\n          // val isn't an array, but since a second value has been specified,\r\n          // convert val into an array.\r\n          obj[key] = [obj[key], val];\r\n        } else {\r\n          // val is a scalar.\r\n          obj[key] = val;\r\n        }\r\n      }\r\n    } else if (key) {\r\n      // No value was defined, so set something meaningful.\r\n      obj[key] = coerce ? undefined : \"\";\r\n    }\r\n  });\r\n\r\n  return obj;\r\n};\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.YASQE = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\n/*\r\n  jQuery deparam is an extraction of the deparam method from Ben Alman's jQuery BBQ\r\n  http://benalman.com/projects/jquery-bbq-plugin/\r\n*/\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n$.deparam = function(params, coerce) {\r\n  var obj = {}, coerce_types = { true: !0, false: !1, null: null };\r\n\r\n  // Iterate over all name=value pairs.\r\n  $.each(params.replace(/\\+/g, \" \").split(\"&\"), function(j, v) {\r\n    var param = v.split(\"=\"),\r\n      key = decodeURIComponent(param[0]),\r\n      val,\r\n      cur = obj,\r\n      i = 0,\r\n      // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\r\n      // into its component parts.\r\n      keys = key.split(\"][\"),\r\n      keys_last = keys.length - 1;\r\n\r\n    // If the first keys part contains [ and the last ends with ], then []\r\n    // are correctly balanced.\r\n    if (/\\[/.test(keys[0]) && /\\]$/.test(keys[keys_last])) {\r\n      // Remove the trailing ] from the last keys part.\r\n      keys[keys_last] = keys[keys_last].replace(/\\]$/, \"\");\r\n\r\n      // Split first keys part into two parts on the [ and add them back onto\r\n      // the beginning of the keys array.\r\n      keys = keys.shift().split(\"[\").concat(keys);\r\n\r\n      keys_last = keys.length - 1;\r\n    } else {\r\n      // Basic 'foo' style key.\r\n      keys_last = 0;\r\n    }\r\n\r\n    // Are we dealing with a name=value pair, or just a name?\r\n    if (param.length === 2) {\r\n      val = decodeURIComponent(param[1]);\r\n\r\n      // Coerce values.\r\n      if (coerce) {\r\n        val = val && !isNaN(val)\r\n          ? +val // number\r\n          : val === \"undefined\"\r\n              ? undefined // undefined\r\n              : coerce_types[val] !== undefined\r\n                  ? coerce_types[val] // true, false, null\r\n                  : val; // string\r\n      }\r\n\r\n      if (keys_last) {\r\n        // Complex key, build deep object structure based on a few rules:\r\n        // * The 'cur' pointer starts at the object top-level.\r\n        // * [] = array push (n is set to array length), [n] = array if n is\r\n        //   numeric, otherwise object.\r\n        // * If at the last keys part, set the value.\r\n        // * For each keys part, if the current level is undefined create an\r\n        //   object or array based on the type of the next keys part.\r\n        // * Move the 'cur' pointer to the next level.\r\n        // * Rinse & repeat.\r\n        for (; i <= keys_last; i++) {\r\n          key = keys[i] === \"\" ? cur.length : keys[i];\r\n          cur = cur[key] = i < keys_last ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : []) : val;\r\n        }\r\n      } else {\r\n        // Simple key, even simpler rules, since only scalars and shallow\r\n        // arrays are allowed.\r\n\r\n        if ($.isArray(obj[key])) {\r\n          // val is already an array, so push on the next value.\r\n          obj[key].push(val);\r\n        } else if (obj[key] !== undefined) {\r\n          // val isn't an array, but since a second value has been specified,\r\n          // convert val into an array.\r\n          obj[key] = [obj[key], val];\r\n        } else {\r\n          // val is a scalar.\r\n          obj[key] = val;\r\n        }\r\n      }\r\n    } else if (key) {\r\n      // No value was defined, so set something meaningful.\r\n      obj[key] = coerce ? undefined : \"\";\r\n    }\r\n  });\r\n\r\n  return obj;\r\n};\r\n\n},{\"jquery\":undefined}],2:[function(require,module,exports){\nmodule.exports = {\r\n  table: {\r\n    \"*[&&,valueLogical]\": {\r\n      \"&&\": [\"[&&,valueLogical]\", \"*[&&,valueLogical]\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \";\": []\r\n    },\r\n    \"*[,,expression]\": {\r\n      \",\": [\"[,,expression]\", \"*[,,expression]\"],\r\n      \")\": []\r\n    },\r\n    \"*[,,objectPath]\": {\r\n      \",\": [\"[,,objectPath]\", \"*[,,objectPath]\"],\r\n      \".\": [],\r\n      \";\": [],\r\n      \"]\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"*[,,object]\": {\r\n      \",\": [\"[,,object]\", \"*[,,object]\"],\r\n      \".\": [],\r\n      \";\": [],\r\n      \"]\": [],\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"*[/,pathEltOrInverse]\": {\r\n      \"/\": [\"[/,pathEltOrInverse]\", \"*[/,pathEltOrInverse]\"],\r\n      \"|\": [],\r\n      \")\": [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    \"*[;,?[or([verbPath,verbSimple]),objectList]]\": {\r\n      \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"*[;,?[verb,objectList]]\": {\r\n      \";\": [\"[;,?[verb,objectList]]\", \"*[;,?[verb,objectList]]\"],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"*[UNION,groupGraphPattern]\": {\r\n      UNION: [\"[UNION,groupGraphPattern]\", \"*[UNION,groupGraphPattern]\"],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      \".\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"*[graphPatternNotTriples,?.,?triplesBlock]\": {\r\n      \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      OPTIONAL: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      MINUS: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      GRAPH: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      SERVICE: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      FILTER: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      BIND: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VALUES: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"}\": []\r\n    },\r\n    \"*[quadsNotTriples,?.,?triplesTemplate]\": {\r\n      GRAPH: [\"[quadsNotTriples,?.,?triplesTemplate]\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"}\": []\r\n    },\r\n    \"*[|,pathOneInPropertySet]\": {\r\n      \"|\": [\"[|,pathOneInPropertySet]\", \"*[|,pathOneInPropertySet]\"],\r\n      \")\": []\r\n    },\r\n    \"*[|,pathSequence]\": {\r\n      \"|\": [\"[|,pathSequence]\", \"*[|,pathSequence]\"],\r\n      \")\": [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    \"*[||,conditionalAndExpression]\": {\r\n      \"||\": [\"[||,conditionalAndExpression]\", \"*[||,conditionalAndExpression]\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \";\": []\r\n    },\r\n    \"*dataBlockValue\": {\r\n      UNDEF: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      IRI_REF: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      TRUE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      FALSE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      PNAME_LN: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      PNAME_NS: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL1: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL2: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL_LONG1: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL_LONG2: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      INTEGER: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DECIMAL: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DOUBLE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      INTEGER_POSITIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DECIMAL_POSITIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DOUBLE_POSITIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      INTEGER_NEGATIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DECIMAL_NEGATIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DOUBLE_NEGATIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      \"}\": [],\r\n      \")\": []\r\n    },\r\n    \"*datasetClause\": {\r\n      FROM: [\"datasetClause\", \"*datasetClause\"],\r\n      WHERE: [],\r\n      \"{\": []\r\n    },\r\n    \"*describeDatasetClause\": {\r\n      FROM: [\"describeDatasetClause\", \"*describeDatasetClause\"],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      GROUP: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      WHERE: [],\r\n      \"{\": [],\r\n      VALUES: [],\r\n      $: []\r\n    },\r\n    \"*graphNode\": {\r\n      \"(\": [\"graphNode\", \"*graphNode\"],\r\n      \"[\": [\"graphNode\", \"*graphNode\"],\r\n      VAR1: [\"graphNode\", \"*graphNode\"],\r\n      VAR2: [\"graphNode\", \"*graphNode\"],\r\n      NIL: [\"graphNode\", \"*graphNode\"],\r\n      IRI_REF: [\"graphNode\", \"*graphNode\"],\r\n      TRUE: [\"graphNode\", \"*graphNode\"],\r\n      FALSE: [\"graphNode\", \"*graphNode\"],\r\n      BLANK_NODE_LABEL: [\"graphNode\", \"*graphNode\"],\r\n      ANON: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_LN: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_NS: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL2: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG2: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      \")\": []\r\n    },\r\n    \"*graphNodePath\": {\r\n      \"(\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      \"[\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      NIL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      IRI_REF: [\"graphNodePath\", \"*graphNodePath\"],\r\n      TRUE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      FALSE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      BLANK_NODE_LABEL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      ANON: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_LN: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_NS: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      \")\": []\r\n    },\r\n    \"*groupCondition\": {\r\n      \"(\": [\"groupCondition\", \"*groupCondition\"],\r\n      STR: [\"groupCondition\", \"*groupCondition\"],\r\n      LANG: [\"groupCondition\", \"*groupCondition\"],\r\n      LANGMATCHES: [\"groupCondition\", \"*groupCondition\"],\r\n      DATATYPE: [\"groupCondition\", \"*groupCondition\"],\r\n      BOUND: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI: [\"groupCondition\", \"*groupCondition\"],\r\n      URI: [\"groupCondition\", \"*groupCondition\"],\r\n      BNODE: [\"groupCondition\", \"*groupCondition\"],\r\n      RAND: [\"groupCondition\", \"*groupCondition\"],\r\n      ABS: [\"groupCondition\", \"*groupCondition\"],\r\n      CEIL: [\"groupCondition\", \"*groupCondition\"],\r\n      FLOOR: [\"groupCondition\", \"*groupCondition\"],\r\n      ROUND: [\"groupCondition\", \"*groupCondition\"],\r\n      CONCAT: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLEN: [\"groupCondition\", \"*groupCondition\"],\r\n      UCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      LCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      ENCODE_FOR_URI: [\"groupCondition\", \"*groupCondition\"],\r\n      CONTAINS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRSTARTS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRENDS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRBEFORE: [\"groupCondition\", \"*groupCondition\"],\r\n      STRAFTER: [\"groupCondition\", \"*groupCondition\"],\r\n      YEAR: [\"groupCondition\", \"*groupCondition\"],\r\n      MONTH: [\"groupCondition\", \"*groupCondition\"],\r\n      DAY: [\"groupCondition\", \"*groupCondition\"],\r\n      HOURS: [\"groupCondition\", \"*groupCondition\"],\r\n      MINUTES: [\"groupCondition\", \"*groupCondition\"],\r\n      SECONDS: [\"groupCondition\", \"*groupCondition\"],\r\n      TIMEZONE: [\"groupCondition\", \"*groupCondition\"],\r\n      TZ: [\"groupCondition\", \"*groupCondition\"],\r\n      NOW: [\"groupCondition\", \"*groupCondition\"],\r\n      UUID: [\"groupCondition\", \"*groupCondition\"],\r\n      STRUUID: [\"groupCondition\", \"*groupCondition\"],\r\n      MD5: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA1: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA256: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA384: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA512: [\"groupCondition\", \"*groupCondition\"],\r\n      COALESCE: [\"groupCondition\", \"*groupCondition\"],\r\n      IF: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLANG: [\"groupCondition\", \"*groupCondition\"],\r\n      STRDT: [\"groupCondition\", \"*groupCondition\"],\r\n      SAMETERM: [\"groupCondition\", \"*groupCondition\"],\r\n      ISIRI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISURI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISBLANK: [\"groupCondition\", \"*groupCondition\"],\r\n      ISLITERAL: [\"groupCondition\", \"*groupCondition\"],\r\n      ISNUMERIC: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR1: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR2: [\"groupCondition\", \"*groupCondition\"],\r\n      SUBSTR: [\"groupCondition\", \"*groupCondition\"],\r\n      REPLACE: [\"groupCondition\", \"*groupCondition\"],\r\n      REGEX: [\"groupCondition\", \"*groupCondition\"],\r\n      EXISTS: [\"groupCondition\", \"*groupCondition\"],\r\n      NOT: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI_REF: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_LN: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_NS: [\"groupCondition\", \"*groupCondition\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"*havingCondition\": {\r\n      \"(\": [\"havingCondition\", \"*havingCondition\"],\r\n      STR: [\"havingCondition\", \"*havingCondition\"],\r\n      LANG: [\"havingCondition\", \"*havingCondition\"],\r\n      LANGMATCHES: [\"havingCondition\", \"*havingCondition\"],\r\n      DATATYPE: [\"havingCondition\", \"*havingCondition\"],\r\n      BOUND: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI: [\"havingCondition\", \"*havingCondition\"],\r\n      URI: [\"havingCondition\", \"*havingCondition\"],\r\n      BNODE: [\"havingCondition\", \"*havingCondition\"],\r\n      RAND: [\"havingCondition\", \"*havingCondition\"],\r\n      ABS: [\"havingCondition\", \"*havingCondition\"],\r\n      CEIL: [\"havingCondition\", \"*havingCondition\"],\r\n      FLOOR: [\"havingCondition\", \"*havingCondition\"],\r\n      ROUND: [\"havingCondition\", \"*havingCondition\"],\r\n      CONCAT: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLEN: [\"havingCondition\", \"*havingCondition\"],\r\n      UCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      LCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      ENCODE_FOR_URI: [\"havingCondition\", \"*havingCondition\"],\r\n      CONTAINS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRSTARTS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRENDS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRBEFORE: [\"havingCondition\", \"*havingCondition\"],\r\n      STRAFTER: [\"havingCondition\", \"*havingCondition\"],\r\n      YEAR: [\"havingCondition\", \"*havingCondition\"],\r\n      MONTH: [\"havingCondition\", \"*havingCondition\"],\r\n      DAY: [\"havingCondition\", \"*havingCondition\"],\r\n      HOURS: [\"havingCondition\", \"*havingCondition\"],\r\n      MINUTES: [\"havingCondition\", \"*havingCondition\"],\r\n      SECONDS: [\"havingCondition\", \"*havingCondition\"],\r\n      TIMEZONE: [\"havingCondition\", \"*havingCondition\"],\r\n      TZ: [\"havingCondition\", \"*havingCondition\"],\r\n      NOW: [\"havingCondition\", \"*havingCondition\"],\r\n      UUID: [\"havingCondition\", \"*havingCondition\"],\r\n      STRUUID: [\"havingCondition\", \"*havingCondition\"],\r\n      MD5: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA1: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA256: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA384: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA512: [\"havingCondition\", \"*havingCondition\"],\r\n      COALESCE: [\"havingCondition\", \"*havingCondition\"],\r\n      IF: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLANG: [\"havingCondition\", \"*havingCondition\"],\r\n      STRDT: [\"havingCondition\", \"*havingCondition\"],\r\n      SAMETERM: [\"havingCondition\", \"*havingCondition\"],\r\n      ISIRI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISURI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISBLANK: [\"havingCondition\", \"*havingCondition\"],\r\n      ISLITERAL: [\"havingCondition\", \"*havingCondition\"],\r\n      ISNUMERIC: [\"havingCondition\", \"*havingCondition\"],\r\n      SUBSTR: [\"havingCondition\", \"*havingCondition\"],\r\n      REPLACE: [\"havingCondition\", \"*havingCondition\"],\r\n      REGEX: [\"havingCondition\", \"*havingCondition\"],\r\n      EXISTS: [\"havingCondition\", \"*havingCondition\"],\r\n      NOT: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI_REF: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_LN: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_NS: [\"havingCondition\", \"*havingCondition\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"*or([[ (,*dataBlockValue,)],NIL])\": {\r\n      \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\", \"*or([[ (,*dataBlockValue,)],NIL])\"],\r\n      NIL: [\"or([[ (,*dataBlockValue,)],NIL])\", \"*or([[ (,*dataBlockValue,)],NIL])\"],\r\n      \"}\": []\r\n    },\r\n    \"*or([[*,unaryExpression],[/,unaryExpression]])\": {\r\n      \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      \";\": []\r\n    },\r\n    \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\": {\r\n      \"+\": [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"-\": [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_POSITIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \";\": []\r\n    },\r\n    \"*or([baseDecl,prefixDecl])\": {\r\n      BASE: [\"or([baseDecl,prefixDecl])\", \"*or([baseDecl,prefixDecl])\"],\r\n      PREFIX: [\"or([baseDecl,prefixDecl])\", \"*or([baseDecl,prefixDecl])\"],\r\n      $: [],\r\n      CONSTRUCT: [],\r\n      DESCRIBE: [],\r\n      ASK: [],\r\n      INSERT: [],\r\n      DELETE: [],\r\n      SELECT: [],\r\n      LOAD: [],\r\n      CLEAR: [],\r\n      DROP: [],\r\n      ADD: [],\r\n      MOVE: [],\r\n      COPY: [],\r\n      CREATE: [],\r\n      WITH: []\r\n    },\r\n    \"*or([var,[ (,expression,AS,var,)]])\": {\r\n      \"(\": [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR1: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR2: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      WHERE: [],\r\n      \"{\": [],\r\n      FROM: []\r\n    },\r\n    \"*orderCondition\": {\r\n      ASC: [\"orderCondition\", \"*orderCondition\"],\r\n      DESC: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR1: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR2: [\"orderCondition\", \"*orderCondition\"],\r\n      \"(\": [\"orderCondition\", \"*orderCondition\"],\r\n      STR: [\"orderCondition\", \"*orderCondition\"],\r\n      LANG: [\"orderCondition\", \"*orderCondition\"],\r\n      LANGMATCHES: [\"orderCondition\", \"*orderCondition\"],\r\n      DATATYPE: [\"orderCondition\", \"*orderCondition\"],\r\n      BOUND: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI: [\"orderCondition\", \"*orderCondition\"],\r\n      URI: [\"orderCondition\", \"*orderCondition\"],\r\n      BNODE: [\"orderCondition\", \"*orderCondition\"],\r\n      RAND: [\"orderCondition\", \"*orderCondition\"],\r\n      ABS: [\"orderCondition\", \"*orderCondition\"],\r\n      CEIL: [\"orderCondition\", \"*orderCondition\"],\r\n      FLOOR: [\"orderCondition\", \"*orderCondition\"],\r\n      ROUND: [\"orderCondition\", \"*orderCondition\"],\r\n      CONCAT: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLEN: [\"orderCondition\", \"*orderCondition\"],\r\n      UCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      LCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      ENCODE_FOR_URI: [\"orderCondition\", \"*orderCondition\"],\r\n      CONTAINS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRSTARTS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRENDS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRBEFORE: [\"orderCondition\", \"*orderCondition\"],\r\n      STRAFTER: [\"orderCondition\", \"*orderCondition\"],\r\n      YEAR: [\"orderCondition\", \"*orderCondition\"],\r\n      MONTH: [\"orderCondition\", \"*orderCondition\"],\r\n      DAY: [\"orderCondition\", \"*orderCondition\"],\r\n      HOURS: [\"orderCondition\", \"*orderCondition\"],\r\n      MINUTES: [\"orderCondition\", \"*orderCondition\"],\r\n      SECONDS: [\"orderCondition\", \"*orderCondition\"],\r\n      TIMEZONE: [\"orderCondition\", \"*orderCondition\"],\r\n      TZ: [\"orderCondition\", \"*orderCondition\"],\r\n      NOW: [\"orderCondition\", \"*orderCondition\"],\r\n      UUID: [\"orderCondition\", \"*orderCondition\"],\r\n      STRUUID: [\"orderCondition\", \"*orderCondition\"],\r\n      MD5: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA1: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA256: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA384: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA512: [\"orderCondition\", \"*orderCondition\"],\r\n      COALESCE: [\"orderCondition\", \"*orderCondition\"],\r\n      IF: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLANG: [\"orderCondition\", \"*orderCondition\"],\r\n      STRDT: [\"orderCondition\", \"*orderCondition\"],\r\n      SAMETERM: [\"orderCondition\", \"*orderCondition\"],\r\n      ISIRI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISURI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISBLANK: [\"orderCondition\", \"*orderCondition\"],\r\n      ISLITERAL: [\"orderCondition\", \"*orderCondition\"],\r\n      ISNUMERIC: [\"orderCondition\", \"*orderCondition\"],\r\n      SUBSTR: [\"orderCondition\", \"*orderCondition\"],\r\n      REPLACE: [\"orderCondition\", \"*orderCondition\"],\r\n      REGEX: [\"orderCondition\", \"*orderCondition\"],\r\n      EXISTS: [\"orderCondition\", \"*orderCondition\"],\r\n      NOT: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI_REF: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_LN: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_NS: [\"orderCondition\", \"*orderCondition\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"*usingClause\": {\r\n      USING: [\"usingClause\", \"*usingClause\"],\r\n      WHERE: []\r\n    },\r\n    \"*var\": {\r\n      VAR1: [\"var\", \"*var\"],\r\n      VAR2: [\"var\", \"*var\"],\r\n      \")\": []\r\n    },\r\n    \"*varOrIRIref\": {\r\n      VAR1: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      VAR2: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      IRI_REF: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_LN: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_NS: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      GROUP: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      WHERE: [],\r\n      \"{\": [],\r\n      FROM: [],\r\n      VALUES: [],\r\n      $: []\r\n    },\r\n    \"+graphNode\": {\r\n      \"(\": [\"graphNode\", \"*graphNode\"],\r\n      \"[\": [\"graphNode\", \"*graphNode\"],\r\n      VAR1: [\"graphNode\", \"*graphNode\"],\r\n      VAR2: [\"graphNode\", \"*graphNode\"],\r\n      NIL: [\"graphNode\", \"*graphNode\"],\r\n      IRI_REF: [\"graphNode\", \"*graphNode\"],\r\n      TRUE: [\"graphNode\", \"*graphNode\"],\r\n      FALSE: [\"graphNode\", \"*graphNode\"],\r\n      BLANK_NODE_LABEL: [\"graphNode\", \"*graphNode\"],\r\n      ANON: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_LN: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_NS: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL2: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG2: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_NEGATIVE: [\"graphNode\", \"*graphNode\"]\r\n    },\r\n    \"+graphNodePath\": {\r\n      \"(\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      \"[\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      NIL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      IRI_REF: [\"graphNodePath\", \"*graphNodePath\"],\r\n      TRUE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      FALSE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      BLANK_NODE_LABEL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      ANON: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_LN: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_NS: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"]\r\n    },\r\n    \"+groupCondition\": {\r\n      \"(\": [\"groupCondition\", \"*groupCondition\"],\r\n      STR: [\"groupCondition\", \"*groupCondition\"],\r\n      LANG: [\"groupCondition\", \"*groupCondition\"],\r\n      LANGMATCHES: [\"groupCondition\", \"*groupCondition\"],\r\n      DATATYPE: [\"groupCondition\", \"*groupCondition\"],\r\n      BOUND: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI: [\"groupCondition\", \"*groupCondition\"],\r\n      URI: [\"groupCondition\", \"*groupCondition\"],\r\n      BNODE: [\"groupCondition\", \"*groupCondition\"],\r\n      RAND: [\"groupCondition\", \"*groupCondition\"],\r\n      ABS: [\"groupCondition\", \"*groupCondition\"],\r\n      CEIL: [\"groupCondition\", \"*groupCondition\"],\r\n      FLOOR: [\"groupCondition\", \"*groupCondition\"],\r\n      ROUND: [\"groupCondition\", \"*groupCondition\"],\r\n      CONCAT: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLEN: [\"groupCondition\", \"*groupCondition\"],\r\n      UCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      LCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      ENCODE_FOR_URI: [\"groupCondition\", \"*groupCondition\"],\r\n      CONTAINS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRSTARTS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRENDS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRBEFORE: [\"groupCondition\", \"*groupCondition\"],\r\n      STRAFTER: [\"groupCondition\", \"*groupCondition\"],\r\n      YEAR: [\"groupCondition\", \"*groupCondition\"],\r\n      MONTH: [\"groupCondition\", \"*groupCondition\"],\r\n      DAY: [\"groupCondition\", \"*groupCondition\"],\r\n      HOURS: [\"groupCondition\", \"*groupCondition\"],\r\n      MINUTES: [\"groupCondition\", \"*groupCondition\"],\r\n      SECONDS: [\"groupCondition\", \"*groupCondition\"],\r\n      TIMEZONE: [\"groupCondition\", \"*groupCondition\"],\r\n      TZ: [\"groupCondition\", \"*groupCondition\"],\r\n      NOW: [\"groupCondition\", \"*groupCondition\"],\r\n      UUID: [\"groupCondition\", \"*groupCondition\"],\r\n      STRUUID: [\"groupCondition\", \"*groupCondition\"],\r\n      MD5: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA1: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA256: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA384: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA512: [\"groupCondition\", \"*groupCondition\"],\r\n      COALESCE: [\"groupCondition\", \"*groupCondition\"],\r\n      IF: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLANG: [\"groupCondition\", \"*groupCondition\"],\r\n      STRDT: [\"groupCondition\", \"*groupCondition\"],\r\n      SAMETERM: [\"groupCondition\", \"*groupCondition\"],\r\n      ISIRI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISURI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISBLANK: [\"groupCondition\", \"*groupCondition\"],\r\n      ISLITERAL: [\"groupCondition\", \"*groupCondition\"],\r\n      ISNUMERIC: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR1: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR2: [\"groupCondition\", \"*groupCondition\"],\r\n      SUBSTR: [\"groupCondition\", \"*groupCondition\"],\r\n      REPLACE: [\"groupCondition\", \"*groupCondition\"],\r\n      REGEX: [\"groupCondition\", \"*groupCondition\"],\r\n      EXISTS: [\"groupCondition\", \"*groupCondition\"],\r\n      NOT: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI_REF: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_LN: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_NS: [\"groupCondition\", \"*groupCondition\"]\r\n    },\r\n    \"+havingCondition\": {\r\n      \"(\": [\"havingCondition\", \"*havingCondition\"],\r\n      STR: [\"havingCondition\", \"*havingCondition\"],\r\n      LANG: [\"havingCondition\", \"*havingCondition\"],\r\n      LANGMATCHES: [\"havingCondition\", \"*havingCondition\"],\r\n      DATATYPE: [\"havingCondition\", \"*havingCondition\"],\r\n      BOUND: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI: [\"havingCondition\", \"*havingCondition\"],\r\n      URI: [\"havingCondition\", \"*havingCondition\"],\r\n      BNODE: [\"havingCondition\", \"*havingCondition\"],\r\n      RAND: [\"havingCondition\", \"*havingCondition\"],\r\n      ABS: [\"havingCondition\", \"*havingCondition\"],\r\n      CEIL: [\"havingCondition\", \"*havingCondition\"],\r\n      FLOOR: [\"havingCondition\", \"*havingCondition\"],\r\n      ROUND: [\"havingCondition\", \"*havingCondition\"],\r\n      CONCAT: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLEN: [\"havingCondition\", \"*havingCondition\"],\r\n      UCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      LCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      ENCODE_FOR_URI: [\"havingCondition\", \"*havingCondition\"],\r\n      CONTAINS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRSTARTS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRENDS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRBEFORE: [\"havingCondition\", \"*havingCondition\"],\r\n      STRAFTER: [\"havingCondition\", \"*havingCondition\"],\r\n      YEAR: [\"havingCondition\", \"*havingCondition\"],\r\n      MONTH: [\"havingCondition\", \"*havingCondition\"],\r\n      DAY: [\"havingCondition\", \"*havingCondition\"],\r\n      HOURS: [\"havingCondition\", \"*havingCondition\"],\r\n      MINUTES: [\"havingCondition\", \"*havingCondition\"],\r\n      SECONDS: [\"havingCondition\", \"*havingCondition\"],\r\n      TIMEZONE: [\"havingCondition\", \"*havingCondition\"],\r\n      TZ: [\"havingCondition\", \"*havingCondition\"],\r\n      NOW: [\"havingCondition\", \"*havingCondition\"],\r\n      UUID: [\"havingCondition\", \"*havingCondition\"],\r\n      STRUUID: [\"havingCondition\", \"*havingCondition\"],\r\n      MD5: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA1: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA256: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA384: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA512: [\"havingCondition\", \"*havingCondition\"],\r\n      COALESCE: [\"havingCondition\", \"*havingCondition\"],\r\n      IF: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLANG: [\"havingCondition\", \"*havingCondition\"],\r\n      STRDT: [\"havingCondition\", \"*havingCondition\"],\r\n      SAMETERM: [\"havingCondition\", \"*havingCondition\"],\r\n      ISIRI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISURI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISBLANK: [\"havingCondition\", \"*havingCondition\"],\r\n      ISLITERAL: [\"havingCondition\", \"*havingCondition\"],\r\n      ISNUMERIC: [\"havingCondition\", \"*havingCondition\"],\r\n      SUBSTR: [\"havingCondition\", \"*havingCondition\"],\r\n      REPLACE: [\"havingCondition\", \"*havingCondition\"],\r\n      REGEX: [\"havingCondition\", \"*havingCondition\"],\r\n      EXISTS: [\"havingCondition\", \"*havingCondition\"],\r\n      NOT: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI_REF: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_LN: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_NS: [\"havingCondition\", \"*havingCondition\"]\r\n    },\r\n    \"+or([var,[ (,expression,AS,var,)]])\": {\r\n      \"(\": [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR1: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR2: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"]\r\n    },\r\n    \"+orderCondition\": {\r\n      ASC: [\"orderCondition\", \"*orderCondition\"],\r\n      DESC: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR1: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR2: [\"orderCondition\", \"*orderCondition\"],\r\n      \"(\": [\"orderCondition\", \"*orderCondition\"],\r\n      STR: [\"orderCondition\", \"*orderCondition\"],\r\n      LANG: [\"orderCondition\", \"*orderCondition\"],\r\n      LANGMATCHES: [\"orderCondition\", \"*orderCondition\"],\r\n      DATATYPE: [\"orderCondition\", \"*orderCondition\"],\r\n      BOUND: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI: [\"orderCondition\", \"*orderCondition\"],\r\n      URI: [\"orderCondition\", \"*orderCondition\"],\r\n      BNODE: [\"orderCondition\", \"*orderCondition\"],\r\n      RAND: [\"orderCondition\", \"*orderCondition\"],\r\n      ABS: [\"orderCondition\", \"*orderCondition\"],\r\n      CEIL: [\"orderCondition\", \"*orderCondition\"],\r\n      FLOOR: [\"orderCondition\", \"*orderCondition\"],\r\n      ROUND: [\"orderCondition\", \"*orderCondition\"],\r\n      CONCAT: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLEN: [\"orderCondition\", \"*orderCondition\"],\r\n      UCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      LCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      ENCODE_FOR_URI: [\"orderCondition\", \"*orderCondition\"],\r\n      CONTAINS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRSTARTS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRENDS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRBEFORE: [\"orderCondition\", \"*orderCondition\"],\r\n      STRAFTER: [\"orderCondition\", \"*orderCondition\"],\r\n      YEAR: [\"orderCondition\", \"*orderCondition\"],\r\n      MONTH: [\"orderCondition\", \"*orderCondition\"],\r\n      DAY: [\"orderCondition\", \"*orderCondition\"],\r\n      HOURS: [\"orderCondition\", \"*orderCondition\"],\r\n      MINUTES: [\"orderCondition\", \"*orderCondition\"],\r\n      SECONDS: [\"orderCondition\", \"*orderCondition\"],\r\n      TIMEZONE: [\"orderCondition\", \"*orderCondition\"],\r\n      TZ: [\"orderCondition\", \"*orderCondition\"],\r\n      NOW: [\"orderCondition\", \"*orderCondition\"],\r\n      UUID: [\"orderCondition\", \"*orderCondition\"],\r\n      STRUUID: [\"orderCondition\", \"*orderCondition\"],\r\n      MD5: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA1: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA256: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA384: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA512: [\"orderCondition\", \"*orderCondition\"],\r\n      COALESCE: [\"orderCondition\", \"*orderCondition\"],\r\n      IF: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLANG: [\"orderCondition\", \"*orderCondition\"],\r\n      STRDT: [\"orderCondition\", \"*orderCondition\"],\r\n      SAMETERM: [\"orderCondition\", \"*orderCondition\"],\r\n      ISIRI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISURI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISBLANK: [\"orderCondition\", \"*orderCondition\"],\r\n      ISLITERAL: [\"orderCondition\", \"*orderCondition\"],\r\n      ISNUMERIC: [\"orderCondition\", \"*orderCondition\"],\r\n      SUBSTR: [\"orderCondition\", \"*orderCondition\"],\r\n      REPLACE: [\"orderCondition\", \"*orderCondition\"],\r\n      REGEX: [\"orderCondition\", \"*orderCondition\"],\r\n      EXISTS: [\"orderCondition\", \"*orderCondition\"],\r\n      NOT: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI_REF: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_LN: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_NS: [\"orderCondition\", \"*orderCondition\"]\r\n    },\r\n    \"+varOrIRIref\": {\r\n      VAR1: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      VAR2: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      IRI_REF: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_LN: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_NS: [\"varOrIRIref\", \"*varOrIRIref\"]\r\n    },\r\n    \"?.\": {\r\n      \".\": [\".\"],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?DISTINCT\": {\r\n      DISTINCT: [\"DISTINCT\"],\r\n      \"!\": [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      \"(\": [],\r\n      STR: [],\r\n      LANG: [],\r\n      LANGMATCHES: [],\r\n      DATATYPE: [],\r\n      BOUND: [],\r\n      IRI: [],\r\n      URI: [],\r\n      BNODE: [],\r\n      RAND: [],\r\n      ABS: [],\r\n      CEIL: [],\r\n      FLOOR: [],\r\n      ROUND: [],\r\n      CONCAT: [],\r\n      STRLEN: [],\r\n      UCASE: [],\r\n      LCASE: [],\r\n      ENCODE_FOR_URI: [],\r\n      CONTAINS: [],\r\n      STRSTARTS: [],\r\n      STRENDS: [],\r\n      STRBEFORE: [],\r\n      STRAFTER: [],\r\n      YEAR: [],\r\n      MONTH: [],\r\n      DAY: [],\r\n      HOURS: [],\r\n      MINUTES: [],\r\n      SECONDS: [],\r\n      TIMEZONE: [],\r\n      TZ: [],\r\n      NOW: [],\r\n      UUID: [],\r\n      STRUUID: [],\r\n      MD5: [],\r\n      SHA1: [],\r\n      SHA256: [],\r\n      SHA384: [],\r\n      SHA512: [],\r\n      COALESCE: [],\r\n      IF: [],\r\n      STRLANG: [],\r\n      STRDT: [],\r\n      SAMETERM: [],\r\n      ISIRI: [],\r\n      ISURI: [],\r\n      ISBLANK: [],\r\n      ISLITERAL: [],\r\n      ISNUMERIC: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      COUNT: [],\r\n      SUM: [],\r\n      MIN: [],\r\n      MAX: [],\r\n      AVG: [],\r\n      SAMPLE: [],\r\n      GROUP_CONCAT: [],\r\n      SUBSTR: [],\r\n      REPLACE: [],\r\n      REGEX: [],\r\n      EXISTS: [],\r\n      NOT: [],\r\n      IRI_REF: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      \"*\": []\r\n    },\r\n    \"?GRAPH\": {\r\n      GRAPH: [\"GRAPH\"],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?SILENT\": {\r\n      SILENT: [\"SILENT\"],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?SILENT_1\": {\r\n      SILENT: [\"SILENT\"],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?SILENT_2\": {\r\n      SILENT: [\"SILENT\"],\r\n      GRAPH: [],\r\n      DEFAULT: [],\r\n      NAMED: [],\r\n      ALL: []\r\n    },\r\n    \"?SILENT_3\": {\r\n      SILENT: [\"SILENT\"],\r\n      GRAPH: []\r\n    },\r\n    \"?SILENT_4\": {\r\n      SILENT: [\"SILENT\"],\r\n      DEFAULT: [],\r\n      GRAPH: [],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?WHERE\": {\r\n      WHERE: [\"WHERE\"],\r\n      \"{\": []\r\n    },\r\n    \"?[,,expression]\": {\r\n      \",\": [\"[,,expression]\"],\r\n      \")\": []\r\n    },\r\n    \"?[.,?constructTriples]\": {\r\n      \".\": [\"[.,?constructTriples]\"],\r\n      \"}\": []\r\n    },\r\n    \"?[.,?triplesBlock]\": {\r\n      \".\": [\"[.,?triplesBlock]\"],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?[.,?triplesTemplate]\": {\r\n      \".\": [\"[.,?triplesTemplate]\"],\r\n      \"}\": [],\r\n      GRAPH: []\r\n    },\r\n    \"?[;,SEPARATOR,=,string]\": {\r\n      \";\": [\"[;,SEPARATOR,=,string]\"],\r\n      \")\": []\r\n    },\r\n    \"?[;,update]\": {\r\n      \";\": [\"[;,update]\"],\r\n      $: []\r\n    },\r\n    \"?[AS,var]\": {\r\n      AS: [\"[AS,var]\"],\r\n      \")\": []\r\n    },\r\n    \"?[INTO,graphRef]\": {\r\n      INTO: [\"[INTO,graphRef]\"],\r\n      \";\": [],\r\n      $: []\r\n    },\r\n    \"?[or([verbPath,verbSimple]),objectList]\": {\r\n      VAR1: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      VAR2: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \"^\": [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      a: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \"!\": [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \"(\": [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      IRI_REF: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      PNAME_LN: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      PNAME_NS: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \";\": [],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\": {\r\n      a: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      IRI_REF: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      PNAME_LN: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      PNAME_NS: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      \")\": []\r\n    },\r\n    \"?[update1,?[;,update]]\": {\r\n      INSERT: [\"[update1,?[;,update]]\"],\r\n      DELETE: [\"[update1,?[;,update]]\"],\r\n      LOAD: [\"[update1,?[;,update]]\"],\r\n      CLEAR: [\"[update1,?[;,update]]\"],\r\n      DROP: [\"[update1,?[;,update]]\"],\r\n      ADD: [\"[update1,?[;,update]]\"],\r\n      MOVE: [\"[update1,?[;,update]]\"],\r\n      COPY: [\"[update1,?[;,update]]\"],\r\n      CREATE: [\"[update1,?[;,update]]\"],\r\n      WITH: [\"[update1,?[;,update]]\"],\r\n      $: []\r\n    },\r\n    \"?[verb,objectList]\": {\r\n      a: [\"[verb,objectList]\"],\r\n      VAR1: [\"[verb,objectList]\"],\r\n      VAR2: [\"[verb,objectList]\"],\r\n      IRI_REF: [\"[verb,objectList]\"],\r\n      PNAME_LN: [\"[verb,objectList]\"],\r\n      PNAME_NS: [\"[verb,objectList]\"],\r\n      \";\": [],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"?argList\": {\r\n      NIL: [\"argList\"],\r\n      \"(\": [\"argList\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      \"*\": [],\r\n      \"/\": [],\r\n      \";\": []\r\n    },\r\n    \"?constructTriples\": {\r\n      VAR1: [\"constructTriples\"],\r\n      VAR2: [\"constructTriples\"],\r\n      NIL: [\"constructTriples\"],\r\n      \"(\": [\"constructTriples\"],\r\n      \"[\": [\"constructTriples\"],\r\n      IRI_REF: [\"constructTriples\"],\r\n      TRUE: [\"constructTriples\"],\r\n      FALSE: [\"constructTriples\"],\r\n      BLANK_NODE_LABEL: [\"constructTriples\"],\r\n      ANON: [\"constructTriples\"],\r\n      PNAME_LN: [\"constructTriples\"],\r\n      PNAME_NS: [\"constructTriples\"],\r\n      STRING_LITERAL1: [\"constructTriples\"],\r\n      STRING_LITERAL2: [\"constructTriples\"],\r\n      STRING_LITERAL_LONG1: [\"constructTriples\"],\r\n      STRING_LITERAL_LONG2: [\"constructTriples\"],\r\n      INTEGER: [\"constructTriples\"],\r\n      DECIMAL: [\"constructTriples\"],\r\n      DOUBLE: [\"constructTriples\"],\r\n      INTEGER_POSITIVE: [\"constructTriples\"],\r\n      DECIMAL_POSITIVE: [\"constructTriples\"],\r\n      DOUBLE_POSITIVE: [\"constructTriples\"],\r\n      INTEGER_NEGATIVE: [\"constructTriples\"],\r\n      DECIMAL_NEGATIVE: [\"constructTriples\"],\r\n      DOUBLE_NEGATIVE: [\"constructTriples\"],\r\n      \"}\": []\r\n    },\r\n    \"?groupClause\": {\r\n      GROUP: [\"groupClause\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?havingClause\": {\r\n      HAVING: [\"havingClause\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?insertClause\": {\r\n      INSERT: [\"insertClause\"],\r\n      WHERE: [],\r\n      USING: []\r\n    },\r\n    \"?limitClause\": {\r\n      LIMIT: [\"limitClause\"],\r\n      VALUES: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?limitOffsetClauses\": {\r\n      LIMIT: [\"limitOffsetClauses\"],\r\n      OFFSET: [\"limitOffsetClauses\"],\r\n      VALUES: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?offsetClause\": {\r\n      OFFSET: [\"offsetClause\"],\r\n      VALUES: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?or([DISTINCT,REDUCED])\": {\r\n      DISTINCT: [\"or([DISTINCT,REDUCED])\"],\r\n      REDUCED: [\"or([DISTINCT,REDUCED])\"],\r\n      \"*\": [],\r\n      \"(\": [],\r\n      VAR1: [],\r\n      VAR2: []\r\n    },\r\n    \"?or([LANGTAG,[^^,iriRef]])\": {\r\n      LANGTAG: [\"or([LANGTAG,[^^,iriRef]])\"],\r\n      \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"],\r\n      UNDEF: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      a: [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      \"^\": [],\r\n      \"!\": [],\r\n      \"(\": [],\r\n      \".\": [],\r\n      \";\": [],\r\n      \",\": [],\r\n      AS: [],\r\n      \")\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      \"*\": [],\r\n      \"/\": [],\r\n      \"}\": [],\r\n      \"[\": [],\r\n      NIL: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      \"]\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"?or([[*,unaryExpression],[/,unaryExpression]])\": {\r\n      \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \";\": []\r\n    },\r\n    \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\": {\r\n      \"=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"!=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"<\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \">\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"<=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \">=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IN: [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      NOT: [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \";\": []\r\n    },\r\n    \"?orderClause\": {\r\n      ORDER: [\"orderClause\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?pathMod\": {\r\n      \"*\": [\"pathMod\"],\r\n      \"?\": [\"pathMod\"],\r\n      \"+\": [\"pathMod\"],\r\n      \"{\": [\"pathMod\"],\r\n      \"|\": [],\r\n      \"/\": [],\r\n      \")\": [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    \"?triplesBlock\": {\r\n      VAR1: [\"triplesBlock\"],\r\n      VAR2: [\"triplesBlock\"],\r\n      NIL: [\"triplesBlock\"],\r\n      \"(\": [\"triplesBlock\"],\r\n      \"[\": [\"triplesBlock\"],\r\n      IRI_REF: [\"triplesBlock\"],\r\n      TRUE: [\"triplesBlock\"],\r\n      FALSE: [\"triplesBlock\"],\r\n      BLANK_NODE_LABEL: [\"triplesBlock\"],\r\n      ANON: [\"triplesBlock\"],\r\n      PNAME_LN: [\"triplesBlock\"],\r\n      PNAME_NS: [\"triplesBlock\"],\r\n      STRING_LITERAL1: [\"triplesBlock\"],\r\n      STRING_LITERAL2: [\"triplesBlock\"],\r\n      STRING_LITERAL_LONG1: [\"triplesBlock\"],\r\n      STRING_LITERAL_LONG2: [\"triplesBlock\"],\r\n      INTEGER: [\"triplesBlock\"],\r\n      DECIMAL: [\"triplesBlock\"],\r\n      DOUBLE: [\"triplesBlock\"],\r\n      INTEGER_POSITIVE: [\"triplesBlock\"],\r\n      DECIMAL_POSITIVE: [\"triplesBlock\"],\r\n      DOUBLE_POSITIVE: [\"triplesBlock\"],\r\n      INTEGER_NEGATIVE: [\"triplesBlock\"],\r\n      DECIMAL_NEGATIVE: [\"triplesBlock\"],\r\n      DOUBLE_NEGATIVE: [\"triplesBlock\"],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?triplesTemplate\": {\r\n      VAR1: [\"triplesTemplate\"],\r\n      VAR2: [\"triplesTemplate\"],\r\n      NIL: [\"triplesTemplate\"],\r\n      \"(\": [\"triplesTemplate\"],\r\n      \"[\": [\"triplesTemplate\"],\r\n      IRI_REF: [\"triplesTemplate\"],\r\n      TRUE: [\"triplesTemplate\"],\r\n      FALSE: [\"triplesTemplate\"],\r\n      BLANK_NODE_LABEL: [\"triplesTemplate\"],\r\n      ANON: [\"triplesTemplate\"],\r\n      PNAME_LN: [\"triplesTemplate\"],\r\n      PNAME_NS: [\"triplesTemplate\"],\r\n      STRING_LITERAL1: [\"triplesTemplate\"],\r\n      STRING_LITERAL2: [\"triplesTemplate\"],\r\n      STRING_LITERAL_LONG1: [\"triplesTemplate\"],\r\n      STRING_LITERAL_LONG2: [\"triplesTemplate\"],\r\n      INTEGER: [\"triplesTemplate\"],\r\n      DECIMAL: [\"triplesTemplate\"],\r\n      DOUBLE: [\"triplesTemplate\"],\r\n      INTEGER_POSITIVE: [\"triplesTemplate\"],\r\n      DECIMAL_POSITIVE: [\"triplesTemplate\"],\r\n      DOUBLE_POSITIVE: [\"triplesTemplate\"],\r\n      INTEGER_NEGATIVE: [\"triplesTemplate\"],\r\n      DECIMAL_NEGATIVE: [\"triplesTemplate\"],\r\n      DOUBLE_NEGATIVE: [\"triplesTemplate\"],\r\n      \"}\": [],\r\n      GRAPH: []\r\n    },\r\n    \"?whereClause\": {\r\n      WHERE: [\"whereClause\"],\r\n      \"{\": [\"whereClause\"],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      GROUP: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      VALUES: [],\r\n      $: []\r\n    },\r\n    \"[ (,*dataBlockValue,)]\": {\r\n      \"(\": [\"(\", \"*dataBlockValue\", \")\"]\r\n    },\r\n    \"[ (,*var,)]\": {\r\n      \"(\": [\"(\", \"*var\", \")\"]\r\n    },\r\n    \"[ (,expression,)]\": {\r\n      \"(\": [\"(\", \"expression\", \")\"]\r\n    },\r\n    \"[ (,expression,AS,var,)]\": {\r\n      \"(\": [\"(\", \"expression\", \"AS\", \"var\", \")\"]\r\n    },\r\n    \"[!=,numericExpression]\": {\r\n      \"!=\": [\"!=\", \"numericExpression\"]\r\n    },\r\n    \"[&&,valueLogical]\": {\r\n      \"&&\": [\"&&\", \"valueLogical\"]\r\n    },\r\n    \"[*,unaryExpression]\": {\r\n      \"*\": [\"*\", \"unaryExpression\"]\r\n    },\r\n    \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\": {\r\n      WHERE: [\"*datasetClause\", \"WHERE\", \"{\", \"?triplesTemplate\", \"}\", \"solutionModifier\"],\r\n      FROM: [\"*datasetClause\", \"WHERE\", \"{\", \"?triplesTemplate\", \"}\", \"solutionModifier\"]\r\n    },\r\n    \"[+,multiplicativeExpression]\": {\r\n      \"+\": [\"+\", \"multiplicativeExpression\"]\r\n    },\r\n    \"[,,expression]\": {\r\n      \",\": [\",\", \"expression\"]\r\n    },\r\n    \"[,,integer,}]\": {\r\n      \",\": [\",\", \"integer\", \"}\"]\r\n    },\r\n    \"[,,objectPath]\": {\r\n      \",\": [\",\", \"objectPath\"]\r\n    },\r\n    \"[,,object]\": {\r\n      \",\": [\",\", \"object\"]\r\n    },\r\n    \"[,,or([},[integer,}]])]\": {\r\n      \",\": [\",\", \"or([},[integer,}]])\"]\r\n    },\r\n    \"[-,multiplicativeExpression]\": {\r\n      \"-\": [\"-\", \"multiplicativeExpression\"]\r\n    },\r\n    \"[.,?constructTriples]\": {\r\n      \".\": [\".\", \"?constructTriples\"]\r\n    },\r\n    \"[.,?triplesBlock]\": {\r\n      \".\": [\".\", \"?triplesBlock\"]\r\n    },\r\n    \"[.,?triplesTemplate]\": {\r\n      \".\": [\".\", \"?triplesTemplate\"]\r\n    },\r\n    \"[/,pathEltOrInverse]\": {\r\n      \"/\": [\"/\", \"pathEltOrInverse\"]\r\n    },\r\n    \"[/,unaryExpression]\": {\r\n      \"/\": [\"/\", \"unaryExpression\"]\r\n    },\r\n    \"[;,?[or([verbPath,verbSimple]),objectList]]\": {\r\n      \";\": [\";\", \"?[or([verbPath,verbSimple]),objectList]\"]\r\n    },\r\n    \"[;,?[verb,objectList]]\": {\r\n      \";\": [\";\", \"?[verb,objectList]\"]\r\n    },\r\n    \"[;,SEPARATOR,=,string]\": {\r\n      \";\": [\";\", \"SEPARATOR\", \"=\", \"string\"]\r\n    },\r\n    \"[;,update]\": {\r\n      \";\": [\";\", \"update\"]\r\n    },\r\n    \"[<,numericExpression]\": {\r\n      \"<\": [\"<\", \"numericExpression\"]\r\n    },\r\n    \"[<=,numericExpression]\": {\r\n      \"<=\": [\"<=\", \"numericExpression\"]\r\n    },\r\n    \"[=,numericExpression]\": {\r\n      \"=\": [\"=\", \"numericExpression\"]\r\n    },\r\n    \"[>,numericExpression]\": {\r\n      \">\": [\">\", \"numericExpression\"]\r\n    },\r\n    \"[>=,numericExpression]\": {\r\n      \">=\": [\">=\", \"numericExpression\"]\r\n    },\r\n    \"[AS,var]\": {\r\n      AS: [\"AS\", \"var\"]\r\n    },\r\n    \"[IN,expressionList]\": {\r\n      IN: [\"IN\", \"expressionList\"]\r\n    },\r\n    \"[INTO,graphRef]\": {\r\n      INTO: [\"INTO\", \"graphRef\"]\r\n    },\r\n    \"[NAMED,iriRef]\": {\r\n      NAMED: [\"NAMED\", \"iriRef\"]\r\n    },\r\n    \"[NOT,IN,expressionList]\": {\r\n      NOT: [\"NOT\", \"IN\", \"expressionList\"]\r\n    },\r\n    \"[UNION,groupGraphPattern]\": {\r\n      UNION: [\"UNION\", \"groupGraphPattern\"]\r\n    },\r\n    \"[^^,iriRef]\": {\r\n      \"^^\": [\"^^\", \"iriRef\"]\r\n    },\r\n    \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\": {\r\n      \"{\": [\"constructTemplate\", \"*datasetClause\", \"whereClause\", \"solutionModifier\"]\r\n    },\r\n    \"[deleteClause,?insertClause]\": {\r\n      DELETE: [\"deleteClause\", \"?insertClause\"]\r\n    },\r\n    \"[graphPatternNotTriples,?.,?triplesBlock]\": {\r\n      \"{\": [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      OPTIONAL: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      MINUS: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      GRAPH: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      SERVICE: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      FILTER: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      BIND: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      VALUES: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"]\r\n    },\r\n    \"[integer,or([[,,or([},[integer,}]])],}])]\": {\r\n      INTEGER: [\"integer\", \"or([[,,or([},[integer,}]])],}])\"]\r\n    },\r\n    \"[integer,}]\": {\r\n      INTEGER: [\"integer\", \"}\"]\r\n    },\r\n    \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\": {\r\n      INTEGER_POSITIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ]\r\n    },\r\n    \"[or([verbPath,verbSimple]),objectList]\": {\r\n      VAR1: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      VAR2: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      \"^\": [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      a: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      \"!\": [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      \"(\": [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      IRI_REF: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      PNAME_LN: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      PNAME_NS: [\"or([verbPath,verbSimple])\", \"objectList\"]\r\n    },\r\n    \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\": {\r\n      a: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      \"^\": [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      IRI_REF: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      PNAME_LN: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      PNAME_NS: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"]\r\n    },\r\n    \"[quadsNotTriples,?.,?triplesTemplate]\": {\r\n      GRAPH: [\"quadsNotTriples\", \"?.\", \"?triplesTemplate\"]\r\n    },\r\n    \"[update1,?[;,update]]\": {\r\n      INSERT: [\"update1\", \"?[;,update]\"],\r\n      DELETE: [\"update1\", \"?[;,update]\"],\r\n      LOAD: [\"update1\", \"?[;,update]\"],\r\n      CLEAR: [\"update1\", \"?[;,update]\"],\r\n      DROP: [\"update1\", \"?[;,update]\"],\r\n      ADD: [\"update1\", \"?[;,update]\"],\r\n      MOVE: [\"update1\", \"?[;,update]\"],\r\n      COPY: [\"update1\", \"?[;,update]\"],\r\n      CREATE: [\"update1\", \"?[;,update]\"],\r\n      WITH: [\"update1\", \"?[;,update]\"]\r\n    },\r\n    \"[verb,objectList]\": {\r\n      a: [\"verb\", \"objectList\"],\r\n      VAR1: [\"verb\", \"objectList\"],\r\n      VAR2: [\"verb\", \"objectList\"],\r\n      IRI_REF: [\"verb\", \"objectList\"],\r\n      PNAME_LN: [\"verb\", \"objectList\"],\r\n      PNAME_NS: [\"verb\", \"objectList\"]\r\n    },\r\n    \"[|,pathOneInPropertySet]\": {\r\n      \"|\": [\"|\", \"pathOneInPropertySet\"]\r\n    },\r\n    \"[|,pathSequence]\": {\r\n      \"|\": [\"|\", \"pathSequence\"]\r\n    },\r\n    \"[||,conditionalAndExpression]\": {\r\n      \"||\": [\"||\", \"conditionalAndExpression\"]\r\n    },\r\n    add: {\r\n      ADD: [\"ADD\", \"?SILENT_4\", \"graphOrDefault\", \"TO\", \"graphOrDefault\"]\r\n    },\r\n    additiveExpression: {\r\n      \"!\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"+\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"-\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      VAR1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      VAR2: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"(\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      LANG: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      LANGMATCHES: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DATATYPE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      BOUND: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      IRI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      URI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      BNODE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      RAND: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ABS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      CEIL: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      FLOOR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ROUND: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      CONCAT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRLEN: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      UCASE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      LCASE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ENCODE_FOR_URI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      CONTAINS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRSTARTS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRENDS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRBEFORE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRAFTER: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      YEAR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MONTH: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DAY: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      HOURS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MINUTES: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SECONDS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      TIMEZONE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      TZ: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      NOW: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      UUID: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRUUID: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MD5: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA256: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA384: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA512: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      COALESCE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      IF: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRLANG: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRDT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SAMETERM: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISIRI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISURI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISBLANK: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISLITERAL: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISNUMERIC: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      TRUE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      FALSE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      COUNT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SUM: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MIN: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MAX: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      AVG: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SAMPLE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      GROUP_CONCAT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SUBSTR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      REPLACE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      REGEX: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      EXISTS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      NOT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      IRI_REF: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL2: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL_LONG1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL_LONG2: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_POSITIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      PNAME_LN: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      PNAME_NS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ]\r\n    },\r\n    aggregate: {\r\n      COUNT: [\"COUNT\", \"(\", \"?DISTINCT\", \"or([*,expression])\", \")\"],\r\n      SUM: [\"SUM\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      MIN: [\"MIN\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      MAX: [\"MAX\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      AVG: [\"AVG\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      SAMPLE: [\"SAMPLE\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      GROUP_CONCAT: [\"GROUP_CONCAT\", \"(\", \"?DISTINCT\", \"expression\", \"?[;,SEPARATOR,=,string]\", \")\"]\r\n    },\r\n    allowBnodes: {\r\n      \"}\": []\r\n    },\r\n    allowVars: {\r\n      \"}\": []\r\n    },\r\n    argList: {\r\n      NIL: [\"NIL\"],\r\n      \"(\": [\"(\", \"?DISTINCT\", \"expression\", \"*[,,expression]\", \")\"]\r\n    },\r\n    askQuery: {\r\n      ASK: [\"ASK\", \"*datasetClause\", \"whereClause\", \"solutionModifier\"]\r\n    },\r\n    baseDecl: {\r\n      BASE: [\"BASE\", \"IRI_REF\"]\r\n    },\r\n    bind: {\r\n      BIND: [\"BIND\", \"(\", \"expression\", \"AS\", \"var\", \")\"]\r\n    },\r\n    blankNode: {\r\n      BLANK_NODE_LABEL: [\"BLANK_NODE_LABEL\"],\r\n      ANON: [\"ANON\"]\r\n    },\r\n    blankNodePropertyList: {\r\n      \"[\": [\"[\", \"propertyListNotEmpty\", \"]\"]\r\n    },\r\n    blankNodePropertyListPath: {\r\n      \"[\": [\"[\", \"propertyListPathNotEmpty\", \"]\"]\r\n    },\r\n    booleanLiteral: {\r\n      TRUE: [\"TRUE\"],\r\n      FALSE: [\"FALSE\"]\r\n    },\r\n    brackettedExpression: {\r\n      \"(\": [\"(\", \"expression\", \")\"]\r\n    },\r\n    builtInCall: {\r\n      STR: [\"STR\", \"(\", \"expression\", \")\"],\r\n      LANG: [\"LANG\", \"(\", \"expression\", \")\"],\r\n      LANGMATCHES: [\"LANGMATCHES\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      DATATYPE: [\"DATATYPE\", \"(\", \"expression\", \")\"],\r\n      BOUND: [\"BOUND\", \"(\", \"var\", \")\"],\r\n      IRI: [\"IRI\", \"(\", \"expression\", \")\"],\r\n      URI: [\"URI\", \"(\", \"expression\", \")\"],\r\n      BNODE: [\"BNODE\", \"or([[ (,expression,)],NIL])\"],\r\n      RAND: [\"RAND\", \"NIL\"],\r\n      ABS: [\"ABS\", \"(\", \"expression\", \")\"],\r\n      CEIL: [\"CEIL\", \"(\", \"expression\", \")\"],\r\n      FLOOR: [\"FLOOR\", \"(\", \"expression\", \")\"],\r\n      ROUND: [\"ROUND\", \"(\", \"expression\", \")\"],\r\n      CONCAT: [\"CONCAT\", \"expressionList\"],\r\n      SUBSTR: [\"substringExpression\"],\r\n      STRLEN: [\"STRLEN\", \"(\", \"expression\", \")\"],\r\n      REPLACE: [\"strReplaceExpression\"],\r\n      UCASE: [\"UCASE\", \"(\", \"expression\", \")\"],\r\n      LCASE: [\"LCASE\", \"(\", \"expression\", \")\"],\r\n      ENCODE_FOR_URI: [\"ENCODE_FOR_URI\", \"(\", \"expression\", \")\"],\r\n      CONTAINS: [\"CONTAINS\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRSTARTS: [\"STRSTARTS\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRENDS: [\"STRENDS\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRBEFORE: [\"STRBEFORE\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRAFTER: [\"STRAFTER\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      YEAR: [\"YEAR\", \"(\", \"expression\", \")\"],\r\n      MONTH: [\"MONTH\", \"(\", \"expression\", \")\"],\r\n      DAY: [\"DAY\", \"(\", \"expression\", \")\"],\r\n      HOURS: [\"HOURS\", \"(\", \"expression\", \")\"],\r\n      MINUTES: [\"MINUTES\", \"(\", \"expression\", \")\"],\r\n      SECONDS: [\"SECONDS\", \"(\", \"expression\", \")\"],\r\n      TIMEZONE: [\"TIMEZONE\", \"(\", \"expression\", \")\"],\r\n      TZ: [\"TZ\", \"(\", \"expression\", \")\"],\r\n      NOW: [\"NOW\", \"NIL\"],\r\n      UUID: [\"UUID\", \"NIL\"],\r\n      STRUUID: [\"STRUUID\", \"NIL\"],\r\n      MD5: [\"MD5\", \"(\", \"expression\", \")\"],\r\n      SHA1: [\"SHA1\", \"(\", \"expression\", \")\"],\r\n      SHA256: [\"SHA256\", \"(\", \"expression\", \")\"],\r\n      SHA384: [\"SHA384\", \"(\", \"expression\", \")\"],\r\n      SHA512: [\"SHA512\", \"(\", \"expression\", \")\"],\r\n      COALESCE: [\"COALESCE\", \"expressionList\"],\r\n      IF: [\"IF\", \"(\", \"expression\", \",\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRLANG: [\"STRLANG\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRDT: [\"STRDT\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      SAMETERM: [\"SAMETERM\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      ISIRI: [\"ISIRI\", \"(\", \"expression\", \")\"],\r\n      ISURI: [\"ISURI\", \"(\", \"expression\", \")\"],\r\n      ISBLANK: [\"ISBLANK\", \"(\", \"expression\", \")\"],\r\n      ISLITERAL: [\"ISLITERAL\", \"(\", \"expression\", \")\"],\r\n      ISNUMERIC: [\"ISNUMERIC\", \"(\", \"expression\", \")\"],\r\n      REGEX: [\"regexExpression\"],\r\n      EXISTS: [\"existsFunc\"],\r\n      NOT: [\"notExistsFunc\"]\r\n    },\r\n    clear: {\r\n      CLEAR: [\"CLEAR\", \"?SILENT_2\", \"graphRefAll\"]\r\n    },\r\n    collection: {\r\n      \"(\": [\"(\", \"+graphNode\", \")\"]\r\n    },\r\n    collectionPath: {\r\n      \"(\": [\"(\", \"+graphNodePath\", \")\"]\r\n    },\r\n    conditionalAndExpression: {\r\n      \"!\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      \"+\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      \"-\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      VAR1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      VAR2: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      \"(\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      LANG: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      LANGMATCHES: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DATATYPE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      BOUND: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      IRI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      URI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      BNODE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      RAND: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ABS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      CEIL: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      FLOOR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ROUND: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      CONCAT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRLEN: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      UCASE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      LCASE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ENCODE_FOR_URI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      CONTAINS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRSTARTS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRENDS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRBEFORE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRAFTER: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      YEAR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MONTH: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DAY: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      HOURS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MINUTES: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SECONDS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      TIMEZONE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      TZ: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      NOW: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      UUID: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRUUID: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MD5: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA256: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA384: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA512: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      COALESCE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      IF: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRLANG: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRDT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SAMETERM: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISIRI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISURI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISBLANK: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISLITERAL: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISNUMERIC: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      TRUE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      FALSE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      COUNT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SUM: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MIN: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MAX: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      AVG: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SAMPLE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      GROUP_CONCAT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SUBSTR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      REPLACE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      REGEX: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      EXISTS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      NOT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      IRI_REF: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL2: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL_LONG1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL_LONG2: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      INTEGER: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DECIMAL: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DOUBLE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      INTEGER_POSITIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DECIMAL_POSITIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DOUBLE_POSITIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      INTEGER_NEGATIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DECIMAL_NEGATIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DOUBLE_NEGATIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      PNAME_LN: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      PNAME_NS: [\"valueLogical\", \"*[&&,valueLogical]\"]\r\n    },\r\n    conditionalOrExpression: {\r\n      \"!\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      \"+\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      \"-\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      VAR1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      VAR2: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      \"(\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      LANG: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      LANGMATCHES: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DATATYPE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      BOUND: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      IRI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      URI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      BNODE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      RAND: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ABS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      CEIL: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      FLOOR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ROUND: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      CONCAT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRLEN: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      UCASE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      LCASE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ENCODE_FOR_URI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      CONTAINS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRSTARTS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRENDS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRBEFORE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRAFTER: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      YEAR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MONTH: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DAY: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      HOURS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MINUTES: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SECONDS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      TIMEZONE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      TZ: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      NOW: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      UUID: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRUUID: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MD5: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA256: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA384: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA512: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      COALESCE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      IF: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRLANG: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRDT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SAMETERM: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISIRI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISURI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISBLANK: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISLITERAL: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISNUMERIC: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      TRUE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      FALSE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      COUNT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SUM: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MIN: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MAX: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      AVG: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SAMPLE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      GROUP_CONCAT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SUBSTR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      REPLACE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      REGEX: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      EXISTS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      NOT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      IRI_REF: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL2: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL_LONG1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL_LONG2: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      INTEGER: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DECIMAL: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DOUBLE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      INTEGER_POSITIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DECIMAL_POSITIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DOUBLE_POSITIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      INTEGER_NEGATIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DECIMAL_NEGATIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DOUBLE_NEGATIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      PNAME_LN: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      PNAME_NS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"]\r\n    },\r\n    constraint: {\r\n      \"(\": [\"brackettedExpression\"],\r\n      STR: [\"builtInCall\"],\r\n      LANG: [\"builtInCall\"],\r\n      LANGMATCHES: [\"builtInCall\"],\r\n      DATATYPE: [\"builtInCall\"],\r\n      BOUND: [\"builtInCall\"],\r\n      IRI: [\"builtInCall\"],\r\n      URI: [\"builtInCall\"],\r\n      BNODE: [\"builtInCall\"],\r\n      RAND: [\"builtInCall\"],\r\n      ABS: [\"builtInCall\"],\r\n      CEIL: [\"builtInCall\"],\r\n      FLOOR: [\"builtInCall\"],\r\n      ROUND: [\"builtInCall\"],\r\n      CONCAT: [\"builtInCall\"],\r\n      STRLEN: [\"builtInCall\"],\r\n      UCASE: [\"builtInCall\"],\r\n      LCASE: [\"builtInCall\"],\r\n      ENCODE_FOR_URI: [\"builtInCall\"],\r\n      CONTAINS: [\"builtInCall\"],\r\n      STRSTARTS: [\"builtInCall\"],\r\n      STRENDS: [\"builtInCall\"],\r\n      STRBEFORE: [\"builtInCall\"],\r\n      STRAFTER: [\"builtInCall\"],\r\n      YEAR: [\"builtInCall\"],\r\n      MONTH: [\"builtInCall\"],\r\n      DAY: [\"builtInCall\"],\r\n      HOURS: [\"builtInCall\"],\r\n      MINUTES: [\"builtInCall\"],\r\n      SECONDS: [\"builtInCall\"],\r\n      TIMEZONE: [\"builtInCall\"],\r\n      TZ: [\"builtInCall\"],\r\n      NOW: [\"builtInCall\"],\r\n      UUID: [\"builtInCall\"],\r\n      STRUUID: [\"builtInCall\"],\r\n      MD5: [\"builtInCall\"],\r\n      SHA1: [\"builtInCall\"],\r\n      SHA256: [\"builtInCall\"],\r\n      SHA384: [\"builtInCall\"],\r\n      SHA512: [\"builtInCall\"],\r\n      COALESCE: [\"builtInCall\"],\r\n      IF: [\"builtInCall\"],\r\n      STRLANG: [\"builtInCall\"],\r\n      STRDT: [\"builtInCall\"],\r\n      SAMETERM: [\"builtInCall\"],\r\n      ISIRI: [\"builtInCall\"],\r\n      ISURI: [\"builtInCall\"],\r\n      ISBLANK: [\"builtInCall\"],\r\n      ISLITERAL: [\"builtInCall\"],\r\n      ISNUMERIC: [\"builtInCall\"],\r\n      SUBSTR: [\"builtInCall\"],\r\n      REPLACE: [\"builtInCall\"],\r\n      REGEX: [\"builtInCall\"],\r\n      EXISTS: [\"builtInCall\"],\r\n      NOT: [\"builtInCall\"],\r\n      IRI_REF: [\"functionCall\"],\r\n      PNAME_LN: [\"functionCall\"],\r\n      PNAME_NS: [\"functionCall\"]\r\n    },\r\n    constructQuery: {\r\n      CONSTRUCT: [\r\n        \"CONSTRUCT\",\r\n        \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"\r\n      ]\r\n    },\r\n    constructTemplate: {\r\n      \"{\": [\"{\", \"?constructTriples\", \"}\"]\r\n    },\r\n    constructTriples: {\r\n      VAR1: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      VAR2: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      NIL: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      \"(\": [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      \"[\": [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      IRI_REF: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      TRUE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      FALSE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      BLANK_NODE_LABEL: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      ANON: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      PNAME_LN: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      PNAME_NS: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL1: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL2: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL_LONG1: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL_LONG2: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      INTEGER: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DECIMAL: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DOUBLE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      INTEGER_POSITIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DECIMAL_POSITIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DOUBLE_POSITIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      INTEGER_NEGATIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DECIMAL_NEGATIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DOUBLE_NEGATIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"]\r\n    },\r\n    copy: {\r\n      COPY: [\"COPY\", \"?SILENT_4\", \"graphOrDefault\", \"TO\", \"graphOrDefault\"]\r\n    },\r\n    create: {\r\n      CREATE: [\"CREATE\", \"?SILENT_3\", \"graphRef\"]\r\n    },\r\n    dataBlock: {\r\n      NIL: [\"or([inlineDataOneVar,inlineDataFull])\"],\r\n      \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"],\r\n      VAR1: [\"or([inlineDataOneVar,inlineDataFull])\"],\r\n      VAR2: [\"or([inlineDataOneVar,inlineDataFull])\"]\r\n    },\r\n    dataBlockValue: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      STRING_LITERAL1: [\"rdfLiteral\"],\r\n      STRING_LITERAL2: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG1: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG2: [\"rdfLiteral\"],\r\n      INTEGER: [\"numericLiteral\"],\r\n      DECIMAL: [\"numericLiteral\"],\r\n      DOUBLE: [\"numericLiteral\"],\r\n      INTEGER_POSITIVE: [\"numericLiteral\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteral\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteral\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteral\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteral\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteral\"],\r\n      TRUE: [\"booleanLiteral\"],\r\n      FALSE: [\"booleanLiteral\"],\r\n      UNDEF: [\"UNDEF\"]\r\n    },\r\n    datasetClause: {\r\n      FROM: [\"FROM\", \"or([defaultGraphClause,namedGraphClause])\"]\r\n    },\r\n    defaultGraphClause: {\r\n      IRI_REF: [\"sourceSelector\"],\r\n      PNAME_LN: [\"sourceSelector\"],\r\n      PNAME_NS: [\"sourceSelector\"]\r\n    },\r\n    delete1: {\r\n      DATA: [\"DATA\", \"quadDataNoBnodes\"],\r\n      WHERE: [\"WHERE\", \"quadPatternNoBnodes\"],\r\n      \"{\": [\"quadPatternNoBnodes\", \"?insertClause\", \"*usingClause\", \"WHERE\", \"groupGraphPattern\"]\r\n    },\r\n    deleteClause: {\r\n      DELETE: [\"DELETE\", \"quadPattern\"]\r\n    },\r\n    describeDatasetClause: {\r\n      FROM: [\"FROM\", \"or([defaultGraphClause,namedGraphClause])\"]\r\n    },\r\n    describeQuery: {\r\n      DESCRIBE: [\"DESCRIBE\", \"or([+varOrIRIref,*])\", \"*describeDatasetClause\", \"?whereClause\", \"solutionModifier\"]\r\n    },\r\n    disallowBnodes: {\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    disallowVars: {\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    drop: {\r\n      DROP: [\"DROP\", \"?SILENT_2\", \"graphRefAll\"]\r\n    },\r\n    existsFunc: {\r\n      EXISTS: [\"EXISTS\", \"groupGraphPattern\"]\r\n    },\r\n    expression: {\r\n      \"!\": [\"conditionalOrExpression\"],\r\n      \"+\": [\"conditionalOrExpression\"],\r\n      \"-\": [\"conditionalOrExpression\"],\r\n      VAR1: [\"conditionalOrExpression\"],\r\n      VAR2: [\"conditionalOrExpression\"],\r\n      \"(\": [\"conditionalOrExpression\"],\r\n      STR: [\"conditionalOrExpression\"],\r\n      LANG: [\"conditionalOrExpression\"],\r\n      LANGMATCHES: [\"conditionalOrExpression\"],\r\n      DATATYPE: [\"conditionalOrExpression\"],\r\n      BOUND: [\"conditionalOrExpression\"],\r\n      IRI: [\"conditionalOrExpression\"],\r\n      URI: [\"conditionalOrExpression\"],\r\n      BNODE: [\"conditionalOrExpression\"],\r\n      RAND: [\"conditionalOrExpression\"],\r\n      ABS: [\"conditionalOrExpression\"],\r\n      CEIL: [\"conditionalOrExpression\"],\r\n      FLOOR: [\"conditionalOrExpression\"],\r\n      ROUND: [\"conditionalOrExpression\"],\r\n      CONCAT: [\"conditionalOrExpression\"],\r\n      STRLEN: [\"conditionalOrExpression\"],\r\n      UCASE: [\"conditionalOrExpression\"],\r\n      LCASE: [\"conditionalOrExpression\"],\r\n      ENCODE_FOR_URI: [\"conditionalOrExpression\"],\r\n      CONTAINS: [\"conditionalOrExpression\"],\r\n      STRSTARTS: [\"conditionalOrExpression\"],\r\n      STRENDS: [\"conditionalOrExpression\"],\r\n      STRBEFORE: [\"conditionalOrExpression\"],\r\n      STRAFTER: [\"conditionalOrExpression\"],\r\n      YEAR: [\"conditionalOrExpression\"],\r\n      MONTH: [\"conditionalOrExpression\"],\r\n      DAY: [\"conditionalOrExpression\"],\r\n      HOURS: [\"conditionalOrExpression\"],\r\n      MINUTES: [\"conditionalOrExpression\"],\r\n      SECONDS: [\"conditionalOrExpression\"],\r\n      TIMEZONE: [\"conditionalOrExpression\"],\r\n      TZ: [\"conditionalOrExpression\"],\r\n      NOW: [\"conditionalOrExpression\"],\r\n      UUID: [\"conditionalOrExpression\"],\r\n      STRUUID: [\"conditionalOrExpression\"],\r\n      MD5: [\"conditionalOrExpression\"],\r\n      SHA1: [\"conditionalOrExpression\"],\r\n      SHA256: [\"conditionalOrExpression\"],\r\n      SHA384: [\"conditionalOrExpression\"],\r\n      SHA512: [\"conditionalOrExpression\"],\r\n      COALESCE: [\"conditionalOrExpression\"],\r\n      IF: [\"conditionalOrExpression\"],\r\n      STRLANG: [\"conditionalOrExpression\"],\r\n      STRDT: [\"conditionalOrExpression\"],\r\n      SAMETERM: [\"conditionalOrExpression\"],\r\n      ISIRI: [\"conditionalOrExpression\"],\r\n      ISURI: [\"conditionalOrExpression\"],\r\n      ISBLANK: [\"conditionalOrExpression\"],\r\n      ISLITERAL: [\"conditionalOrExpression\"],\r\n      ISNUMERIC: [\"conditionalOrExpression\"],\r\n      TRUE: [\"conditionalOrExpression\"],\r\n      FALSE: [\"conditionalOrExpression\"],\r\n      COUNT: [\"conditionalOrExpression\"],\r\n      SUM: [\"conditionalOrExpression\"],\r\n      MIN: [\"conditionalOrExpression\"],\r\n      MAX: [\"conditionalOrExpression\"],\r\n      AVG: [\"conditionalOrExpression\"],\r\n      SAMPLE: [\"conditionalOrExpression\"],\r\n      GROUP_CONCAT: [\"conditionalOrExpression\"],\r\n      SUBSTR: [\"conditionalOrExpression\"],\r\n      REPLACE: [\"conditionalOrExpression\"],\r\n      REGEX: [\"conditionalOrExpression\"],\r\n      EXISTS: [\"conditionalOrExpression\"],\r\n      NOT: [\"conditionalOrExpression\"],\r\n      IRI_REF: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL1: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL2: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL_LONG1: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL_LONG2: [\"conditionalOrExpression\"],\r\n      INTEGER: [\"conditionalOrExpression\"],\r\n      DECIMAL: [\"conditionalOrExpression\"],\r\n      DOUBLE: [\"conditionalOrExpression\"],\r\n      INTEGER_POSITIVE: [\"conditionalOrExpression\"],\r\n      DECIMAL_POSITIVE: [\"conditionalOrExpression\"],\r\n      DOUBLE_POSITIVE: [\"conditionalOrExpression\"],\r\n      INTEGER_NEGATIVE: [\"conditionalOrExpression\"],\r\n      DECIMAL_NEGATIVE: [\"conditionalOrExpression\"],\r\n      DOUBLE_NEGATIVE: [\"conditionalOrExpression\"],\r\n      PNAME_LN: [\"conditionalOrExpression\"],\r\n      PNAME_NS: [\"conditionalOrExpression\"]\r\n    },\r\n    expressionList: {\r\n      NIL: [\"NIL\"],\r\n      \"(\": [\"(\", \"expression\", \"*[,,expression]\", \")\"]\r\n    },\r\n    filter: {\r\n      FILTER: [\"FILTER\", \"constraint\"]\r\n    },\r\n    functionCall: {\r\n      IRI_REF: [\"iriRef\", \"argList\"],\r\n      PNAME_LN: [\"iriRef\", \"argList\"],\r\n      PNAME_NS: [\"iriRef\", \"argList\"]\r\n    },\r\n    graphGraphPattern: {\r\n      GRAPH: [\"GRAPH\", \"varOrIRIref\", \"groupGraphPattern\"]\r\n    },\r\n    graphNode: {\r\n      VAR1: [\"varOrTerm\"],\r\n      VAR2: [\"varOrTerm\"],\r\n      NIL: [\"varOrTerm\"],\r\n      IRI_REF: [\"varOrTerm\"],\r\n      TRUE: [\"varOrTerm\"],\r\n      FALSE: [\"varOrTerm\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\"],\r\n      ANON: [\"varOrTerm\"],\r\n      PNAME_LN: [\"varOrTerm\"],\r\n      PNAME_NS: [\"varOrTerm\"],\r\n      STRING_LITERAL1: [\"varOrTerm\"],\r\n      STRING_LITERAL2: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\"],\r\n      INTEGER: [\"varOrTerm\"],\r\n      DECIMAL: [\"varOrTerm\"],\r\n      DOUBLE: [\"varOrTerm\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\"],\r\n      \"(\": [\"triplesNode\"],\r\n      \"[\": [\"triplesNode\"]\r\n    },\r\n    graphNodePath: {\r\n      VAR1: [\"varOrTerm\"],\r\n      VAR2: [\"varOrTerm\"],\r\n      NIL: [\"varOrTerm\"],\r\n      IRI_REF: [\"varOrTerm\"],\r\n      TRUE: [\"varOrTerm\"],\r\n      FALSE: [\"varOrTerm\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\"],\r\n      ANON: [\"varOrTerm\"],\r\n      PNAME_LN: [\"varOrTerm\"],\r\n      PNAME_NS: [\"varOrTerm\"],\r\n      STRING_LITERAL1: [\"varOrTerm\"],\r\n      STRING_LITERAL2: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\"],\r\n      INTEGER: [\"varOrTerm\"],\r\n      DECIMAL: [\"varOrTerm\"],\r\n      DOUBLE: [\"varOrTerm\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\"],\r\n      \"(\": [\"triplesNodePath\"],\r\n      \"[\": [\"triplesNodePath\"]\r\n    },\r\n    graphOrDefault: {\r\n      DEFAULT: [\"DEFAULT\"],\r\n      IRI_REF: [\"?GRAPH\", \"iriRef\"],\r\n      PNAME_LN: [\"?GRAPH\", \"iriRef\"],\r\n      PNAME_NS: [\"?GRAPH\", \"iriRef\"],\r\n      GRAPH: [\"?GRAPH\", \"iriRef\"]\r\n    },\r\n    graphPatternNotTriples: {\r\n      \"{\": [\"groupOrUnionGraphPattern\"],\r\n      OPTIONAL: [\"optionalGraphPattern\"],\r\n      MINUS: [\"minusGraphPattern\"],\r\n      GRAPH: [\"graphGraphPattern\"],\r\n      SERVICE: [\"serviceGraphPattern\"],\r\n      FILTER: [\"filter\"],\r\n      BIND: [\"bind\"],\r\n      VALUES: [\"inlineData\"]\r\n    },\r\n    graphRef: {\r\n      GRAPH: [\"GRAPH\", \"iriRef\"]\r\n    },\r\n    graphRefAll: {\r\n      GRAPH: [\"graphRef\"],\r\n      DEFAULT: [\"DEFAULT\"],\r\n      NAMED: [\"NAMED\"],\r\n      ALL: [\"ALL\"]\r\n    },\r\n    graphTerm: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      STRING_LITERAL1: [\"rdfLiteral\"],\r\n      STRING_LITERAL2: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG1: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG2: [\"rdfLiteral\"],\r\n      INTEGER: [\"numericLiteral\"],\r\n      DECIMAL: [\"numericLiteral\"],\r\n      DOUBLE: [\"numericLiteral\"],\r\n      INTEGER_POSITIVE: [\"numericLiteral\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteral\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteral\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteral\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteral\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteral\"],\r\n      TRUE: [\"booleanLiteral\"],\r\n      FALSE: [\"booleanLiteral\"],\r\n      BLANK_NODE_LABEL: [\"blankNode\"],\r\n      ANON: [\"blankNode\"],\r\n      NIL: [\"NIL\"]\r\n    },\r\n    groupClause: {\r\n      GROUP: [\"GROUP\", \"BY\", \"+groupCondition\"]\r\n    },\r\n    groupCondition: {\r\n      STR: [\"builtInCall\"],\r\n      LANG: [\"builtInCall\"],\r\n      LANGMATCHES: [\"builtInCall\"],\r\n      DATATYPE: [\"builtInCall\"],\r\n      BOUND: [\"builtInCall\"],\r\n      IRI: [\"builtInCall\"],\r\n      URI: [\"builtInCall\"],\r\n      BNODE: [\"builtInCall\"],\r\n      RAND: [\"builtInCall\"],\r\n      ABS: [\"builtInCall\"],\r\n      CEIL: [\"builtInCall\"],\r\n      FLOOR: [\"builtInCall\"],\r\n      ROUND: [\"builtInCall\"],\r\n      CONCAT: [\"builtInCall\"],\r\n      STRLEN: [\"builtInCall\"],\r\n      UCASE: [\"builtInCall\"],\r\n      LCASE: [\"builtInCall\"],\r\n      ENCODE_FOR_URI: [\"builtInCall\"],\r\n      CONTAINS: [\"builtInCall\"],\r\n      STRSTARTS: [\"builtInCall\"],\r\n      STRENDS: [\"builtInCall\"],\r\n      STRBEFORE: [\"builtInCall\"],\r\n      STRAFTER: [\"builtInCall\"],\r\n      YEAR: [\"builtInCall\"],\r\n      MONTH: [\"builtInCall\"],\r\n      DAY: [\"builtInCall\"],\r\n      HOURS: [\"builtInCall\"],\r\n      MINUTES: [\"builtInCall\"],\r\n      SECONDS: [\"builtInCall\"],\r\n      TIMEZONE: [\"builtInCall\"],\r\n      TZ: [\"builtInCall\"],\r\n      NOW: [\"builtInCall\"],\r\n      UUID: [\"builtInCall\"],\r\n      STRUUID: [\"builtInCall\"],\r\n      MD5: [\"builtInCall\"],\r\n      SHA1: [\"builtInCall\"],\r\n      SHA256: [\"builtInCall\"],\r\n      SHA384: [\"builtInCall\"],\r\n      SHA512: [\"builtInCall\"],\r\n      COALESCE: [\"builtInCall\"],\r\n      IF: [\"builtInCall\"],\r\n      STRLANG: [\"builtInCall\"],\r\n      STRDT: [\"builtInCall\"],\r\n      SAMETERM: [\"builtInCall\"],\r\n      ISIRI: [\"builtInCall\"],\r\n      ISURI: [\"builtInCall\"],\r\n      ISBLANK: [\"builtInCall\"],\r\n      ISLITERAL: [\"builtInCall\"],\r\n      ISNUMERIC: [\"builtInCall\"],\r\n      SUBSTR: [\"builtInCall\"],\r\n      REPLACE: [\"builtInCall\"],\r\n      REGEX: [\"builtInCall\"],\r\n      EXISTS: [\"builtInCall\"],\r\n      NOT: [\"builtInCall\"],\r\n      IRI_REF: [\"functionCall\"],\r\n      PNAME_LN: [\"functionCall\"],\r\n      PNAME_NS: [\"functionCall\"],\r\n      \"(\": [\"(\", \"expression\", \"?[AS,var]\", \")\"],\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"]\r\n    },\r\n    groupGraphPattern: {\r\n      \"{\": [\"{\", \"or([subSelect,groupGraphPatternSub])\", \"}\"]\r\n    },\r\n    groupGraphPatternSub: {\r\n      \"{\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      OPTIONAL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      MINUS: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      GRAPH: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      SERVICE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      FILTER: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      BIND: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VALUES: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VAR1: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VAR2: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      NIL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"(\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"[\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      IRI_REF: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      TRUE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      FALSE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      BLANK_NODE_LABEL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      ANON: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      PNAME_LN: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      PNAME_NS: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL1: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL2: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG1: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG2: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      INTEGER: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DECIMAL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DOUBLE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      INTEGER_POSITIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DECIMAL_POSITIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DOUBLE_POSITIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      INTEGER_NEGATIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DECIMAL_NEGATIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DOUBLE_NEGATIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"}\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"]\r\n    },\r\n    groupOrUnionGraphPattern: {\r\n      \"{\": [\"groupGraphPattern\", \"*[UNION,groupGraphPattern]\"]\r\n    },\r\n    havingClause: {\r\n      HAVING: [\"HAVING\", \"+havingCondition\"]\r\n    },\r\n    havingCondition: {\r\n      \"(\": [\"constraint\"],\r\n      STR: [\"constraint\"],\r\n      LANG: [\"constraint\"],\r\n      LANGMATCHES: [\"constraint\"],\r\n      DATATYPE: [\"constraint\"],\r\n      BOUND: [\"constraint\"],\r\n      IRI: [\"constraint\"],\r\n      URI: [\"constraint\"],\r\n      BNODE: [\"constraint\"],\r\n      RAND: [\"constraint\"],\r\n      ABS: [\"constraint\"],\r\n      CEIL: [\"constraint\"],\r\n      FLOOR: [\"constraint\"],\r\n      ROUND: [\"constraint\"],\r\n      CONCAT: [\"constraint\"],\r\n      STRLEN: [\"constraint\"],\r\n      UCASE: [\"constraint\"],\r\n      LCASE: [\"constraint\"],\r\n      ENCODE_FOR_URI: [\"constraint\"],\r\n      CONTAINS: [\"constraint\"],\r\n      STRSTARTS: [\"constraint\"],\r\n      STRENDS: [\"constraint\"],\r\n      STRBEFORE: [\"constraint\"],\r\n      STRAFTER: [\"constraint\"],\r\n      YEAR: [\"constraint\"],\r\n      MONTH: [\"constraint\"],\r\n      DAY: [\"constraint\"],\r\n      HOURS: [\"constraint\"],\r\n      MINUTES: [\"constraint\"],\r\n      SECONDS: [\"constraint\"],\r\n      TIMEZONE: [\"constraint\"],\r\n      TZ: [\"constraint\"],\r\n      NOW: [\"constraint\"],\r\n      UUID: [\"constraint\"],\r\n      STRUUID: [\"constraint\"],\r\n      MD5: [\"constraint\"],\r\n      SHA1: [\"constraint\"],\r\n      SHA256: [\"constraint\"],\r\n      SHA384: [\"constraint\"],\r\n      SHA512: [\"constraint\"],\r\n      COALESCE: [\"constraint\"],\r\n      IF: [\"constraint\"],\r\n      STRLANG: [\"constraint\"],\r\n      STRDT: [\"constraint\"],\r\n      SAMETERM: [\"constraint\"],\r\n      ISIRI: [\"constraint\"],\r\n      ISURI: [\"constraint\"],\r\n      ISBLANK: [\"constraint\"],\r\n      ISLITERAL: [\"constraint\"],\r\n      ISNUMERIC: [\"constraint\"],\r\n      SUBSTR: [\"constraint\"],\r\n      REPLACE: [\"constraint\"],\r\n      REGEX: [\"constraint\"],\r\n      EXISTS: [\"constraint\"],\r\n      NOT: [\"constraint\"],\r\n      IRI_REF: [\"constraint\"],\r\n      PNAME_LN: [\"constraint\"],\r\n      PNAME_NS: [\"constraint\"]\r\n    },\r\n    inlineData: {\r\n      VALUES: [\"VALUES\", \"dataBlock\"]\r\n    },\r\n    inlineDataFull: {\r\n      NIL: [\"or([NIL,[ (,*var,)]])\", \"{\", \"*or([[ (,*dataBlockValue,)],NIL])\", \"}\"],\r\n      \"(\": [\"or([NIL,[ (,*var,)]])\", \"{\", \"*or([[ (,*dataBlockValue,)],NIL])\", \"}\"]\r\n    },\r\n    inlineDataOneVar: {\r\n      VAR1: [\"var\", \"{\", \"*dataBlockValue\", \"}\"],\r\n      VAR2: [\"var\", \"{\", \"*dataBlockValue\", \"}\"]\r\n    },\r\n    insert1: {\r\n      DATA: [\"DATA\", \"quadData\"],\r\n      \"{\": [\"quadPattern\", \"*usingClause\", \"WHERE\", \"groupGraphPattern\"]\r\n    },\r\n    insertClause: {\r\n      INSERT: [\"INSERT\", \"quadPattern\"]\r\n    },\r\n    integer: {\r\n      INTEGER: [\"INTEGER\"]\r\n    },\r\n    iriRef: {\r\n      IRI_REF: [\"IRI_REF\"],\r\n      PNAME_LN: [\"prefixedName\"],\r\n      PNAME_NS: [\"prefixedName\"]\r\n    },\r\n    iriRefOrFunction: {\r\n      IRI_REF: [\"iriRef\", \"?argList\"],\r\n      PNAME_LN: [\"iriRef\", \"?argList\"],\r\n      PNAME_NS: [\"iriRef\", \"?argList\"]\r\n    },\r\n    limitClause: {\r\n      LIMIT: [\"LIMIT\", \"INTEGER\"]\r\n    },\r\n    limitOffsetClauses: {\r\n      LIMIT: [\"limitClause\", \"?offsetClause\"],\r\n      OFFSET: [\"offsetClause\", \"?limitClause\"]\r\n    },\r\n    load: {\r\n      LOAD: [\"LOAD\", \"?SILENT_1\", \"iriRef\", \"?[INTO,graphRef]\"]\r\n    },\r\n    minusGraphPattern: {\r\n      MINUS: [\"MINUS\", \"groupGraphPattern\"]\r\n    },\r\n    modify: {\r\n      WITH: [\r\n        \"WITH\",\r\n        \"iriRef\",\r\n        \"or([[deleteClause,?insertClause],insertClause])\",\r\n        \"*usingClause\",\r\n        \"WHERE\",\r\n        \"groupGraphPattern\"\r\n      ]\r\n    },\r\n    move: {\r\n      MOVE: [\"MOVE\", \"?SILENT_4\", \"graphOrDefault\", \"TO\", \"graphOrDefault\"]\r\n    },\r\n    multiplicativeExpression: {\r\n      \"!\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"+\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"-\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      VAR1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      VAR2: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"(\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      LANG: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      LANGMATCHES: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DATATYPE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      BOUND: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      IRI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      URI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      BNODE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      RAND: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ABS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      CEIL: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      FLOOR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ROUND: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      CONCAT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRLEN: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      UCASE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      LCASE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ENCODE_FOR_URI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      CONTAINS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRSTARTS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRENDS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRBEFORE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRAFTER: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      YEAR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MONTH: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DAY: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      HOURS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MINUTES: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SECONDS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      TIMEZONE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      TZ: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      NOW: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      UUID: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRUUID: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MD5: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA256: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA384: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA512: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      COALESCE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      IF: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRLANG: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRDT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SAMETERM: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISIRI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISURI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISBLANK: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISLITERAL: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISNUMERIC: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      TRUE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      FALSE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      COUNT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SUM: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MIN: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MAX: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      AVG: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SAMPLE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      GROUP_CONCAT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SUBSTR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      REPLACE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      REGEX: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      EXISTS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      NOT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      IRI_REF: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL2: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL_LONG1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL_LONG2: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      INTEGER: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DECIMAL: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DOUBLE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      INTEGER_POSITIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DECIMAL_POSITIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DOUBLE_POSITIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      INTEGER_NEGATIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DECIMAL_NEGATIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DOUBLE_NEGATIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      PNAME_LN: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      PNAME_NS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"]\r\n    },\r\n    namedGraphClause: {\r\n      NAMED: [\"NAMED\", \"sourceSelector\"]\r\n    },\r\n    notExistsFunc: {\r\n      NOT: [\"NOT\", \"EXISTS\", \"groupGraphPattern\"]\r\n    },\r\n    numericExpression: {\r\n      \"!\": [\"additiveExpression\"],\r\n      \"+\": [\"additiveExpression\"],\r\n      \"-\": [\"additiveExpression\"],\r\n      VAR1: [\"additiveExpression\"],\r\n      VAR2: [\"additiveExpression\"],\r\n      \"(\": [\"additiveExpression\"],\r\n      STR: [\"additiveExpression\"],\r\n      LANG: [\"additiveExpression\"],\r\n      LANGMATCHES: [\"additiveExpression\"],\r\n      DATATYPE: [\"additiveExpression\"],\r\n      BOUND: [\"additiveExpression\"],\r\n      IRI: [\"additiveExpression\"],\r\n      URI: [\"additiveExpression\"],\r\n      BNODE: [\"additiveExpression\"],\r\n      RAND: [\"additiveExpression\"],\r\n      ABS: [\"additiveExpression\"],\r\n      CEIL: [\"additiveExpression\"],\r\n      FLOOR: [\"additiveExpression\"],\r\n      ROUND: [\"additiveExpression\"],\r\n      CONCAT: [\"additiveExpression\"],\r\n      STRLEN: [\"additiveExpression\"],\r\n      UCASE: [\"additiveExpression\"],\r\n      LCASE: [\"additiveExpression\"],\r\n      ENCODE_FOR_URI: [\"additiveExpression\"],\r\n      CONTAINS: [\"additiveExpression\"],\r\n      STRSTARTS: [\"additiveExpression\"],\r\n      STRENDS: [\"additiveExpression\"],\r\n      STRBEFORE: [\"additiveExpression\"],\r\n      STRAFTER: [\"additiveExpression\"],\r\n      YEAR: [\"additiveExpression\"],\r\n      MONTH: [\"additiveExpression\"],\r\n      DAY: [\"additiveExpression\"],\r\n      HOURS: [\"additiveExpression\"],\r\n      MINUTES: [\"additiveExpression\"],\r\n      SECONDS: [\"additiveExpression\"],\r\n      TIMEZONE: [\"additiveExpression\"],\r\n      TZ: [\"additiveExpression\"],\r\n      NOW: [\"additiveExpression\"],\r\n      UUID: [\"additiveExpression\"],\r\n      STRUUID: [\"additiveExpression\"],\r\n      MD5: [\"additiveExpression\"],\r\n      SHA1: [\"additiveExpression\"],\r\n      SHA256: [\"additiveExpression\"],\r\n      SHA384: [\"additiveExpression\"],\r\n      SHA512: [\"additiveExpression\"],\r\n      COALESCE: [\"additiveExpression\"],\r\n      IF: [\"additiveExpression\"],\r\n      STRLANG: [\"additiveExpression\"],\r\n      STRDT: [\"additiveExpression\"],\r\n      SAMETERM: [\"additiveExpression\"],\r\n      ISIRI: [\"additiveExpression\"],\r\n      ISURI: [\"additiveExpression\"],\r\n      ISBLANK: [\"additiveExpression\"],\r\n      ISLITERAL: [\"additiveExpression\"],\r\n      ISNUMERIC: [\"additiveExpression\"],\r\n      TRUE: [\"additiveExpression\"],\r\n      FALSE: [\"additiveExpression\"],\r\n      COUNT: [\"additiveExpression\"],\r\n      SUM: [\"additiveExpression\"],\r\n      MIN: [\"additiveExpression\"],\r\n      MAX: [\"additiveExpression\"],\r\n      AVG: [\"additiveExpression\"],\r\n      SAMPLE: [\"additiveExpression\"],\r\n      GROUP_CONCAT: [\"additiveExpression\"],\r\n      SUBSTR: [\"additiveExpression\"],\r\n      REPLACE: [\"additiveExpression\"],\r\n      REGEX: [\"additiveExpression\"],\r\n      EXISTS: [\"additiveExpression\"],\r\n      NOT: [\"additiveExpression\"],\r\n      IRI_REF: [\"additiveExpression\"],\r\n      STRING_LITERAL1: [\"additiveExpression\"],\r\n      STRING_LITERAL2: [\"additiveExpression\"],\r\n      STRING_LITERAL_LONG1: [\"additiveExpression\"],\r\n      STRING_LITERAL_LONG2: [\"additiveExpression\"],\r\n      INTEGER: [\"additiveExpression\"],\r\n      DECIMAL: [\"additiveExpression\"],\r\n      DOUBLE: [\"additiveExpression\"],\r\n      INTEGER_POSITIVE: [\"additiveExpression\"],\r\n      DECIMAL_POSITIVE: [\"additiveExpression\"],\r\n      DOUBLE_POSITIVE: [\"additiveExpression\"],\r\n      INTEGER_NEGATIVE: [\"additiveExpression\"],\r\n      DECIMAL_NEGATIVE: [\"additiveExpression\"],\r\n      DOUBLE_NEGATIVE: [\"additiveExpression\"],\r\n      PNAME_LN: [\"additiveExpression\"],\r\n      PNAME_NS: [\"additiveExpression\"]\r\n    },\r\n    numericLiteral: {\r\n      INTEGER: [\"numericLiteralUnsigned\"],\r\n      DECIMAL: [\"numericLiteralUnsigned\"],\r\n      DOUBLE: [\"numericLiteralUnsigned\"],\r\n      INTEGER_POSITIVE: [\"numericLiteralPositive\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteralPositive\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteralPositive\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteralNegative\"]\r\n    },\r\n    numericLiteralNegative: {\r\n      INTEGER_NEGATIVE: [\"INTEGER_NEGATIVE\"],\r\n      DECIMAL_NEGATIVE: [\"DECIMAL_NEGATIVE\"],\r\n      DOUBLE_NEGATIVE: [\"DOUBLE_NEGATIVE\"]\r\n    },\r\n    numericLiteralPositive: {\r\n      INTEGER_POSITIVE: [\"INTEGER_POSITIVE\"],\r\n      DECIMAL_POSITIVE: [\"DECIMAL_POSITIVE\"],\r\n      DOUBLE_POSITIVE: [\"DOUBLE_POSITIVE\"]\r\n    },\r\n    numericLiteralUnsigned: {\r\n      INTEGER: [\"INTEGER\"],\r\n      DECIMAL: [\"DECIMAL\"],\r\n      DOUBLE: [\"DOUBLE\"]\r\n    },\r\n    object: {\r\n      \"(\": [\"graphNode\"],\r\n      \"[\": [\"graphNode\"],\r\n      VAR1: [\"graphNode\"],\r\n      VAR2: [\"graphNode\"],\r\n      NIL: [\"graphNode\"],\r\n      IRI_REF: [\"graphNode\"],\r\n      TRUE: [\"graphNode\"],\r\n      FALSE: [\"graphNode\"],\r\n      BLANK_NODE_LABEL: [\"graphNode\"],\r\n      ANON: [\"graphNode\"],\r\n      PNAME_LN: [\"graphNode\"],\r\n      PNAME_NS: [\"graphNode\"],\r\n      STRING_LITERAL1: [\"graphNode\"],\r\n      STRING_LITERAL2: [\"graphNode\"],\r\n      STRING_LITERAL_LONG1: [\"graphNode\"],\r\n      STRING_LITERAL_LONG2: [\"graphNode\"],\r\n      INTEGER: [\"graphNode\"],\r\n      DECIMAL: [\"graphNode\"],\r\n      DOUBLE: [\"graphNode\"],\r\n      INTEGER_POSITIVE: [\"graphNode\"],\r\n      DECIMAL_POSITIVE: [\"graphNode\"],\r\n      DOUBLE_POSITIVE: [\"graphNode\"],\r\n      INTEGER_NEGATIVE: [\"graphNode\"],\r\n      DECIMAL_NEGATIVE: [\"graphNode\"],\r\n      DOUBLE_NEGATIVE: [\"graphNode\"]\r\n    },\r\n    objectList: {\r\n      \"(\": [\"object\", \"*[,,object]\"],\r\n      \"[\": [\"object\", \"*[,,object]\"],\r\n      VAR1: [\"object\", \"*[,,object]\"],\r\n      VAR2: [\"object\", \"*[,,object]\"],\r\n      NIL: [\"object\", \"*[,,object]\"],\r\n      IRI_REF: [\"object\", \"*[,,object]\"],\r\n      TRUE: [\"object\", \"*[,,object]\"],\r\n      FALSE: [\"object\", \"*[,,object]\"],\r\n      BLANK_NODE_LABEL: [\"object\", \"*[,,object]\"],\r\n      ANON: [\"object\", \"*[,,object]\"],\r\n      PNAME_LN: [\"object\", \"*[,,object]\"],\r\n      PNAME_NS: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL1: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL2: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL_LONG1: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL_LONG2: [\"object\", \"*[,,object]\"],\r\n      INTEGER: [\"object\", \"*[,,object]\"],\r\n      DECIMAL: [\"object\", \"*[,,object]\"],\r\n      DOUBLE: [\"object\", \"*[,,object]\"],\r\n      INTEGER_POSITIVE: [\"object\", \"*[,,object]\"],\r\n      DECIMAL_POSITIVE: [\"object\", \"*[,,object]\"],\r\n      DOUBLE_POSITIVE: [\"object\", \"*[,,object]\"],\r\n      INTEGER_NEGATIVE: [\"object\", \"*[,,object]\"],\r\n      DECIMAL_NEGATIVE: [\"object\", \"*[,,object]\"],\r\n      DOUBLE_NEGATIVE: [\"object\", \"*[,,object]\"]\r\n    },\r\n    objectListPath: {\r\n      \"(\": [\"objectPath\", \"*[,,objectPath]\"],\r\n      \"[\": [\"objectPath\", \"*[,,objectPath]\"],\r\n      VAR1: [\"objectPath\", \"*[,,objectPath]\"],\r\n      VAR2: [\"objectPath\", \"*[,,objectPath]\"],\r\n      NIL: [\"objectPath\", \"*[,,objectPath]\"],\r\n      IRI_REF: [\"objectPath\", \"*[,,objectPath]\"],\r\n      TRUE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      FALSE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      BLANK_NODE_LABEL: [\"objectPath\", \"*[,,objectPath]\"],\r\n      ANON: [\"objectPath\", \"*[,,objectPath]\"],\r\n      PNAME_LN: [\"objectPath\", \"*[,,objectPath]\"],\r\n      PNAME_NS: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL1: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL2: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL_LONG1: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL_LONG2: [\"objectPath\", \"*[,,objectPath]\"],\r\n      INTEGER: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DECIMAL: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DOUBLE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      INTEGER_POSITIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DECIMAL_POSITIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DOUBLE_POSITIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      INTEGER_NEGATIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DECIMAL_NEGATIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DOUBLE_NEGATIVE: [\"objectPath\", \"*[,,objectPath]\"]\r\n    },\r\n    objectPath: {\r\n      \"(\": [\"graphNodePath\"],\r\n      \"[\": [\"graphNodePath\"],\r\n      VAR1: [\"graphNodePath\"],\r\n      VAR2: [\"graphNodePath\"],\r\n      NIL: [\"graphNodePath\"],\r\n      IRI_REF: [\"graphNodePath\"],\r\n      TRUE: [\"graphNodePath\"],\r\n      FALSE: [\"graphNodePath\"],\r\n      BLANK_NODE_LABEL: [\"graphNodePath\"],\r\n      ANON: [\"graphNodePath\"],\r\n      PNAME_LN: [\"graphNodePath\"],\r\n      PNAME_NS: [\"graphNodePath\"],\r\n      STRING_LITERAL1: [\"graphNodePath\"],\r\n      STRING_LITERAL2: [\"graphNodePath\"],\r\n      STRING_LITERAL_LONG1: [\"graphNodePath\"],\r\n      STRING_LITERAL_LONG2: [\"graphNodePath\"],\r\n      INTEGER: [\"graphNodePath\"],\r\n      DECIMAL: [\"graphNodePath\"],\r\n      DOUBLE: [\"graphNodePath\"],\r\n      INTEGER_POSITIVE: [\"graphNodePath\"],\r\n      DECIMAL_POSITIVE: [\"graphNodePath\"],\r\n      DOUBLE_POSITIVE: [\"graphNodePath\"],\r\n      INTEGER_NEGATIVE: [\"graphNodePath\"],\r\n      DECIMAL_NEGATIVE: [\"graphNodePath\"],\r\n      DOUBLE_NEGATIVE: [\"graphNodePath\"]\r\n    },\r\n    offsetClause: {\r\n      OFFSET: [\"OFFSET\", \"INTEGER\"]\r\n    },\r\n    optionalGraphPattern: {\r\n      OPTIONAL: [\"OPTIONAL\", \"groupGraphPattern\"]\r\n    },\r\n    \"or([*,expression])\": {\r\n      \"*\": [\"*\"],\r\n      \"!\": [\"expression\"],\r\n      \"+\": [\"expression\"],\r\n      \"-\": [\"expression\"],\r\n      VAR1: [\"expression\"],\r\n      VAR2: [\"expression\"],\r\n      \"(\": [\"expression\"],\r\n      STR: [\"expression\"],\r\n      LANG: [\"expression\"],\r\n      LANGMATCHES: [\"expression\"],\r\n      DATATYPE: [\"expression\"],\r\n      BOUND: [\"expression\"],\r\n      IRI: [\"expression\"],\r\n      URI: [\"expression\"],\r\n      BNODE: [\"expression\"],\r\n      RAND: [\"expression\"],\r\n      ABS: [\"expression\"],\r\n      CEIL: [\"expression\"],\r\n      FLOOR: [\"expression\"],\r\n      ROUND: [\"expression\"],\r\n      CONCAT: [\"expression\"],\r\n      STRLEN: [\"expression\"],\r\n      UCASE: [\"expression\"],\r\n      LCASE: [\"expression\"],\r\n      ENCODE_FOR_URI: [\"expression\"],\r\n      CONTAINS: [\"expression\"],\r\n      STRSTARTS: [\"expression\"],\r\n      STRENDS: [\"expression\"],\r\n      STRBEFORE: [\"expression\"],\r\n      STRAFTER: [\"expression\"],\r\n      YEAR: [\"expression\"],\r\n      MONTH: [\"expression\"],\r\n      DAY: [\"expression\"],\r\n      HOURS: [\"expression\"],\r\n      MINUTES: [\"expression\"],\r\n      SECONDS: [\"expression\"],\r\n      TIMEZONE: [\"expression\"],\r\n      TZ: [\"expression\"],\r\n      NOW: [\"expression\"],\r\n      UUID: [\"expression\"],\r\n      STRUUID: [\"expression\"],\r\n      MD5: [\"expression\"],\r\n      SHA1: [\"expression\"],\r\n      SHA256: [\"expression\"],\r\n      SHA384: [\"expression\"],\r\n      SHA512: [\"expression\"],\r\n      COALESCE: [\"expression\"],\r\n      IF: [\"expression\"],\r\n      STRLANG: [\"expression\"],\r\n      STRDT: [\"expression\"],\r\n      SAMETERM: [\"expression\"],\r\n      ISIRI: [\"expression\"],\r\n      ISURI: [\"expression\"],\r\n      ISBLANK: [\"expression\"],\r\n      ISLITERAL: [\"expression\"],\r\n      ISNUMERIC: [\"expression\"],\r\n      TRUE: [\"expression\"],\r\n      FALSE: [\"expression\"],\r\n      COUNT: [\"expression\"],\r\n      SUM: [\"expression\"],\r\n      MIN: [\"expression\"],\r\n      MAX: [\"expression\"],\r\n      AVG: [\"expression\"],\r\n      SAMPLE: [\"expression\"],\r\n      GROUP_CONCAT: [\"expression\"],\r\n      SUBSTR: [\"expression\"],\r\n      REPLACE: [\"expression\"],\r\n      REGEX: [\"expression\"],\r\n      EXISTS: [\"expression\"],\r\n      NOT: [\"expression\"],\r\n      IRI_REF: [\"expression\"],\r\n      STRING_LITERAL1: [\"expression\"],\r\n      STRING_LITERAL2: [\"expression\"],\r\n      STRING_LITERAL_LONG1: [\"expression\"],\r\n      STRING_LITERAL_LONG2: [\"expression\"],\r\n      INTEGER: [\"expression\"],\r\n      DECIMAL: [\"expression\"],\r\n      DOUBLE: [\"expression\"],\r\n      INTEGER_POSITIVE: [\"expression\"],\r\n      DECIMAL_POSITIVE: [\"expression\"],\r\n      DOUBLE_POSITIVE: [\"expression\"],\r\n      INTEGER_NEGATIVE: [\"expression\"],\r\n      DECIMAL_NEGATIVE: [\"expression\"],\r\n      DOUBLE_NEGATIVE: [\"expression\"],\r\n      PNAME_LN: [\"expression\"],\r\n      PNAME_NS: [\"expression\"]\r\n    },\r\n    \"or([+or([var,[ (,expression,AS,var,)]]),*])\": {\r\n      \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR1: [\"+or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR2: [\"+or([var,[ (,expression,AS,var,)]])\"],\r\n      \"*\": [\"*\"]\r\n    },\r\n    \"or([+varOrIRIref,*])\": {\r\n      VAR1: [\"+varOrIRIref\"],\r\n      VAR2: [\"+varOrIRIref\"],\r\n      IRI_REF: [\"+varOrIRIref\"],\r\n      PNAME_LN: [\"+varOrIRIref\"],\r\n      PNAME_NS: [\"+varOrIRIref\"],\r\n      \"*\": [\"*\"]\r\n    },\r\n    \"or([ASC,DESC])\": {\r\n      ASC: [\"ASC\"],\r\n      DESC: [\"DESC\"]\r\n    },\r\n    \"or([DISTINCT,REDUCED])\": {\r\n      DISTINCT: [\"DISTINCT\"],\r\n      REDUCED: [\"REDUCED\"]\r\n    },\r\n    \"or([LANGTAG,[^^,iriRef]])\": {\r\n      LANGTAG: [\"LANGTAG\"],\r\n      \"^^\": [\"[^^,iriRef]\"]\r\n    },\r\n    \"or([NIL,[ (,*var,)]])\": {\r\n      NIL: [\"NIL\"],\r\n      \"(\": [\"[ (,*var,)]\"]\r\n    },\r\n    \"or([[ (,*dataBlockValue,)],NIL])\": {\r\n      \"(\": [\"[ (,*dataBlockValue,)]\"],\r\n      NIL: [\"NIL\"]\r\n    },\r\n    \"or([[ (,expression,)],NIL])\": {\r\n      \"(\": [\"[ (,expression,)]\"],\r\n      NIL: [\"NIL\"]\r\n    },\r\n    \"or([[*,unaryExpression],[/,unaryExpression]])\": {\r\n      \"*\": [\"[*,unaryExpression]\"],\r\n      \"/\": [\"[/,unaryExpression]\"]\r\n    },\r\n    \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\": {\r\n      \"+\": [\"[+,multiplicativeExpression]\"],\r\n      \"-\": [\"[-,multiplicativeExpression]\"],\r\n      INTEGER_POSITIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ]\r\n    },\r\n    \"or([[,,or([},[integer,}]])],}])\": {\r\n      \",\": [\"[,,or([},[integer,}]])]\"],\r\n      \"}\": [\"}\"]\r\n    },\r\n    \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\": {\r\n      \"=\": [\"[=,numericExpression]\"],\r\n      \"!=\": [\"[!=,numericExpression]\"],\r\n      \"<\": [\"[<,numericExpression]\"],\r\n      \">\": [\"[>,numericExpression]\"],\r\n      \"<=\": [\"[<=,numericExpression]\"],\r\n      \">=\": [\"[>=,numericExpression]\"],\r\n      IN: [\"[IN,expressionList]\"],\r\n      NOT: [\"[NOT,IN,expressionList]\"]\r\n    },\r\n    \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\": {\r\n      \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"],\r\n      WHERE: [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"],\r\n      FROM: [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]\r\n    },\r\n    \"or([[deleteClause,?insertClause],insertClause])\": {\r\n      DELETE: [\"[deleteClause,?insertClause]\"],\r\n      INSERT: [\"insertClause\"]\r\n    },\r\n    \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\": {\r\n      INTEGER: [\"[integer,or([[,,or([},[integer,}]])],}])]\"],\r\n      \",\": [\"[,,integer,}]\"]\r\n    },\r\n    \"or([baseDecl,prefixDecl])\": {\r\n      BASE: [\"baseDecl\"],\r\n      PREFIX: [\"prefixDecl\"]\r\n    },\r\n    \"or([defaultGraphClause,namedGraphClause])\": {\r\n      IRI_REF: [\"defaultGraphClause\"],\r\n      PNAME_LN: [\"defaultGraphClause\"],\r\n      PNAME_NS: [\"defaultGraphClause\"],\r\n      NAMED: [\"namedGraphClause\"]\r\n    },\r\n    \"or([inlineDataOneVar,inlineDataFull])\": {\r\n      VAR1: [\"inlineDataOneVar\"],\r\n      VAR2: [\"inlineDataOneVar\"],\r\n      NIL: [\"inlineDataFull\"],\r\n      \"(\": [\"inlineDataFull\"]\r\n    },\r\n    \"or([iriRef,[NAMED,iriRef]])\": {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      NAMED: [\"[NAMED,iriRef]\"]\r\n    },\r\n    \"or([iriRef,a])\": {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      a: [\"a\"]\r\n    },\r\n    \"or([numericLiteralPositive,numericLiteralNegative])\": {\r\n      INTEGER_POSITIVE: [\"numericLiteralPositive\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteralPositive\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteralPositive\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteralNegative\"]\r\n    },\r\n    \"or([queryAll,updateAll])\": {\r\n      CONSTRUCT: [\"queryAll\"],\r\n      DESCRIBE: [\"queryAll\"],\r\n      ASK: [\"queryAll\"],\r\n      SELECT: [\"queryAll\"],\r\n      INSERT: [\"updateAll\"],\r\n      DELETE: [\"updateAll\"],\r\n      LOAD: [\"updateAll\"],\r\n      CLEAR: [\"updateAll\"],\r\n      DROP: [\"updateAll\"],\r\n      ADD: [\"updateAll\"],\r\n      MOVE: [\"updateAll\"],\r\n      COPY: [\"updateAll\"],\r\n      CREATE: [\"updateAll\"],\r\n      WITH: [\"updateAll\"],\r\n      $: [\"updateAll\"]\r\n    },\r\n    \"or([selectQuery,constructQuery,describeQuery,askQuery])\": {\r\n      SELECT: [\"selectQuery\"],\r\n      CONSTRUCT: [\"constructQuery\"],\r\n      DESCRIBE: [\"describeQuery\"],\r\n      ASK: [\"askQuery\"]\r\n    },\r\n    \"or([subSelect,groupGraphPatternSub])\": {\r\n      SELECT: [\"subSelect\"],\r\n      \"{\": [\"groupGraphPatternSub\"],\r\n      OPTIONAL: [\"groupGraphPatternSub\"],\r\n      MINUS: [\"groupGraphPatternSub\"],\r\n      GRAPH: [\"groupGraphPatternSub\"],\r\n      SERVICE: [\"groupGraphPatternSub\"],\r\n      FILTER: [\"groupGraphPatternSub\"],\r\n      BIND: [\"groupGraphPatternSub\"],\r\n      VALUES: [\"groupGraphPatternSub\"],\r\n      VAR1: [\"groupGraphPatternSub\"],\r\n      VAR2: [\"groupGraphPatternSub\"],\r\n      NIL: [\"groupGraphPatternSub\"],\r\n      \"(\": [\"groupGraphPatternSub\"],\r\n      \"[\": [\"groupGraphPatternSub\"],\r\n      IRI_REF: [\"groupGraphPatternSub\"],\r\n      TRUE: [\"groupGraphPatternSub\"],\r\n      FALSE: [\"groupGraphPatternSub\"],\r\n      BLANK_NODE_LABEL: [\"groupGraphPatternSub\"],\r\n      ANON: [\"groupGraphPatternSub\"],\r\n      PNAME_LN: [\"groupGraphPatternSub\"],\r\n      PNAME_NS: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL1: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL2: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL_LONG1: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL_LONG2: [\"groupGraphPatternSub\"],\r\n      INTEGER: [\"groupGraphPatternSub\"],\r\n      DECIMAL: [\"groupGraphPatternSub\"],\r\n      DOUBLE: [\"groupGraphPatternSub\"],\r\n      INTEGER_POSITIVE: [\"groupGraphPatternSub\"],\r\n      DECIMAL_POSITIVE: [\"groupGraphPatternSub\"],\r\n      DOUBLE_POSITIVE: [\"groupGraphPatternSub\"],\r\n      INTEGER_NEGATIVE: [\"groupGraphPatternSub\"],\r\n      DECIMAL_NEGATIVE: [\"groupGraphPatternSub\"],\r\n      DOUBLE_NEGATIVE: [\"groupGraphPatternSub\"],\r\n      \"}\": [\"groupGraphPatternSub\"]\r\n    },\r\n    \"or([var,[ (,expression,AS,var,)]])\": {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      \"(\": [\"[ (,expression,AS,var,)]\"]\r\n    },\r\n    \"or([verbPath,verbSimple])\": {\r\n      \"^\": [\"verbPath\"],\r\n      a: [\"verbPath\"],\r\n      \"!\": [\"verbPath\"],\r\n      \"(\": [\"verbPath\"],\r\n      IRI_REF: [\"verbPath\"],\r\n      PNAME_LN: [\"verbPath\"],\r\n      PNAME_NS: [\"verbPath\"],\r\n      VAR1: [\"verbSimple\"],\r\n      VAR2: [\"verbSimple\"]\r\n    },\r\n    \"or([},[integer,}]])\": {\r\n      \"}\": [\"}\"],\r\n      INTEGER: [\"[integer,}]\"]\r\n    },\r\n    orderClause: {\r\n      ORDER: [\"ORDER\", \"BY\", \"+orderCondition\"]\r\n    },\r\n    orderCondition: {\r\n      ASC: [\"or([ASC,DESC])\", \"brackettedExpression\"],\r\n      DESC: [\"or([ASC,DESC])\", \"brackettedExpression\"],\r\n      \"(\": [\"constraint\"],\r\n      STR: [\"constraint\"],\r\n      LANG: [\"constraint\"],\r\n      LANGMATCHES: [\"constraint\"],\r\n      DATATYPE: [\"constraint\"],\r\n      BOUND: [\"constraint\"],\r\n      IRI: [\"constraint\"],\r\n      URI: [\"constraint\"],\r\n      BNODE: [\"constraint\"],\r\n      RAND: [\"constraint\"],\r\n      ABS: [\"constraint\"],\r\n      CEIL: [\"constraint\"],\r\n      FLOOR: [\"constraint\"],\r\n      ROUND: [\"constraint\"],\r\n      CONCAT: [\"constraint\"],\r\n      STRLEN: [\"constraint\"],\r\n      UCASE: [\"constraint\"],\r\n      LCASE: [\"constraint\"],\r\n      ENCODE_FOR_URI: [\"constraint\"],\r\n      CONTAINS: [\"constraint\"],\r\n      STRSTARTS: [\"constraint\"],\r\n      STRENDS: [\"constraint\"],\r\n      STRBEFORE: [\"constraint\"],\r\n      STRAFTER: [\"constraint\"],\r\n      YEAR: [\"constraint\"],\r\n      MONTH: [\"constraint\"],\r\n      DAY: [\"constraint\"],\r\n      HOURS: [\"constraint\"],\r\n      MINUTES: [\"constraint\"],\r\n      SECONDS: [\"constraint\"],\r\n      TIMEZONE: [\"constraint\"],\r\n      TZ: [\"constraint\"],\r\n      NOW: [\"constraint\"],\r\n      UUID: [\"constraint\"],\r\n      STRUUID: [\"constraint\"],\r\n      MD5: [\"constraint\"],\r\n      SHA1: [\"constraint\"],\r\n      SHA256: [\"constraint\"],\r\n      SHA384: [\"constraint\"],\r\n      SHA512: [\"constraint\"],\r\n      COALESCE: [\"constraint\"],\r\n      IF: [\"constraint\"],\r\n      STRLANG: [\"constraint\"],\r\n      STRDT: [\"constraint\"],\r\n      SAMETERM: [\"constraint\"],\r\n      ISIRI: [\"constraint\"],\r\n      ISURI: [\"constraint\"],\r\n      ISBLANK: [\"constraint\"],\r\n      ISLITERAL: [\"constraint\"],\r\n      ISNUMERIC: [\"constraint\"],\r\n      SUBSTR: [\"constraint\"],\r\n      REPLACE: [\"constraint\"],\r\n      REGEX: [\"constraint\"],\r\n      EXISTS: [\"constraint\"],\r\n      NOT: [\"constraint\"],\r\n      IRI_REF: [\"constraint\"],\r\n      PNAME_LN: [\"constraint\"],\r\n      PNAME_NS: [\"constraint\"],\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"]\r\n    },\r\n    path: {\r\n      \"^\": [\"pathAlternative\"],\r\n      a: [\"pathAlternative\"],\r\n      \"!\": [\"pathAlternative\"],\r\n      \"(\": [\"pathAlternative\"],\r\n      IRI_REF: [\"pathAlternative\"],\r\n      PNAME_LN: [\"pathAlternative\"],\r\n      PNAME_NS: [\"pathAlternative\"]\r\n    },\r\n    pathAlternative: {\r\n      \"^\": [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      a: [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      \"!\": [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      \"(\": [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      IRI_REF: [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      PNAME_LN: [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      PNAME_NS: [\"pathSequence\", \"*[|,pathSequence]\"]\r\n    },\r\n    pathElt: {\r\n      a: [\"pathPrimary\", \"?pathMod\"],\r\n      \"!\": [\"pathPrimary\", \"?pathMod\"],\r\n      \"(\": [\"pathPrimary\", \"?pathMod\"],\r\n      IRI_REF: [\"pathPrimary\", \"?pathMod\"],\r\n      PNAME_LN: [\"pathPrimary\", \"?pathMod\"],\r\n      PNAME_NS: [\"pathPrimary\", \"?pathMod\"]\r\n    },\r\n    pathEltOrInverse: {\r\n      a: [\"pathElt\"],\r\n      \"!\": [\"pathElt\"],\r\n      \"(\": [\"pathElt\"],\r\n      IRI_REF: [\"pathElt\"],\r\n      PNAME_LN: [\"pathElt\"],\r\n      PNAME_NS: [\"pathElt\"],\r\n      \"^\": [\"^\", \"pathElt\"]\r\n    },\r\n    pathMod: {\r\n      \"*\": [\"*\"],\r\n      \"?\": [\"?\"],\r\n      \"+\": [\"+\"],\r\n      \"{\": [\"{\", \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]\r\n    },\r\n    pathNegatedPropertySet: {\r\n      a: [\"pathOneInPropertySet\"],\r\n      \"^\": [\"pathOneInPropertySet\"],\r\n      IRI_REF: [\"pathOneInPropertySet\"],\r\n      PNAME_LN: [\"pathOneInPropertySet\"],\r\n      PNAME_NS: [\"pathOneInPropertySet\"],\r\n      \"(\": [\"(\", \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\", \")\"]\r\n    },\r\n    pathOneInPropertySet: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      a: [\"a\"],\r\n      \"^\": [\"^\", \"or([iriRef,a])\"]\r\n    },\r\n    pathPrimary: {\r\n      IRI_REF: [\"storeProperty\", \"iriRef\"],\r\n      PNAME_LN: [\"storeProperty\", \"iriRef\"],\r\n      PNAME_NS: [\"storeProperty\", \"iriRef\"],\r\n      a: [\"storeProperty\", \"a\"],\r\n      \"!\": [\"!\", \"pathNegatedPropertySet\"],\r\n      \"(\": [\"(\", \"path\", \")\"]\r\n    },\r\n    pathSequence: {\r\n      \"^\": [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      a: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      \"!\": [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      \"(\": [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      IRI_REF: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      PNAME_LN: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      PNAME_NS: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"]\r\n    },\r\n    prefixDecl: {\r\n      PREFIX: [\"PREFIX\", \"PNAME_NS\", \"IRI_REF\"]\r\n    },\r\n    prefixedName: {\r\n      PNAME_LN: [\"PNAME_LN\"],\r\n      PNAME_NS: [\"PNAME_NS\"]\r\n    },\r\n    primaryExpression: {\r\n      \"(\": [\"brackettedExpression\"],\r\n      STR: [\"builtInCall\"],\r\n      LANG: [\"builtInCall\"],\r\n      LANGMATCHES: [\"builtInCall\"],\r\n      DATATYPE: [\"builtInCall\"],\r\n      BOUND: [\"builtInCall\"],\r\n      IRI: [\"builtInCall\"],\r\n      URI: [\"builtInCall\"],\r\n      BNODE: [\"builtInCall\"],\r\n      RAND: [\"builtInCall\"],\r\n      ABS: [\"builtInCall\"],\r\n      CEIL: [\"builtInCall\"],\r\n      FLOOR: [\"builtInCall\"],\r\n      ROUND: [\"builtInCall\"],\r\n      CONCAT: [\"builtInCall\"],\r\n      STRLEN: [\"builtInCall\"],\r\n      UCASE: [\"builtInCall\"],\r\n      LCASE: [\"builtInCall\"],\r\n      ENCODE_FOR_URI: [\"builtInCall\"],\r\n      CONTAINS: [\"builtInCall\"],\r\n      STRSTARTS: [\"builtInCall\"],\r\n      STRENDS: [\"builtInCall\"],\r\n      STRBEFORE: [\"builtInCall\"],\r\n      STRAFTER: [\"builtInCall\"],\r\n      YEAR: [\"builtInCall\"],\r\n      MONTH: [\"builtInCall\"],\r\n      DAY: [\"builtInCall\"],\r\n      HOURS: [\"builtInCall\"],\r\n      MINUTES: [\"builtInCall\"],\r\n      SECONDS: [\"builtInCall\"],\r\n      TIMEZONE: [\"builtInCall\"],\r\n      TZ: [\"builtInCall\"],\r\n      NOW: [\"builtInCall\"],\r\n      UUID: [\"builtInCall\"],\r\n      STRUUID: [\"builtInCall\"],\r\n      MD5: [\"builtInCall\"],\r\n      SHA1: [\"builtInCall\"],\r\n      SHA256: [\"builtInCall\"],\r\n      SHA384: [\"builtInCall\"],\r\n      SHA512: [\"builtInCall\"],\r\n      COALESCE: [\"builtInCall\"],\r\n      IF: [\"builtInCall\"],\r\n      STRLANG: [\"builtInCall\"],\r\n      STRDT: [\"builtInCall\"],\r\n      SAMETERM: [\"builtInCall\"],\r\n      ISIRI: [\"builtInCall\"],\r\n      ISURI: [\"builtInCall\"],\r\n      ISBLANK: [\"builtInCall\"],\r\n      ISLITERAL: [\"builtInCall\"],\r\n      ISNUMERIC: [\"builtInCall\"],\r\n      SUBSTR: [\"builtInCall\"],\r\n      REPLACE: [\"builtInCall\"],\r\n      REGEX: [\"builtInCall\"],\r\n      EXISTS: [\"builtInCall\"],\r\n      NOT: [\"builtInCall\"],\r\n      IRI_REF: [\"iriRefOrFunction\"],\r\n      PNAME_LN: [\"iriRefOrFunction\"],\r\n      PNAME_NS: [\"iriRefOrFunction\"],\r\n      STRING_LITERAL1: [\"rdfLiteral\"],\r\n      STRING_LITERAL2: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG1: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG2: [\"rdfLiteral\"],\r\n      INTEGER: [\"numericLiteral\"],\r\n      DECIMAL: [\"numericLiteral\"],\r\n      DOUBLE: [\"numericLiteral\"],\r\n      INTEGER_POSITIVE: [\"numericLiteral\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteral\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteral\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteral\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteral\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteral\"],\r\n      TRUE: [\"booleanLiteral\"],\r\n      FALSE: [\"booleanLiteral\"],\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      COUNT: [\"aggregate\"],\r\n      SUM: [\"aggregate\"],\r\n      MIN: [\"aggregate\"],\r\n      MAX: [\"aggregate\"],\r\n      AVG: [\"aggregate\"],\r\n      SAMPLE: [\"aggregate\"],\r\n      GROUP_CONCAT: [\"aggregate\"]\r\n    },\r\n    prologue: {\r\n      BASE: [\"*or([baseDecl,prefixDecl])\"],\r\n      PREFIX: [\"*or([baseDecl,prefixDecl])\"],\r\n      $: [\"*or([baseDecl,prefixDecl])\"],\r\n      CONSTRUCT: [\"*or([baseDecl,prefixDecl])\"],\r\n      DESCRIBE: [\"*or([baseDecl,prefixDecl])\"],\r\n      ASK: [\"*or([baseDecl,prefixDecl])\"],\r\n      INSERT: [\"*or([baseDecl,prefixDecl])\"],\r\n      DELETE: [\"*or([baseDecl,prefixDecl])\"],\r\n      SELECT: [\"*or([baseDecl,prefixDecl])\"],\r\n      LOAD: [\"*or([baseDecl,prefixDecl])\"],\r\n      CLEAR: [\"*or([baseDecl,prefixDecl])\"],\r\n      DROP: [\"*or([baseDecl,prefixDecl])\"],\r\n      ADD: [\"*or([baseDecl,prefixDecl])\"],\r\n      MOVE: [\"*or([baseDecl,prefixDecl])\"],\r\n      COPY: [\"*or([baseDecl,prefixDecl])\"],\r\n      CREATE: [\"*or([baseDecl,prefixDecl])\"],\r\n      WITH: [\"*or([baseDecl,prefixDecl])\"]\r\n    },\r\n    propertyList: {\r\n      a: [\"propertyListNotEmpty\"],\r\n      VAR1: [\"propertyListNotEmpty\"],\r\n      VAR2: [\"propertyListNotEmpty\"],\r\n      IRI_REF: [\"propertyListNotEmpty\"],\r\n      PNAME_LN: [\"propertyListNotEmpty\"],\r\n      PNAME_NS: [\"propertyListNotEmpty\"],\r\n      \".\": [],\r\n      \"}\": [],\r\n      GRAPH: []\r\n    },\r\n    propertyListNotEmpty: {\r\n      a: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      VAR1: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      VAR2: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      IRI_REF: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      PNAME_LN: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      PNAME_NS: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"]\r\n    },\r\n    propertyListPath: {\r\n      a: [\"propertyListNotEmpty\"],\r\n      VAR1: [\"propertyListNotEmpty\"],\r\n      VAR2: [\"propertyListNotEmpty\"],\r\n      IRI_REF: [\"propertyListNotEmpty\"],\r\n      PNAME_LN: [\"propertyListNotEmpty\"],\r\n      PNAME_NS: [\"propertyListNotEmpty\"],\r\n      \".\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    propertyListPathNotEmpty: {\r\n      VAR1: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      VAR2: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \"^\": [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      a: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \"!\": [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \"(\": [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      IRI_REF: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      PNAME_LN: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      PNAME_NS: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"]\r\n    },\r\n    quadData: {\r\n      \"{\": [\"{\", \"disallowVars\", \"quads\", \"allowVars\", \"}\"]\r\n    },\r\n    quadDataNoBnodes: {\r\n      \"{\": [\"{\", \"disallowBnodes\", \"disallowVars\", \"quads\", \"allowVars\", \"allowBnodes\", \"}\"]\r\n    },\r\n    quadPattern: {\r\n      \"{\": [\"{\", \"quads\", \"}\"]\r\n    },\r\n    quadPatternNoBnodes: {\r\n      \"{\": [\"{\", \"disallowBnodes\", \"quads\", \"allowBnodes\", \"}\"]\r\n    },\r\n    quads: {\r\n      GRAPH: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      VAR1: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      VAR2: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      NIL: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"(\": [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"[\": [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      IRI_REF: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      TRUE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      FALSE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      BLANK_NODE_LABEL: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      ANON: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      PNAME_LN: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      PNAME_NS: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL1: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL2: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG1: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG2: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      INTEGER: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DECIMAL: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DOUBLE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      INTEGER_POSITIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DECIMAL_POSITIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DOUBLE_POSITIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      INTEGER_NEGATIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DECIMAL_NEGATIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DOUBLE_NEGATIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"}\": [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"]\r\n    },\r\n    quadsNotTriples: {\r\n      GRAPH: [\"GRAPH\", \"varOrIRIref\", \"{\", \"?triplesTemplate\", \"}\"]\r\n    },\r\n    queryAll: {\r\n      CONSTRUCT: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"],\r\n      DESCRIBE: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"],\r\n      ASK: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"],\r\n      SELECT: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"]\r\n    },\r\n    rdfLiteral: {\r\n      STRING_LITERAL1: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"],\r\n      STRING_LITERAL2: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"],\r\n      STRING_LITERAL_LONG1: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"],\r\n      STRING_LITERAL_LONG2: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"]\r\n    },\r\n    regexExpression: {\r\n      REGEX: [\"REGEX\", \"(\", \"expression\", \",\", \"expression\", \"?[,,expression]\", \")\"]\r\n    },\r\n    relationalExpression: {\r\n      \"!\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"+\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"-\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      VAR1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      VAR2: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"(\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      LANG: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      LANGMATCHES: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DATATYPE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      BOUND: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IRI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      URI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      BNODE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      RAND: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ABS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      CEIL: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      FLOOR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ROUND: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      CONCAT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRLEN: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      UCASE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      LCASE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ENCODE_FOR_URI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      CONTAINS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRSTARTS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRENDS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRBEFORE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRAFTER: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      YEAR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MONTH: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DAY: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      HOURS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MINUTES: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SECONDS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      TIMEZONE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      TZ: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      NOW: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      UUID: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRUUID: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MD5: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA256: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA384: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA512: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      COALESCE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IF: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRLANG: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRDT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SAMETERM: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISIRI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISURI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISBLANK: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISLITERAL: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISNUMERIC: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      TRUE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      FALSE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      COUNT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SUM: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MIN: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MAX: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      AVG: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SAMPLE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      GROUP_CONCAT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SUBSTR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      REPLACE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      REGEX: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      EXISTS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      NOT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IRI_REF: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL2: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL_LONG1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL_LONG2: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      INTEGER: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DECIMAL: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DOUBLE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      INTEGER_POSITIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      PNAME_LN: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      PNAME_NS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ]\r\n    },\r\n    selectClause: {\r\n      SELECT: [\"SELECT\", \"?or([DISTINCT,REDUCED])\", \"or([+or([var,[ (,expression,AS,var,)]]),*])\"]\r\n    },\r\n    selectQuery: {\r\n      SELECT: [\"selectClause\", \"*datasetClause\", \"whereClause\", \"solutionModifier\"]\r\n    },\r\n    serviceGraphPattern: {\r\n      SERVICE: [\"SERVICE\", \"?SILENT\", \"varOrIRIref\", \"groupGraphPattern\"]\r\n    },\r\n    solutionModifier: {\r\n      LIMIT: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      OFFSET: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      ORDER: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      HAVING: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      GROUP: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      VALUES: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      $: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      \"}\": [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"]\r\n    },\r\n    sourceSelector: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"]\r\n    },\r\n    sparql11: {\r\n      $: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      CONSTRUCT: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      DESCRIBE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      ASK: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      INSERT: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      DELETE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      SELECT: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      LOAD: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      CLEAR: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      DROP: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      ADD: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      MOVE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      COPY: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      CREATE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      WITH: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      BASE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      PREFIX: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"]\r\n    },\r\n    storeProperty: {\r\n      VAR1: [],\r\n      VAR2: [],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      a: []\r\n    },\r\n    strReplaceExpression: {\r\n      REPLACE: [\"REPLACE\", \"(\", \"expression\", \",\", \"expression\", \",\", \"expression\", \"?[,,expression]\", \")\"]\r\n    },\r\n    string: {\r\n      STRING_LITERAL1: [\"STRING_LITERAL1\"],\r\n      STRING_LITERAL2: [\"STRING_LITERAL2\"],\r\n      STRING_LITERAL_LONG1: [\"STRING_LITERAL_LONG1\"],\r\n      STRING_LITERAL_LONG2: [\"STRING_LITERAL_LONG2\"]\r\n    },\r\n    subSelect: {\r\n      SELECT: [\"selectClause\", \"whereClause\", \"solutionModifier\", \"valuesClause\"]\r\n    },\r\n    substringExpression: {\r\n      SUBSTR: [\"SUBSTR\", \"(\", \"expression\", \",\", \"expression\", \"?[,,expression]\", \")\"]\r\n    },\r\n    triplesBlock: {\r\n      VAR1: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      VAR2: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      NIL: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      \"(\": [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      \"[\": [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      IRI_REF: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      TRUE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      FALSE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      BLANK_NODE_LABEL: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      ANON: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      PNAME_LN: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      PNAME_NS: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL1: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL2: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG1: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG2: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      INTEGER: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DECIMAL: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DOUBLE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      INTEGER_POSITIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DECIMAL_POSITIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DOUBLE_POSITIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      INTEGER_NEGATIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DECIMAL_NEGATIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DOUBLE_NEGATIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"]\r\n    },\r\n    triplesNode: {\r\n      \"(\": [\"collection\"],\r\n      \"[\": [\"blankNodePropertyList\"]\r\n    },\r\n    triplesNodePath: {\r\n      \"(\": [\"collectionPath\"],\r\n      \"[\": [\"blankNodePropertyListPath\"]\r\n    },\r\n    triplesSameSubject: {\r\n      VAR1: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      VAR2: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      NIL: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      IRI_REF: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      TRUE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      FALSE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      ANON: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      PNAME_LN: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      PNAME_NS: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL1: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL2: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      INTEGER: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DECIMAL: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DOUBLE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      \"(\": [\"triplesNode\", \"propertyList\"],\r\n      \"[\": [\"triplesNode\", \"propertyList\"]\r\n    },\r\n    triplesSameSubjectPath: {\r\n      VAR1: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      VAR2: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      NIL: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      IRI_REF: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      TRUE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      FALSE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      ANON: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      PNAME_LN: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      PNAME_NS: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL1: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL2: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      INTEGER: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DECIMAL: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DOUBLE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      \"(\": [\"triplesNodePath\", \"propertyListPath\"],\r\n      \"[\": [\"triplesNodePath\", \"propertyListPath\"]\r\n    },\r\n    triplesTemplate: {\r\n      VAR1: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      VAR2: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      NIL: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      \"(\": [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      \"[\": [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      IRI_REF: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      TRUE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      FALSE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      BLANK_NODE_LABEL: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      ANON: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      PNAME_LN: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      PNAME_NS: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL1: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL2: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG1: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG2: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      INTEGER: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DECIMAL: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DOUBLE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      INTEGER_POSITIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DECIMAL_POSITIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DOUBLE_POSITIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      INTEGER_NEGATIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DECIMAL_NEGATIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DOUBLE_NEGATIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"]\r\n    },\r\n    unaryExpression: {\r\n      \"!\": [\"!\", \"primaryExpression\"],\r\n      \"+\": [\"+\", \"primaryExpression\"],\r\n      \"-\": [\"-\", \"primaryExpression\"],\r\n      VAR1: [\"primaryExpression\"],\r\n      VAR2: [\"primaryExpression\"],\r\n      \"(\": [\"primaryExpression\"],\r\n      STR: [\"primaryExpression\"],\r\n      LANG: [\"primaryExpression\"],\r\n      LANGMATCHES: [\"primaryExpression\"],\r\n      DATATYPE: [\"primaryExpression\"],\r\n      BOUND: [\"primaryExpression\"],\r\n      IRI: [\"primaryExpression\"],\r\n      URI: [\"primaryExpression\"],\r\n      BNODE: [\"primaryExpression\"],\r\n      RAND: [\"primaryExpression\"],\r\n      ABS: [\"primaryExpression\"],\r\n      CEIL: [\"primaryExpression\"],\r\n      FLOOR: [\"primaryExpression\"],\r\n      ROUND: [\"primaryExpression\"],\r\n      CONCAT: [\"primaryExpression\"],\r\n      STRLEN: [\"primaryExpression\"],\r\n      UCASE: [\"primaryExpression\"],\r\n      LCASE: [\"primaryExpression\"],\r\n      ENCODE_FOR_URI: [\"primaryExpression\"],\r\n      CONTAINS: [\"primaryExpression\"],\r\n      STRSTARTS: [\"primaryExpression\"],\r\n      STRENDS: [\"primaryExpression\"],\r\n      STRBEFORE: [\"primaryExpression\"],\r\n      STRAFTER: [\"primaryExpression\"],\r\n      YEAR: [\"primaryExpression\"],\r\n      MONTH: [\"primaryExpression\"],\r\n      DAY: [\"primaryExpression\"],\r\n      HOURS: [\"primaryExpression\"],\r\n      MINUTES: [\"primaryExpression\"],\r\n      SECONDS: [\"primaryExpression\"],\r\n      TIMEZONE: [\"primaryExpression\"],\r\n      TZ: [\"primaryExpression\"],\r\n      NOW: [\"primaryExpression\"],\r\n      UUID: [\"primaryExpression\"],\r\n      STRUUID: [\"primaryExpression\"],\r\n      MD5: [\"primaryExpression\"],\r\n      SHA1: [\"primaryExpression\"],\r\n      SHA256: [\"primaryExpression\"],\r\n      SHA384: [\"primaryExpression\"],\r\n      SHA512: [\"primaryExpression\"],\r\n      COALESCE: [\"primaryExpression\"],\r\n      IF: [\"primaryExpression\"],\r\n      STRLANG: [\"primaryExpression\"],\r\n      STRDT: [\"primaryExpression\"],\r\n      SAMETERM: [\"primaryExpression\"],\r\n      ISIRI: [\"primaryExpression\"],\r\n      ISURI: [\"primaryExpression\"],\r\n      ISBLANK: [\"primaryExpression\"],\r\n      ISLITERAL: [\"primaryExpression\"],\r\n      ISNUMERIC: [\"primaryExpression\"],\r\n      TRUE: [\"primaryExpression\"],\r\n      FALSE: [\"primaryExpression\"],\r\n      COUNT: [\"primaryExpression\"],\r\n      SUM: [\"primaryExpression\"],\r\n      MIN: [\"primaryExpression\"],\r\n      MAX: [\"primaryExpression\"],\r\n      AVG: [\"primaryExpression\"],\r\n      SAMPLE: [\"primaryExpression\"],\r\n      GROUP_CONCAT: [\"primaryExpression\"],\r\n      SUBSTR: [\"primaryExpression\"],\r\n      REPLACE: [\"primaryExpression\"],\r\n      REGEX: [\"primaryExpression\"],\r\n      EXISTS: [\"primaryExpression\"],\r\n      NOT: [\"primaryExpression\"],\r\n      IRI_REF: [\"primaryExpression\"],\r\n      STRING_LITERAL1: [\"primaryExpression\"],\r\n      STRING_LITERAL2: [\"primaryExpression\"],\r\n      STRING_LITERAL_LONG1: [\"primaryExpression\"],\r\n      STRING_LITERAL_LONG2: [\"primaryExpression\"],\r\n      INTEGER: [\"primaryExpression\"],\r\n      DECIMAL: [\"primaryExpression\"],\r\n      DOUBLE: [\"primaryExpression\"],\r\n      INTEGER_POSITIVE: [\"primaryExpression\"],\r\n      DECIMAL_POSITIVE: [\"primaryExpression\"],\r\n      DOUBLE_POSITIVE: [\"primaryExpression\"],\r\n      INTEGER_NEGATIVE: [\"primaryExpression\"],\r\n      DECIMAL_NEGATIVE: [\"primaryExpression\"],\r\n      DOUBLE_NEGATIVE: [\"primaryExpression\"],\r\n      PNAME_LN: [\"primaryExpression\"],\r\n      PNAME_NS: [\"primaryExpression\"]\r\n    },\r\n    update: {\r\n      INSERT: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      DELETE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      LOAD: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      CLEAR: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      DROP: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      ADD: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      MOVE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      COPY: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      CREATE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      WITH: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      BASE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      PREFIX: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      $: [\"prologue\", \"?[update1,?[;,update]]\"]\r\n    },\r\n    update1: {\r\n      LOAD: [\"load\"],\r\n      CLEAR: [\"clear\"],\r\n      DROP: [\"drop\"],\r\n      ADD: [\"add\"],\r\n      MOVE: [\"move\"],\r\n      COPY: [\"copy\"],\r\n      CREATE: [\"create\"],\r\n      INSERT: [\"INSERT\", \"insert1\"],\r\n      DELETE: [\"DELETE\", \"delete1\"],\r\n      WITH: [\"modify\"]\r\n    },\r\n    updateAll: {\r\n      INSERT: [\"?[update1,?[;,update]]\"],\r\n      DELETE: [\"?[update1,?[;,update]]\"],\r\n      LOAD: [\"?[update1,?[;,update]]\"],\r\n      CLEAR: [\"?[update1,?[;,update]]\"],\r\n      DROP: [\"?[update1,?[;,update]]\"],\r\n      ADD: [\"?[update1,?[;,update]]\"],\r\n      MOVE: [\"?[update1,?[;,update]]\"],\r\n      COPY: [\"?[update1,?[;,update]]\"],\r\n      CREATE: [\"?[update1,?[;,update]]\"],\r\n      WITH: [\"?[update1,?[;,update]]\"],\r\n      $: [\"?[update1,?[;,update]]\"]\r\n    },\r\n    usingClause: {\r\n      USING: [\"USING\", \"or([iriRef,[NAMED,iriRef]])\"]\r\n    },\r\n    valueLogical: {\r\n      \"!\": [\"relationalExpression\"],\r\n      \"+\": [\"relationalExpression\"],\r\n      \"-\": [\"relationalExpression\"],\r\n      VAR1: [\"relationalExpression\"],\r\n      VAR2: [\"relationalExpression\"],\r\n      \"(\": [\"relationalExpression\"],\r\n      STR: [\"relationalExpression\"],\r\n      LANG: [\"relationalExpression\"],\r\n      LANGMATCHES: [\"relationalExpression\"],\r\n      DATATYPE: [\"relationalExpression\"],\r\n      BOUND: [\"relationalExpression\"],\r\n      IRI: [\"relationalExpression\"],\r\n      URI: [\"relationalExpression\"],\r\n      BNODE: [\"relationalExpression\"],\r\n      RAND: [\"relationalExpression\"],\r\n      ABS: [\"relationalExpression\"],\r\n      CEIL: [\"relationalExpression\"],\r\n      FLOOR: [\"relationalExpression\"],\r\n      ROUND: [\"relationalExpression\"],\r\n      CONCAT: [\"relationalExpression\"],\r\n      STRLEN: [\"relationalExpression\"],\r\n      UCASE: [\"relationalExpression\"],\r\n      LCASE: [\"relationalExpression\"],\r\n      ENCODE_FOR_URI: [\"relationalExpression\"],\r\n      CONTAINS: [\"relationalExpression\"],\r\n      STRSTARTS: [\"relationalExpression\"],\r\n      STRENDS: [\"relationalExpression\"],\r\n      STRBEFORE: [\"relationalExpression\"],\r\n      STRAFTER: [\"relationalExpression\"],\r\n      YEAR: [\"relationalExpression\"],\r\n      MONTH: [\"relationalExpression\"],\r\n      DAY: [\"relationalExpression\"],\r\n      HOURS: [\"relationalExpression\"],\r\n      MINUTES: [\"relationalExpression\"],\r\n      SECONDS: [\"relationalExpression\"],\r\n      TIMEZONE: [\"relationalExpression\"],\r\n      TZ: [\"relationalExpression\"],\r\n      NOW: [\"relationalExpression\"],\r\n      UUID: [\"relationalExpression\"],\r\n      STRUUID: [\"relationalExpression\"],\r\n      MD5: [\"relationalExpression\"],\r\n      SHA1: [\"relationalExpression\"],\r\n      SHA256: [\"relationalExpression\"],\r\n      SHA384: [\"relationalExpression\"],\r\n      SHA512: [\"relationalExpression\"],\r\n      COALESCE: [\"relationalExpression\"],\r\n      IF: [\"relationalExpression\"],\r\n      STRLANG: [\"relationalExpression\"],\r\n      STRDT: [\"relationalExpression\"],\r\n      SAMETERM: [\"relationalExpression\"],\r\n      ISIRI: [\"relationalExpression\"],\r\n      ISURI: [\"relationalExpression\"],\r\n      ISBLANK: [\"relationalExpression\"],\r\n      ISLITERAL: [\"relationalExpression\"],\r\n      ISNUMERIC: [\"relationalExpression\"],\r\n      TRUE: [\"relationalExpression\"],\r\n      FALSE: [\"relationalExpression\"],\r\n      COUNT: [\"relationalExpression\"],\r\n      SUM: [\"relationalExpression\"],\r\n      MIN: [\"relationalExpression\"],\r\n      MAX: [\"relationalExpression\"],\r\n      AVG: [\"relationalExpression\"],\r\n      SAMPLE: [\"relationalExpression\"],\r\n      GROUP_CONCAT: [\"relationalExpression\"],\r\n      SUBSTR: [\"relationalExpression\"],\r\n      REPLACE: [\"relationalExpression\"],\r\n      REGEX: [\"relationalExpression\"],\r\n      EXISTS: [\"relationalExpression\"],\r\n      NOT: [\"relationalExpression\"],\r\n      IRI_REF: [\"relationalExpression\"],\r\n      STRING_LITERAL1: [\"relationalExpression\"],\r\n      STRING_LITERAL2: [\"relationalExpression\"],\r\n      STRING_LITERAL_LONG1: [\"relationalExpression\"],\r\n      STRING_LITERAL_LONG2: [\"relationalExpression\"],\r\n      INTEGER: [\"relationalExpression\"],\r\n      DECIMAL: [\"relationalExpression\"],\r\n      DOUBLE: [\"relationalExpression\"],\r\n      INTEGER_POSITIVE: [\"relationalExpression\"],\r\n      DECIMAL_POSITIVE: [\"relationalExpression\"],\r\n      DOUBLE_POSITIVE: [\"relationalExpression\"],\r\n      INTEGER_NEGATIVE: [\"relationalExpression\"],\r\n      DECIMAL_NEGATIVE: [\"relationalExpression\"],\r\n      DOUBLE_NEGATIVE: [\"relationalExpression\"],\r\n      PNAME_LN: [\"relationalExpression\"],\r\n      PNAME_NS: [\"relationalExpression\"]\r\n    },\r\n    valuesClause: {\r\n      VALUES: [\"VALUES\", \"dataBlock\"],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    var: {\r\n      VAR1: [\"VAR1\"],\r\n      VAR2: [\"VAR2\"]\r\n    },\r\n    varOrIRIref: {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"]\r\n    },\r\n    varOrTerm: {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      NIL: [\"graphTerm\"],\r\n      IRI_REF: [\"graphTerm\"],\r\n      TRUE: [\"graphTerm\"],\r\n      FALSE: [\"graphTerm\"],\r\n      BLANK_NODE_LABEL: [\"graphTerm\"],\r\n      ANON: [\"graphTerm\"],\r\n      PNAME_LN: [\"graphTerm\"],\r\n      PNAME_NS: [\"graphTerm\"],\r\n      STRING_LITERAL1: [\"graphTerm\"],\r\n      STRING_LITERAL2: [\"graphTerm\"],\r\n      STRING_LITERAL_LONG1: [\"graphTerm\"],\r\n      STRING_LITERAL_LONG2: [\"graphTerm\"],\r\n      INTEGER: [\"graphTerm\"],\r\n      DECIMAL: [\"graphTerm\"],\r\n      DOUBLE: [\"graphTerm\"],\r\n      INTEGER_POSITIVE: [\"graphTerm\"],\r\n      DECIMAL_POSITIVE: [\"graphTerm\"],\r\n      DOUBLE_POSITIVE: [\"graphTerm\"],\r\n      INTEGER_NEGATIVE: [\"graphTerm\"],\r\n      DECIMAL_NEGATIVE: [\"graphTerm\"],\r\n      DOUBLE_NEGATIVE: [\"graphTerm\"]\r\n    },\r\n    verb: {\r\n      VAR1: [\"storeProperty\", \"varOrIRIref\"],\r\n      VAR2: [\"storeProperty\", \"varOrIRIref\"],\r\n      IRI_REF: [\"storeProperty\", \"varOrIRIref\"],\r\n      PNAME_LN: [\"storeProperty\", \"varOrIRIref\"],\r\n      PNAME_NS: [\"storeProperty\", \"varOrIRIref\"],\r\n      a: [\"storeProperty\", \"a\"]\r\n    },\r\n    verbPath: {\r\n      \"^\": [\"path\"],\r\n      a: [\"path\"],\r\n      \"!\": [\"path\"],\r\n      \"(\": [\"path\"],\r\n      IRI_REF: [\"path\"],\r\n      PNAME_LN: [\"path\"],\r\n      PNAME_NS: [\"path\"]\r\n    },\r\n    verbSimple: {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"]\r\n    },\r\n    whereClause: {\r\n      \"{\": [\"?WHERE\", \"groupGraphPattern\"],\r\n      WHERE: [\"?WHERE\", \"groupGraphPattern\"]\r\n    }\r\n  },\r\n\r\n  keywords: /^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i,\r\n\r\n  punct: /^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/,\r\n\r\n  startSymbol: \"sparql11\",\r\n  acceptEmpty: true\r\n};\r\n\n},{}],3:[function(require,module,exports){\n\"use strict\";\r\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\r\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\r\n  var indentUnit = config.indentUnit;\r\n\r\n  var grammar = require(\"./_tokenizer-table.js\");\r\n  var ll1_table = grammar.table;\r\n\r\n  var IRI_REF = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\r\n  /*\r\n\t * PN_CHARS_BASE =\r\n\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\r\n\t */\r\n\r\n  var PN_CHARS_BASE = \"[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]\";\r\n  var PN_CHARS_U = PN_CHARS_BASE + \"|_\";\r\n\r\n  var PN_CHARS = \"(\" + PN_CHARS_U + \"|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])\";\r\n  var VARNAME = \"(\" + PN_CHARS_U + \"|[0-9])\" + \"(\" + PN_CHARS_U + \"|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*\";\r\n  var VAR1 = \"\\\\?\" + VARNAME;\r\n  var VAR2 = \"\\\\$\" + VARNAME;\r\n\r\n  var PN_PREFIX = \"(\" + PN_CHARS_BASE + \")(((\" + PN_CHARS + \")|\\\\.)*(\" + PN_CHARS + \"))?\";\r\n\r\n  var HEX = \"[0-9A-Fa-f]\";\r\n  var PERCENT = \"(%\" + HEX + HEX + \")\";\r\n  var PN_LOCAL_ESC = \"(\\\\\\\\[_~\\\\.\\\\-!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])\";\r\n  var PLX = \"(\" + PERCENT + \"|\" + PN_LOCAL_ESC + \")\";\r\n  var PN_LOCAL = \"(\" +\r\n    PN_CHARS_U +\r\n    \"|:|[0-9]|\" +\r\n    PLX +\r\n    \")((\" +\r\n    PN_CHARS +\r\n    \"|\\\\.|:|\" +\r\n    PLX +\r\n    \")*(\" +\r\n    PN_CHARS +\r\n    \"|:|\" +\r\n    PLX +\r\n    \"))?\";\r\n  var BLANK_NODE_LABEL = \"_:(\" + PN_CHARS_U + \"|[0-9])((\" + PN_CHARS + \"|\\\\.)*\" + PN_CHARS + \")?\";\r\n  var PNAME_NS = \"(\" + PN_PREFIX + \")?:\";\r\n  var PNAME_LN = PNAME_NS + PN_LOCAL;\r\n  var LANGTAG = \"@[a-zA-Z]+(-[a-zA-Z0-9]+)*\";\r\n\r\n  var EXPONENT = \"[eE][\\\\+-]?[0-9]+\";\r\n  var INTEGER = \"[0-9]+\";\r\n  var DECIMAL = \"(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))\";\r\n  var DOUBLE = \"(([0-9]+\\\\.[0-9]*\" + EXPONENT + \")|\" + \"(\\\\.[0-9]+\" + EXPONENT + \")|\" + \"([0-9]+\" + EXPONENT + \"))\";\r\n\r\n  var INTEGER_POSITIVE = \"\\\\+\" + INTEGER;\r\n  var DECIMAL_POSITIVE = \"\\\\+\" + DECIMAL;\r\n  var DOUBLE_POSITIVE = \"\\\\+\" + DOUBLE;\r\n  var INTEGER_NEGATIVE = \"-\" + INTEGER;\r\n  var DECIMAL_NEGATIVE = \"-\" + DECIMAL;\r\n  var DOUBLE_NEGATIVE = \"-\" + DOUBLE;\r\n\r\n  var ECHAR = \"\\\\\\\\[tbnrf\\\\\\\\\\\"']\";\r\n\r\n  //IMPORTANT: this unicode rule is not in the official grammar.\r\n  //Reason: https://github.com/YASGUI/YASQE/issues/49\r\n  //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\r\n  //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\r\n  //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\r\n  var hex4 = HEX + \"{4}\";\r\n  var unicode = \"(\\\\\\\\u\" + hex4 + \"|\\\\\\\\U00(10|0\" + HEX + \")\" + hex4 + \")\";\r\n  var LINE_BREAK = \"\\n\";\r\n  var STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\" + ECHAR + \"|\" + unicode + \")*'\";\r\n  var STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|' + ECHAR + \"|\" + unicode + ')*\"';\r\n\r\n  var STRING_LITERAL_LONG = {\r\n    SINGLE: {\r\n      CAT: \"STRING_LITERAL_LONG1\",\r\n      QUOTES: \"'''\",\r\n      CONTENTS: \"(('|'')?([^'\\\\\\\\]|\" + ECHAR + \"|\" + unicode + \"))*\"\r\n    },\r\n    DOUBLE: {\r\n      CAT: \"STRING_LITERAL_LONG2\",\r\n      QUOTES: '\"\"\"',\r\n      CONTENTS: '((\"|\"\")?([^\"\\\\\\\\]|' + ECHAR + \"|\" + unicode + \"))*\"\r\n    }\r\n  };\r\n  for (var key in STRING_LITERAL_LONG) {\r\n    STRING_LITERAL_LONG[key].COMPLETE = STRING_LITERAL_LONG[key].QUOTES +\r\n      STRING_LITERAL_LONG[key].CONTENTS +\r\n      STRING_LITERAL_LONG[key].QUOTES;\r\n  }\r\n  //\tvar STRING_LITERAL_LONG_QUOTES = {\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"'''\",\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES2\": '\"\"\"',\r\n  //\t}\r\n  //\tvar STRING_LITERAL_LONG_CONTENTS = {\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES2\": '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*'\r\n  //\t};\r\n  //\tvar STRING_LITERAL_LONG1 = STRING_LITERAL_LONG['SINGLE'].QUOTES + STRING_LITERAL_LONG['SINGLE'].CONTENTS + STRING_LITERAL_LONG['SINGLE'].QUOTES;\r\n  //\tvar STRING_LITERAL_LONG2 = STRING_LITERAL_LONG['DOUBLE'].QUOTES + STRING_LITERAL_LONG['DOUBLE'].CONTENTS + STRING_LITERAL_LONG['DOUBLE'].QUOTES;\r\n\r\n  //\tvar stringLiteralLongContentTerminals = {};\r\n  //\tfor (var key in STRING_LITERAL_LONG) {\r\n  //\t\tstringLiteralLongContentTerminals[key] = {\r\n  //\t\t\tname: key,\r\n  //\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG_CONTENTS[key]),\r\n  //\t\t\tstyle:\"string\"\r\n  //\t\t};\r\n  //\t}\r\n  //some regular expressions not used in regular terminals, because this is used accross lines\r\n  var stringLiteralLongRegex = {};\r\n  for (var key in STRING_LITERAL_LONG) {\r\n    stringLiteralLongRegex[key] = {\r\n      complete: {\r\n        name: \"STRING_LITERAL_LONG_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].COMPLETE),\r\n        style: \"string\"\r\n      },\r\n      contents: {\r\n        name: \"STRING_LITERAL_LONG_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].CONTENTS),\r\n        style: \"string\"\r\n      },\r\n      closing: {\r\n        name: \"STRING_LITERAL_LONG_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES),\r\n        style: \"string\"\r\n      },\r\n      quotes: {\r\n        name: \"STRING_LITERAL_LONG_QUOTES_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].QUOTES),\r\n        style: \"string\"\r\n      }\r\n    };\r\n  }\r\n\r\n  var WS = \"[\\\\x20\\\\x09\\\\x0D\\\\x0A]\";\r\n  // Careful! Code mirror feeds one line at a time with no \\n\r\n  // ... but otherwise comment is terminated by \\n\r\n  var COMMENT = \"#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)\";\r\n  var WS_OR_COMMENT_STAR = \"(\" + WS + \"|(\" + COMMENT + \"))*\";\r\n  var NIL = \"\\\\(\" + WS_OR_COMMENT_STAR + \"\\\\)\";\r\n  var ANON = \"\\\\[\" + WS_OR_COMMENT_STAR + \"\\\\]\";\r\n  var terminals = [\r\n    {\r\n      name: \"WS\",\r\n      regex: new RegExp(\"^\" + WS + \"+\"),\r\n      style: \"ws\"\r\n    },\r\n\r\n    {\r\n      name: \"COMMENT\",\r\n      regex: new RegExp(\"^\" + COMMENT),\r\n      style: \"comment\"\r\n    },\r\n\r\n    {\r\n      name: \"IRI_REF\",\r\n      regex: new RegExp(\"^\" + IRI_REF),\r\n      style: \"variable-3\"\r\n    },\r\n\r\n    {\r\n      name: \"VAR1\",\r\n      regex: new RegExp(\"^\" + VAR1),\r\n      style: \"atom\"\r\n    },\r\n\r\n    {\r\n      name: \"VAR2\",\r\n      regex: new RegExp(\"^\" + VAR2),\r\n      style: \"atom\"\r\n    },\r\n\r\n    {\r\n      name: \"LANGTAG\",\r\n      regex: new RegExp(\"^\" + LANGTAG),\r\n      style: \"meta\"\r\n    },\r\n\r\n    {\r\n      name: \"DOUBLE\",\r\n      regex: new RegExp(\"^\" + DOUBLE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DECIMAL\",\r\n      regex: new RegExp(\"^\" + DECIMAL),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"INTEGER\",\r\n      regex: new RegExp(\"^\" + INTEGER),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DOUBLE_POSITIVE\",\r\n      regex: new RegExp(\"^\" + DOUBLE_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DECIMAL_POSITIVE\",\r\n      regex: new RegExp(\"^\" + DECIMAL_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"INTEGER_POSITIVE\",\r\n      regex: new RegExp(\"^\" + INTEGER_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DOUBLE_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + DOUBLE_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DECIMAL_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + DECIMAL_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"INTEGER_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + INTEGER_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n    //\t\tstringLiteralLongRegex.SINGLE.complete,\r\n    //\t\tstringLiteralLongRegex.DOUBLE.complete,\r\n    //\t\tstringLiteralLongRegex.SINGLE.quotes,\r\n    //\t\tstringLiteralLongRegex.DOUBLE.quotes,\r\n\r\n    {\r\n      name: \"STRING_LITERAL1\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL1),\r\n      style: \"string\"\r\n    },\r\n\r\n    {\r\n      name: \"STRING_LITERAL2\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL2),\r\n      style: \"string\"\r\n    },\r\n\r\n    // Enclosed comments won't be highlighted\r\n    {\r\n      name: \"NIL\",\r\n      regex: new RegExp(\"^\" + NIL),\r\n      style: \"punc\"\r\n    },\r\n\r\n    // Enclosed comments won't be highlighted\r\n    {\r\n      name: \"ANON\",\r\n      regex: new RegExp(\"^\" + ANON),\r\n      style: \"punc\"\r\n    },\r\n\r\n    {\r\n      name: \"PNAME_LN\",\r\n      regex: new RegExp(\"^\" + PNAME_LN),\r\n      style: \"string-2\"\r\n    },\r\n\r\n    {\r\n      name: \"PNAME_NS\",\r\n      regex: new RegExp(\"^\" + PNAME_NS),\r\n      style: \"string-2\"\r\n    },\r\n\r\n    {\r\n      name: \"BLANK_NODE_LABEL\",\r\n      regex: new RegExp(\"^\" + BLANK_NODE_LABEL),\r\n      style: \"string-2\"\r\n    }\r\n  ];\r\n\r\n  function getPossibles(symbol) {\r\n    var possibles = [], possiblesOb = ll1_table[symbol];\r\n    if (possiblesOb != undefined) {\r\n      for (var property in possiblesOb) {\r\n        possibles.push(property.toString());\r\n      }\r\n    } else {\r\n      possibles.push(symbol);\r\n    }\r\n    return possibles;\r\n  }\r\n\r\n  function tokenBase(stream, state) {\r\n    function nextToken() {\r\n      var consumed = null;\r\n      if (state.inLiteral) {\r\n        var closingQuotes = false;\r\n        //multi-line literal. try to parse contents.\r\n        consumed = stream.match(stringLiteralLongRegex[state.inLiteral].contents.regex, true, false);\r\n        if (consumed && consumed[0].length == 0) {\r\n          //try seeing whether we can consume closing quotes, to avoid stopping\r\n          consumed = stream.match(stringLiteralLongRegex[state.inLiteral].closing.regex, true, false);\r\n          closingQuotes = true;\r\n        }\r\n\r\n        if (consumed && consumed[0].length > 0) {\r\n          //some string content here.\r\n          var returnObj = {\r\n            quotePos: closingQuotes ? \"end\" : \"content\",\r\n            cat: STRING_LITERAL_LONG[state.inLiteral].CAT,\r\n            style: stringLiteralLongRegex[state.inLiteral].complete.style,\r\n            text: consumed[0],\r\n            start: stream.start\r\n          };\r\n          if (closingQuotes) state.inLiteral = false;\r\n          return returnObj;\r\n        }\r\n      }\r\n\r\n      //Multiline literals\r\n      for (var quoteType in stringLiteralLongRegex) {\r\n        consumed = stream.match(stringLiteralLongRegex[quoteType].quotes.regex, true, false);\r\n        if (consumed) {\r\n          var quotePos;\r\n          if (state.inLiteral) {\r\n            //end of literal. everything is fine\r\n            state.inLiteral = false;\r\n            quotePos = \"end\";\r\n          } else {\r\n            state.inLiteral = quoteType;\r\n            quotePos = \"start\";\r\n          }\r\n          return {\r\n            cat: STRING_LITERAL_LONG[quoteType].CAT,\r\n            style: stringLiteralLongRegex[quoteType].quotes.style,\r\n            text: consumed[0],\r\n            quotePos: quotePos,\r\n            start: stream.start\r\n          };\r\n        }\r\n      }\r\n\r\n      // Tokens defined by individual regular expressions\r\n      for (var i = 0; i < terminals.length; ++i) {\r\n        consumed = stream.match(terminals[i].regex, true, false);\r\n        if (consumed) {\r\n          return {\r\n            cat: terminals[i].name,\r\n            style: terminals[i].style,\r\n            text: consumed[0],\r\n            start: stream.start\r\n          };\r\n        }\r\n      }\r\n\r\n      // Keywords\r\n      consumed = stream.match(grammar.keywords, true, false);\r\n      if (consumed)\r\n        return {\r\n          cat: stream.current().toUpperCase(),\r\n          style: \"keyword\",\r\n          text: consumed[0],\r\n          start: stream.start\r\n        };\r\n\r\n      // Punctuation\r\n      consumed = stream.match(grammar.punct, true, false);\r\n      if (consumed)\r\n        return {\r\n          cat: stream.current(),\r\n          style: \"punc\",\r\n          text: consumed[0],\r\n          start: stream.start\r\n        };\r\n\r\n      // Token is invalid\r\n      // better consume something anyway, or else we're stuck\r\n      consumed = stream.match(/^.[A-Za-z0-9]*/, true, false);\r\n      return {\r\n        cat: \"<invalid_token>\",\r\n        style: \"error\",\r\n        text: consumed[0],\r\n        start: stream.start\r\n      };\r\n    }\r\n\r\n    function recordFailurePos() {\r\n      // tokenOb.style= \"sp-invalid\";\r\n      var col = stream.column();\r\n      state.errorStartPos = col;\r\n      state.errorEndPos = col + tokenOb.text.length;\r\n    }\r\n    function setQueryType(s) {\r\n      if (state.queryType == null) {\r\n        if (\r\n          s == \"SELECT\" ||\r\n          s == \"CONSTRUCT\" ||\r\n          s == \"ASK\" ||\r\n          s == \"DESCRIBE\" ||\r\n          s == \"INSERT\" ||\r\n          s == \"DELETE\" ||\r\n          s == \"LOAD\" ||\r\n          s == \"CLEAR\" ||\r\n          s == \"CREATE\" ||\r\n          s == \"DROP\" ||\r\n          s == \"COPY\" ||\r\n          s == \"MOVE\" ||\r\n          s == \"ADD\"\r\n        )\r\n          state.queryType = s;\r\n      }\r\n    }\r\n\r\n    // Some fake non-terminals are just there to have side-effect on state\r\n    // - i.e. allow or disallow variables and bnodes in certain non-nesting\r\n    // contexts\r\n    function setSideConditions(topSymbol) {\r\n      if (topSymbol === \"prefixDecl\") {\r\n        state.inPrefixDecl = true;\r\n      } else {\r\n        state.inPrefixDecl = false;\r\n      }\r\n      switch (topSymbol) {\r\n        case \"disallowVars\":\r\n          state.allowVars = false;\r\n          break;\r\n        case \"allowVars\":\r\n          state.allowVars = true;\r\n          break;\r\n        case \"disallowBnodes\":\r\n          state.allowBnodes = false;\r\n          break;\r\n        case \"allowBnodes\":\r\n          state.allowBnodes = true;\r\n          break;\r\n        case \"storeProperty\":\r\n          state.storeProperty = true;\r\n          break;\r\n      }\r\n    }\r\n\r\n    function checkSideConditions(topSymbol) {\r\n      return (state.allowVars || topSymbol != \"var\") &&\r\n        (state.allowBnodes ||\r\n          (topSymbol != \"blankNode\" &&\r\n            topSymbol != \"blankNodePropertyList\" &&\r\n            topSymbol != \"blankNodePropertyListPath\"));\r\n    }\r\n\r\n    // CodeMirror works with one line at a time,\r\n    // but newline should behave like whitespace\r\n    // - i.e. a definite break between tokens (for autocompleter)\r\n    if (stream.pos == 0) state.possibleCurrent = state.possibleNext;\r\n\r\n    var tokenOb = nextToken();\r\n\r\n    if (tokenOb.cat == \"<invalid_token>\") {\r\n      // set error state, and\r\n      if (state.OK == true) {\r\n        state.OK = false;\r\n        recordFailurePos();\r\n      }\r\n      state.complete = false;\r\n      // alert(\"Invalid:\"+tokenOb.text);\r\n      return tokenOb.style;\r\n    }\r\n\r\n    if (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\" || (tokenOb.quotePos && tokenOb.quotePos != \"end\")) {\r\n      state.possibleCurrent = state.possibleNext;\r\n      return tokenOb.style;\r\n    }\r\n    // Otherwise, run the parser until the token is digested\r\n    // or failure\r\n    var finished = false;\r\n    var topSymbol;\r\n    var token = tokenOb.cat;\r\n\r\n    if (!tokenOb.quotePos || tokenOb.quotePos == \"end\") {\r\n      // Incremental LL1 parse\r\n      while (state.stack.length > 0 && token && state.OK && !finished) {\r\n        topSymbol = state.stack.pop();\r\n\r\n        if (!ll1_table[topSymbol]) {\r\n          // Top symbol is a terminal\r\n          if (topSymbol == token) {\r\n            if (state.inPrefixDecl) {\r\n              if (topSymbol === \"PNAME_NS\" && tokenOb.text.length > 0) {\r\n                state.currentPnameNs = tokenOb.text.slice(0, -1);\r\n              } else if (state.currentPnameNs !== undefined && tokenOb.text.length > 2) {\r\n                state.prefixes[state.currentPnameNs] = tokenOb.text.slice(1, -1);\r\n                //reset current pname ns\r\n                state.currentPnameNs = undefined;\r\n              }\r\n            }\r\n            // Matching terminals\r\n            // - consume token from input stream\r\n            finished = true;\r\n            setQueryType(topSymbol);\r\n            // Check whether $ (end of input token) is poss next\r\n            // for everything on stack\r\n            var allNillable = true;\r\n            for (var sp = state.stack.length; sp > 0; --sp) {\r\n              var item = ll1_table[state.stack[sp - 1]];\r\n              if (!item || !item[\"$\"]) allNillable = false;\r\n            }\r\n            state.complete = allNillable;\r\n            if (state.storeProperty && token.cat != \"punc\") {\r\n              state.lastProperty = tokenOb.text;\r\n              state.storeProperty = false;\r\n            }\r\n\r\n            //check whether a used prefix is actually defined\r\n            if (!state.inPrefixDecl && (token === \"PNAME_NS\" || token === \"PNAME_LN\")) {\r\n              var colonIndex = tokenOb.text.indexOf(\":\");\r\n              if (colonIndex >= 0) {\r\n                var prefNs = tokenOb.text.slice(0, colonIndex);\r\n                //avoid warnings for missing bif prefixes (yuck, virtuoso-specific)\r\n                if (!state.prefixes[prefNs] && [\"bif\", \"xsd\", \"sql\"].indexOf(prefNs) < 0) {\r\n                  state.OK = false;\r\n                  recordFailurePos();\r\n                  state.errorMsg = \"Prefix '\" + prefNs + \"' is not defined\";\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            state.OK = false;\r\n            state.complete = false;\r\n            recordFailurePos();\r\n          }\r\n        } else {\r\n          // topSymbol is nonterminal\r\n          // - see if there is an entry for topSymbol\r\n          // and nextToken in table\r\n          var nextSymbols = ll1_table[topSymbol][token];\r\n          if (nextSymbols != undefined && checkSideConditions(topSymbol)) {\r\n            // Match - copy RHS of rule to stack\r\n            for (var i = nextSymbols.length - 1; i >= 0; --i) {\r\n              state.stack.push(nextSymbols[i]);\r\n            }\r\n            // Peform any non-grammatical side-effects\r\n            setSideConditions(topSymbol);\r\n          } else {\r\n            // No match in table - fail\r\n            state.OK = false;\r\n            state.complete = false;\r\n            recordFailurePos();\r\n            state.stack.push(topSymbol); // Shove topSymbol back on stack\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!finished && state.OK) {\r\n      state.OK = false;\r\n      state.complete = false;\r\n      recordFailurePos();\r\n    }\r\n\r\n    if (state.possibleCurrent.indexOf(\"a\") >= 0) {\r\n      state.lastPredicateOffset = tokenOb.start;\r\n    }\r\n    state.possibleCurrent = state.possibleNext;\r\n\r\n    state.possibleNext = getPossibles(state.stack[state.stack.length - 1]);\r\n\r\n    return tokenOb.style;\r\n  }\r\n\r\n  var indentTop = {\r\n    \"*[,, object]\": 3,\r\n    \"*[(,),object]\": 3,\r\n    \"*[(,),objectPath]\": 3,\r\n    \"*[/,pathEltOrInverse]\": 2,\r\n    object: 2,\r\n    objectPath: 2,\r\n    objectList: 2,\r\n    objectListPath: 2,\r\n    storeProperty: 2,\r\n    pathMod: 2,\r\n    \"?pathMod\": 2,\r\n    propertyListNotEmpty: 1,\r\n    propertyList: 1,\r\n    propertyListPath: 1,\r\n    propertyListPathNotEmpty: 1,\r\n    \"?[verb,objectList]\": 1\r\n    //\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\r\n  };\r\n\r\n  var indentTable = {\r\n    \"}\": 1,\r\n    \"]\": 1,\r\n    \")\": 1,\r\n    \"{\": -1,\r\n    \"(\": -1,\r\n    \"[\": -1\r\n    //\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\r\n  };\r\n\r\n  function indent(state, textAfter) {\r\n    //just avoid we don't indent multi-line  literals\r\n    if (state.inLiteral) return 0;\r\n    if (state.stack.length && state.stack[state.stack.length - 1] == \"?[or([verbPath,verbSimple]),objectList]\") {\r\n      //we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\r\n      return state.lastPredicateOffset;\r\n    } else {\r\n      var n = 0; // indent level\r\n      var i = state.stack.length - 1;\r\n      if (/^[\\}\\]\\)]/.test(textAfter)) {\r\n        // Skip stack items until after matching bracket\r\n        var closeBracket = textAfter.substr(0, 1);\r\n        for (; i >= 0; --i) {\r\n          if (state.stack[i] == closeBracket) {\r\n            --i;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        // Consider nullable non-terminals if at top of stack\r\n        var dn = indentTop[state.stack[i]];\r\n        if (dn) {\r\n          n += dn;\r\n          --i;\r\n        }\r\n      }\r\n      for (; i >= 0; --i) {\r\n        var dn = indentTable[state.stack[i]];\r\n        if (dn) {\r\n          n += dn;\r\n        }\r\n      }\r\n      return n * config.indentUnit;\r\n    }\r\n  }\r\n\r\n  return {\r\n    token: tokenBase,\r\n    startState: function(base) {\r\n      return {\r\n        tokenize: tokenBase,\r\n        OK: true,\r\n        complete: grammar.acceptEmpty,\r\n        errorStartPos: null,\r\n        errorEndPos: null,\r\n        queryType: null,\r\n        possibleCurrent: getPossibles(grammar.startSymbol),\r\n        possibleNext: getPossibles(grammar.startSymbol),\r\n        allowVars: true,\r\n        allowBnodes: true,\r\n        storeProperty: false,\r\n        lastProperty: \"\",\r\n        inLiteral: false,\r\n        stack: [grammar.startSymbol],\r\n        lastPredicateOffset: config.indentUnit,\r\n        prefixes: {}\r\n      };\r\n    },\r\n    indent: indent,\r\n    electricChars: \"}])\"\r\n  };\r\n});\r\nCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\r\n\n},{\"./_tokenizer-table.js\":2,\"codemirror\":undefined}],4:[function(require,module,exports){\n/*\r\n* TRIE implementation in Javascript\r\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*\r\n* Date: Nov 7, 2010\r\n*/\r\n\r\n/*\r\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet.\r\n* It has been used to store large dictionaries of English (say) words in spell-checking programs\r\n* and in natural-language \"understanding\" programs.\r\n* @see http://en.wikipedia.org/wiki/Trie\r\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\r\n/*\r\n\r\n* @class Trie\r\n* @constructor\r\n*/\r\n\r\nvar Trie = module.exports = function() {\r\n  this.words = 0;\r\n  this.prefixes = 0;\r\n  this.children = [];\r\n};\r\n\r\nTrie.prototype = {\r\n  /*\r\n    * Insert a word into the dictionary.\r\n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\r\n    *\r\n    * @method insert\r\n    * @param {String} str Word to insert in the dictionary\r\n    * @param {Integer} pos Current index of the string to be inserted\r\n    * @return {Void}\r\n    */\r\n  insert: function(str, pos) {\r\n    if (str.length == 0) {\r\n      //blank string cannot be inserted\r\n      return;\r\n    }\r\n\r\n    var T = this, k, child;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      T.words++;\r\n      return;\r\n    }\r\n    T.prefixes++;\r\n    k = str[pos];\r\n    if (T.children[k] === undefined) {\r\n      //if node for this char doesn't exist, create one\r\n      T.children[k] = new Trie();\r\n    }\r\n    child = T.children[k];\r\n    child.insert(str, pos + 1);\r\n  },\r\n\r\n  /*\r\n    * Remove a word from the dictionary.\r\n    *\r\n    * @method remove\r\n    * @param {String} str Word to be removed\r\n    * @param {Integer} pos Current index of the string to be removed\r\n    * @return {Void}\r\n    */\r\n  remove: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return;\r\n    }\r\n\r\n    var T = this, k, child;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (T === undefined) {\r\n      return;\r\n    }\r\n    if (pos === str.length) {\r\n      T.words--;\r\n      return;\r\n    }\r\n    T.prefixes--;\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    child.remove(str, pos + 1);\r\n  },\r\n\r\n  /*\r\n    * Update an existing word in the dictionary.\r\n    * This method removes the old word from the dictionary and inserts the new word.\r\n    *\r\n    * @method update\r\n    * @param {String} strOld The old word to be replaced\r\n    * @param {String} strNew The new word to be inserted\r\n    * @return {Void}\r\n    */\r\n  update: function(strOld, strNew) {\r\n    if (strOld.length == 0 || strNew.length == 0) {\r\n      return;\r\n    }\r\n    this.remove(strOld);\r\n    this.insert(strNew);\r\n  },\r\n\r\n  /*\r\n    * Count the number of times a given word has been inserted into the dictionary\r\n    *\r\n    * @method countWord\r\n    * @param {String} str Word to get count of\r\n    * @param {Integer} pos Current index of the given word\r\n    * @return {Integer} The number of times a given word exists in the dictionary\r\n    */\r\n  countWord: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return 0;\r\n    }\r\n\r\n    var T = this, k, child, ret = 0;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      return T.words;\r\n    }\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    if (child !== undefined) {\r\n      //node exists\r\n      ret = child.countWord(str, pos + 1);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Count the number of times a given prefix exists in the dictionary\r\n    *\r\n    * @method countPrefix\r\n    * @param {String} str Prefix to get count of\r\n    * @param {Integer} pos Current index of the given prefix\r\n    * @return {Integer} The number of times a given prefix exists in the dictionary\r\n    */\r\n  countPrefix: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return 0;\r\n    }\r\n\r\n    var T = this, k, child, ret = 0;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      return T.prefixes;\r\n    }\r\n    var k = str[pos];\r\n    child = T.children[k];\r\n    if (child !== undefined) {\r\n      //node exists\r\n      ret = child.countPrefix(str, pos + 1);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Find a word in the dictionary\r\n    *\r\n    * @method find\r\n    * @param {String} str The word to find in the dictionary\r\n    * @return {Boolean} True if the word exists in the dictionary, else false\r\n    */\r\n  find: function(str) {\r\n    if (str.length == 0) {\r\n      return false;\r\n    }\r\n\r\n    if (this.countWord(str) > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /*\r\n    * Get all words in the dictionary\r\n    *\r\n    * @method getAllWords\r\n    * @param {String} str Prefix of current word\r\n    * @return {Array} Array of words in the dictionary\r\n    */\r\n  getAllWords: function(str) {\r\n    var T = this, k, child, ret = [];\r\n    if (str === undefined) {\r\n      str = \"\";\r\n    }\r\n    if (T === undefined) {\r\n      return [];\r\n    }\r\n    if (T.words > 0) {\r\n      ret.push(str);\r\n    }\r\n    for (k in T.children) {\r\n      if (T.children.hasOwnProperty(k)) {\r\n        child = T.children[k];\r\n        ret = ret.concat(child.getAllWords(str + k));\r\n      }\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Autocomplete a given prefix\r\n    *\r\n    * @method autoComplete\r\n    * @param {String} str Prefix to be completed based on dictionary entries\r\n    * @param {Integer} pos Current index of the prefix\r\n    * @return {Array} Array of possible suggestions\r\n    */\r\n  autoComplete: function(str, pos) {\r\n    var T = this, k, child;\r\n    if (str.length == 0) {\r\n      if (pos === undefined) {\r\n        return T.getAllWords(str);\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    if (child === undefined) {\r\n      //node doesn't exist\r\n      return [];\r\n    }\r\n    if (pos === str.length - 1) {\r\n      return child.getAllWords(str);\r\n    }\r\n    return child.autoComplete(str, pos + 1);\r\n  }\r\n};\r\n\n},{}],5:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n\n},{\"codemirror\":undefined}],6:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n\n},{\"codemirror\":undefined}],7:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n\n},{\"codemirror\":undefined}],8:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n\n},{\"codemirror\":undefined}],9:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n\n},{\"./foldcode\":8,\"codemirror\":undefined}],10:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n\n},{\"codemirror\":undefined}],11:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n\n},{\"codemirror\":undefined}],12:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n\n},{\"codemirror\":undefined}],13:[function(require,module,exports){\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n\n},{\"codemirror\":undefined}],14:[function(require,module,exports){\n(function (global){\n\"use strict\"\n// Module export pattern from\n// https://github.com/umdjs/umd/blob/master/returnExports.js\n;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.store = factory();\n  }\n}(this, function () {\n\t\n\t// Store.js\n\tvar store = {},\n\t\twin = (typeof window != 'undefined' ? window : global),\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.version = '1.3.20'\n\tstore.set = function(key, value) {}\n\tstore.get = function(key, defaultVal) {}\n\tstore.has = function(key) { return store.get(key) !== undefined }\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (defaultVal == null) {\n\t\t\tdefaultVal = {}\n\t\t}\n\t\tvar val = store.get(key, defaultVal)\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key, defaultVal) {\n\t\t\tvar val = store.deserialize(storage.getItem(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t}\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc && doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tvar withIEStorage = function(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tvar ieKeyFix = function(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key, defaultVal) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tvar val = store.deserialize(storage.getAttribute(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\t\tstorage.removeAttribute(attributes[i].name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\t\n\treturn store\n}));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],15:[function(require,module,exports){\nmodule.exports={\n  \"_args\": [\n    [\n      {\n        \"raw\": \"yasgui-utils@^1.6.0\",\n        \"scope\": null,\n        \"escapedName\": \"yasgui-utils\",\n        \"name\": \"yasgui-utils\",\n        \"rawSpec\": \"^1.6.0\",\n        \"spec\": \">=1.6.0 <2.0.0\",\n        \"type\": \"range\"\n      },\n      \"/home/vagrant/Code/YASGUI.YASQE\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.6.0 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.0\",\n  \"_inCache\": true,\n  \"_installable\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_npmUser\": {\n    \"name\": \"laurens.rietveld\",\n    \"email\": \"laurens.rietveld@gmail.com\"\n  },\n  \"_npmVersion\": \"1.4.3\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"raw\": \"yasgui-utils@^1.6.0\",\n    \"scope\": null,\n    \"escapedName\": \"yasgui-utils\",\n    \"name\": \"yasgui-utils\",\n    \"rawSpec\": \"^1.6.0\",\n    \"spec\": \">=1.6.0 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\",\n  \"_shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.6.0\",\n  \"_where\": \"/home/vagrant/Code/YASGUI.YASQE\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n    \"tarball\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"version\": \"1.6.0\"\n}\n\n},{}],16:[function(require,module,exports){\nwindow.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n\n},{\"../package.json\":15,\"./storage.js\":17,\"./svg.js\":18}],17:[function(require,module,exports){\nvar store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key && val !== undefined) {\n\t\t\tif (typeof exp == \"string\") {\n\t\t\t\texp = times[exp]();\n\t\t\t}\n\t\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\t\tstore.set(key, {\n\t\t\t\tval : val,\n\t\t\t\texp : exp,\n\t\t\t\ttime : new Date().getTime()\n\t\t\t});\n\t\t}\n\t},\n\tremove: function(key) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) store.remove(key)\n\t},\n\tremoveAll: function(filter) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (typeof filter === 'function') {\n\t\t\tfor (var key in store.getAll()) {\n\t\t\t\tif (filter(key, root.get(key))) root.remove(key);\n\t\t\t}\n\t\t}\n\t},\n\tget : function(key) {\n    if (!store.enabled) return null;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) {\n\t\t\tvar info = store.get(key);\n\t\t\tif (!info) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn info.val;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n};\n\n},{\"store\":14}],18:[function(require,module,exports){\nmodule.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};\n},{}],19:[function(require,module,exports){\nmodule.exports={\r\n  \"name\": \"yasgui-yasqe\",\r\n  \"description\": \"Yet Another SPARQL Query Editor\",\r\n  \"version\": \"2.11.10\",\r\n  \"main\": \"src/main.js\",\r\n  \"license\": \"MIT\",\r\n  \"author\": \"Laurens Rietveld\",\r\n  \"homepage\": \"http://yasqe.yasgui.org\",\r\n  \"scripts\": {\r\n    \"dev\": \"gulp serve\",\r\n    \"build\": \"gulp\",\r\n    \"patch\": \"gulp patch\",\r\n    \"minor\": \"gulp minor\",\r\n    \"major\": \"gulp major\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"bootstrap-sass\": \"^3.3.7\",\r\n    \"browserify\": \"^13.1.0\",\r\n    \"browserify-shim\": \"^3.8.12\",\r\n    \"browserify-transform-tools\": \"^1.6.0\",\r\n    \"exorcist\": \"^0.4.0\",\r\n    \"gulp\": \"^3.9.1\",\r\n    \"gulp-autoprefixer\": \"^3.1.0\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-cssimport\": \"^3.1.0\",\r\n    \"gulp-cssnano\": \"^2.1.2\",\r\n    \"gulp-filter\": \"^4.0.0\",\r\n    \"gulp-jsvalidate\": \"^2.1.0\",\r\n    \"gulp-notify\": \"^2.2.0\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-sass\": \"^2.3.2\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-streamify\": \"1.0.2\",\r\n    \"gulp-uglify\": \"^1.5.4\",\r\n    \"gulp-bump\": \"^2.2.0\",\r\n    \"gulp-connect\": \"^4.2.0\",\r\n    \"gulp-embedlr\": \"^0.5.2\",\r\n    \"gulp-git\": \"^1.10.0\",\r\n    \"gulp-livereload\": \"^3.8.1\",\r\n    \"gulp-tag-version\": \"^1.3.0\",\r\n    \"node-sass\": \"^3.8.0\",\r\n    \"require-dir\": \"^0.3.0\",\r\n    \"run-sequence\": \"^1.2.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"~1.1.0\",\r\n    \"vinyl-transform\": \"1.0.0\",\r\n    \"watchify\": \"^3.7.0\"\r\n  },\r\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\r\n  \"keywords\": [\r\n    \"JavaScript\",\r\n    \"SPARQL\",\r\n    \"Editor\",\r\n    \"Semantic Web\",\r\n    \"Linked Data\"\r\n  ],\r\n  \"maintainers\": [\r\n    {\r\n      \"name\": \"Laurens Rietveld\",\r\n      \"email\": \"laurens.rietveld@gmail.com\",\r\n      \"web\": \"http://laurensrietveld.nl\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\r\n  },\r\n  \"dependencies\": {\r\n    \"codemirror\": \"5.17.0\",\r\n    \"jquery\": \"^2.2.4\",\r\n    \"yasgui-utils\": \"^1.6.0\"\r\n  },\r\n  \"optionalShim\": {\r\n    \"codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    },\r\n    \"jquery\": {\r\n      \"require\": \"jquery\",\r\n      \"global\": \"jQuery\"\r\n    },\r\n    \"../../lib/codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    }\r\n  }\r\n}\r\n\n},{}],20:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n  utils = require(\"../utils.js\"),\r\n  yutils = require(\"yasgui-utils\"),\r\n  Trie = require(\"../../lib/trie.js\"),\r\n  YASQE = require(\"../main.js\");\r\n\r\nmodule.exports = function(YASQE, yasqe) {\r\n  var completionNotifications = {};\r\n  var completers = {};\r\n  var tries = {};\r\n\r\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\r\n    autoComplete(true);\r\n  });\r\n  yasqe.on(\"change\", function() {\r\n    var needPossibleAdjustment = [];\r\n    for (var notificationName in completionNotifications) {\r\n      if (completionNotifications[notificationName].is(\":visible\")) {\r\n        needPossibleAdjustment.push(completionNotifications[notificationName]);\r\n      }\r\n    }\r\n    if (needPossibleAdjustment.length > 0) {\r\n      //position completion notifications\r\n      var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n      var offset = 0;\r\n      if (scrollBar.is(\":visible\")) {\r\n        offset = scrollBar.outerWidth();\r\n      }\r\n      needPossibleAdjustment.forEach(function(notification) {\r\n        notification.css(\"right\", offset);\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\r\n\t * \r\n\t * @method doc.storeBulkCompletions\r\n\t * @param completions {array}\r\n\t */\r\n  var storeBulkCompletions = function(completer, completions) {\r\n    // store array as trie\r\n    tries[completer.name] = new Trie();\r\n    for (var i = 0; i < completions.length; i++) {\r\n      tries[completer.name].insert(completions[i]);\r\n    }\r\n    // store in localstorage as well\r\n    var storageId = utils.getPersistencyId(yasqe, completer.persistent);\r\n    if (storageId) yutils.storage.set(storageId, completions, \"month\");\r\n  };\r\n\r\n  var initCompleter = function(name, completionInit) {\r\n    var completer = completers[name] = new completionInit(yasqe, name);\r\n    completer.name = name;\r\n    if (completer.bulk) {\r\n      var storeArrayAsBulk = function(suggestions) {\r\n        if (suggestions && suggestions instanceof Array && suggestions.length > 0) {\r\n          storeBulkCompletions(completer, suggestions);\r\n        }\r\n      };\r\n      if (completer.get instanceof Array) {\r\n        // we don't care whether the completions are already stored in\r\n        // localstorage. just use this one\r\n        storeArrayAsBulk(completer.get);\r\n      } else {\r\n        // if completions are defined in localstorage, use those! (calling the\r\n        // function may come with overhead (e.g. async calls))\r\n        var completionsFromStorage = null;\r\n        var persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\r\n        if (persistencyIdentifier) completionsFromStorage = yutils.storage.get(persistencyIdentifier);\r\n        if (completionsFromStorage && completionsFromStorage.length > 0) {\r\n          storeArrayAsBulk(completionsFromStorage);\r\n        } else {\r\n          // nothing in storage. check whether we have a function via which we\r\n          // can get our prefixes\r\n          if (completer.get instanceof Function) {\r\n            if (completer.async) {\r\n              completer.get(null, storeArrayAsBulk);\r\n            } else {\r\n              storeArrayAsBulk(completer.get());\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  var autoComplete = function(fromAutoShow) {\r\n    if (yasqe.somethingSelected()) return;\r\n    var tryHintType = function(completer) {\r\n      if (\r\n        fromAutoShow && // from autoShow, i.e. this gets called each time the editor content changes\r\n        (!completer.autoShow || // autoshow for  this particular type of autocompletion is -not- enabled\r\n          (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      var hintConfig = {\r\n        closeCharacters: /(?=a)b/,\r\n        completeSingle: false\r\n      };\r\n      if (!completer.bulk && completer.async) {\r\n        hintConfig.async = true;\r\n      }\r\n      var wrappedHintCallback = function(yasqe, callback) {\r\n        return getCompletionHintsObject(completer, callback);\r\n      };\r\n      var result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\r\n      return true;\r\n    };\r\n    for (var completerName in completers) {\r\n      if ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue; //this completer is disabled\r\n      var completer = completers[completerName];\r\n      if (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\r\n\r\n      if (!completer.isValidCompletionPosition()) {\r\n        //if needed, fire callbacks for when we are -not- in valid completion position\r\n        if (completer.callbacks && completer.callbacks.invalidPosition) {\r\n          completer.callbacks.invalidPosition(yasqe, completer);\r\n        }\r\n        //not in a valid position, so continue to next completion candidate type\r\n        continue;\r\n      }\r\n      // run valid position handler, if there is one (if it returns false, stop the autocompletion!)\r\n      if (completer.callbacks && completer.callbacks.validPosition) {\r\n        if (completer.callbacks.validPosition(yasqe, completer) === false) continue;\r\n      }\r\n      var success = tryHintType(completer);\r\n      if (success) break;\r\n    }\r\n  };\r\n\r\n  var getCompletionHintsObject = function(completer, callback) {\r\n    var getSuggestionsFromToken = function(partialToken) {\r\n      var stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\r\n      var suggestions = [];\r\n      if (tries[completer.name]) {\r\n        suggestions = tries[completer.name].autoComplete(stringToAutocomplete);\r\n      } else if (typeof completer.get == \"function\" && completer.async == false) {\r\n        suggestions = completer.get(stringToAutocomplete);\r\n      } else if (typeof completer.get == \"object\") {\r\n        var partialTokenLength = stringToAutocomplete.length;\r\n        for (var i = 0; i < completer.get.length; i++) {\r\n          var completion = completer.get[i];\r\n          if (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\r\n            suggestions.push(completion);\r\n          }\r\n        }\r\n      }\r\n      return getSuggestionsAsHintObject(suggestions, completer, partialToken);\r\n    };\r\n\r\n    var token = yasqe.getCompleteToken();\r\n    if (completer.preProcessToken) {\r\n      token = completer.preProcessToken(token);\r\n    }\r\n\r\n    if (token) {\r\n      // use custom completionhint function, to avoid reaching a loop when the\r\n      // completionhint is the same as the current token\r\n      // regular behaviour would keep changing the codemirror dom, hence\r\n      // constantly calling this callback\r\n      if (!completer.bulk && completer.async) {\r\n        var wrappedCallback = function(suggestions) {\r\n          callback(getSuggestionsAsHintObject(suggestions, completer, token));\r\n        };\r\n        completer.get(token, wrappedCallback);\r\n      } else {\r\n        return getSuggestionsFromToken(token);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t *  get our array of suggestions (strings) in the codemirror hint format\r\n\t */\r\n  var getSuggestionsAsHintObject = function(suggestions, completer, token) {\r\n    var hintList = [];\r\n    for (var i = 0; i < suggestions.length; i++) {\r\n      var suggestedString = suggestions[i];\r\n      if (completer.postProcessToken) {\r\n        suggestedString = completer.postProcessToken(token, suggestedString);\r\n      }\r\n      hintList.push({\r\n        text: suggestedString,\r\n        displayText: suggestedString,\r\n        hint: selectHint\r\n      });\r\n    }\r\n\r\n    var cur = yasqe.getCursor();\r\n    var returnObj = {\r\n      completionToken: token.string,\r\n      list: hintList,\r\n      from: {\r\n        line: cur.line,\r\n        ch: token.start\r\n      },\r\n      to: {\r\n        line: cur.line,\r\n        ch: token.end\r\n      }\r\n    };\r\n    //if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\r\n    if (completer.callbacks) {\r\n      for (var callbackName in completer.callbacks) {\r\n        if (completer.callbacks[callbackName]) {\r\n          YASQE.on(returnObj, callbackName, completer.callbacks[callbackName]);\r\n        }\r\n      }\r\n    }\r\n    return returnObj;\r\n  };\r\n\r\n  return {\r\n    init: initCompleter,\r\n    completers: completers,\r\n    notifications: {\r\n      getEl: function(completer) {\r\n        return $(completionNotifications[completer.name]);\r\n      },\r\n      show: function(yasqe, completer) {\r\n        //only draw when the user needs to use a keypress to summon autocompletions\r\n        if (!completer.autoshow) {\r\n          if (!completionNotifications[completer.name])\r\n            completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\r\n          completionNotifications[completer.name]\r\n            .show()\r\n            .text(\r\n              \"Press \" +\r\n                (navigator.userAgent.indexOf(\"Mac OS X\") != -1 ? \"CMD\" : \"CTRL\") +\r\n                \" - <spacebar> to autocomplete\"\r\n            )\r\n            .appendTo($(yasqe.getWrapperElement()));\r\n        }\r\n      },\r\n      hide: function(yasqe, completer) {\r\n        if (completionNotifications[completer.name]) {\r\n          completionNotifications[completer.name].hide();\r\n        }\r\n      }\r\n    },\r\n    autoComplete: autoComplete,\r\n    getTrie: function(completer) {\r\n      return typeof completer == \"string\" ? tries[completer] : tries[completer.name];\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\r\n */\r\nvar selectHint = function(yasqe, data, completion) {\r\n  if (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\r\n    yasqe.replaceRange(completion.text, data.from, data.to);\r\n  }\r\n};\r\n\r\n//\r\n//module.exports = {\r\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\r\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\r\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n//\tshowCompletionNotification: showCompletionNotification,\r\n//\thideCompletionNotification: hideCompletionNotification,\r\n//\tautoComplete: autoComplete,\r\n//\tautocompleteVariables: autocompleteVariables,\r\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\r\n//\tfetchFromLov: fetchFromLov,\r\n////\tstoreBulkCompletions: storeBulkCompletions,\r\n//\tloadBulkCompletions: loadBulkCompletions,\r\n//};\r\n\n},{\"../../lib/trie.js\":4,\"../main.js\":30,\"../utils.js\":36,\"jquery\":undefined,\"yasgui-utils\":16}],21:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(yasqe);\r\n    },\r\n    get: function(token, callback) {\r\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preProcessToken(yasqe, token);\r\n    },\r\n    postProcessToken: function(token, suggestedString) {\r\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\r\n    },\r\n    async: true,\r\n    bulk: false,\r\n    autoShow: false,\r\n    persistent: name,\r\n    callbacks: {\r\n      validPosition: yasqe.autocompleters.notifications.show,\r\n      invalidPosition: yasqe.autocompleters.notifications.hide\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n  var token = yasqe.getCompleteToken();\r\n  if (token.string.indexOf(\"?\") == 0) return false;\r\n  var cur = yasqe.getCursor();\r\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n  if (previousToken.string == \"a\") return true;\r\n  if (previousToken.string == \"rdf:type\") return true;\r\n  if (previousToken.string == \"rdfs:domain\") return true;\r\n  if (previousToken.string == \"rdfs:range\") return true;\r\n  return false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\r\n};\r\n\n},{\"./utils\":24,\"./utils.js\":24,\"jquery\":undefined}],22:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\r\nvar tokenTypes = {\r\n  \"string-2\": \"prefixed\",\r\n  atom: \"var\"\r\n};\r\n\r\nmodule.exports = function(yasqe, completerName) {\r\n  //this autocompleter also fires on-change!\r\n  yasqe.on(\"change\", function() {\r\n    module.exports.appendPrefixIfNeeded(yasqe, completerName);\r\n  });\r\n\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(yasqe);\r\n    },\r\n    get: function(token, callback) {\r\n      $.get(module.exports.fetchFrom, function(data) {\r\n        var prefixArray = [];\r\n        for (var prefix in data) {\r\n          if (prefix == \"bif\") continue; // skip this one! see #231\r\n          var completeString = prefix + \": <\" + data[prefix] + \">\";\r\n          prefixArray.push(completeString); // the array we want to store in localstorage\r\n        }\r\n\r\n        prefixArray.sort();\r\n        callback(prefixArray);\r\n      });\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preprocessPrefixTokenForCompletion(yasqe, token);\r\n    },\r\n    async: true,\r\n    bulk: true,\r\n    autoShow: true,\r\n    persistent: completerName,\r\n    callbacks: {\r\n      pick: function() {\r\n        yasqe.collapsePrefixes(false);\r\n      }\r\n    }\r\n  };\r\n};\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n  var cur = yasqe.getCursor(), token = yasqe.getTokenAt(cur);\r\n\r\n  // not at end of line\r\n  if (yasqe.getLine(cur.line).length > cur.ch) return false;\r\n\r\n  if (token.type != \"ws\") {\r\n    // we want to complete token, e.g. when the prefix starts with an a\r\n    // (treated as a token in itself..)\r\n    // but we to avoid including the PREFIX tag. So when we have just\r\n    // typed a space after the prefix tag, don't get the complete token\r\n    token = yasqe.getCompleteToken();\r\n  }\r\n\r\n  // we shouldnt be at the uri part the prefix declaration\r\n  // also check whether current token isnt 'a' (that makes codemirror\r\n  // thing a namespace is a possiblecurrent\r\n  if (!token.string.indexOf(\"a\") == 0 && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1) return false;\r\n\r\n  // First token of line needs to be PREFIX,\r\n  // there should be no trailing text (otherwise, text is wrongly inserted\r\n  // in between)\r\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n  if (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\r\n  return true;\r\n};\r\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\r\n  var previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\r\n  if (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\r\n    //combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\r\n    //we want the token to be \"bla: <\", en not \"<\"\r\n    token = {\r\n      start: previousToken.start,\r\n      end: token.end,\r\n      string: previousToken.string + \" \" + token.string,\r\n      state: token.state\r\n    };\r\n  }\r\n  return token;\r\n};\r\n/**\r\n * Check whether typed prefix is declared. If not, automatically add declaration\r\n * using list from prefix.cc\r\n *\r\n * @param yasqe\r\n */\r\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\r\n  if (!yasqe.autocompleters.getTrie(completerName)) return; // no prefixed defined. just stop\r\n  if (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return; //this autocompleter is disabled\r\n  var cur = yasqe.getCursor();\r\n\r\n  var token = yasqe.getTokenAt(cur);\r\n  if (tokenTypes[token.type] == \"prefixed\") {\r\n    var colonIndex = token.string.indexOf(\":\");\r\n    if (colonIndex !== -1) {\r\n      // check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\r\n      //\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\r\n      var lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\r\n      var previousToken = yasqe.getTokenAt({\r\n        line: cur.line,\r\n        ch: token.start\r\n      }); // needs to be null (beginning of line), or whitespace\r\n      if (lastNonWsTokenString != \"PREFIX\" && (previousToken.type == \"ws\" || previousToken.type == null)) {\r\n        // check whether it isnt defined already (saves us from looping\r\n        // through the array)\r\n        var currentPrefix = token.string.substring(0, colonIndex + 1);\r\n        var queryPrefixes = yasqe.getPrefixesFromQuery();\r\n        if (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\r\n          // ok, so it isnt added yet!\r\n          var completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\r\n          if (completions.length > 0) {\r\n            yasqe.addPrefixes(completions[0]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports.fetchFrom = (window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\") +\r\n  \"prefix.cc/popular/all.file.json\";\r\n\n},{\"jquery\":undefined}],23:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(yasqe);\r\n    },\r\n    get: function(token, callback) {\r\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preProcessToken(yasqe, token);\r\n    },\r\n    postProcessToken: function(token, suggestedString) {\r\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\r\n    },\r\n    async: true,\r\n    bulk: false,\r\n    autoShow: false,\r\n    persistent: name,\r\n    callbacks: {\r\n      validPosition: yasqe.autocompleters.notifications.show,\r\n      invalidPosition: yasqe.autocompleters.notifications.hide\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n  var token = yasqe.getCompleteToken();\r\n  if (token.string.length == 0) return false; //we want -something- to autocomplete\r\n  if (token.string.indexOf(\"?\") == 0) return false; // we are typing a var\r\n  if ($.inArray(\"a\", token.state.possibleCurrent) >= 0) return true; // predicate pos\r\n  var cur = yasqe.getCursor();\r\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n  if (previousToken.string == \"rdfs:subPropertyOf\") return true;\r\n\r\n  // hmm, we would like -better- checks here, e.g. checking whether we are\r\n  // in a subject, and whether next item is a rdfs:subpropertyof.\r\n  // difficult though... the grammar we use is unreliable when the query\r\n  // is invalid (i.e. during typing), and often the predicate is not typed\r\n  // yet, when we are busy writing the subject...\r\n  return false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\r\n};\r\n\n},{\"./utils\":24,\"./utils.js\":24,\"jquery\":undefined}],24:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\"), yutils = require(\"yasgui-utils\");\r\n/**\r\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\r\n */\r\n\r\n/**\r\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\r\n * Stores additional info such as the used namespace and prefix in the token object\r\n */\r\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\r\n  var queryPrefixes = yasqe.getPrefixesFromQuery();\r\n  if (!token.string.indexOf(\"<\") == 0) {\r\n    token.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\r\n\r\n    if (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\r\n      token.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\r\n    }\r\n  }\r\n\r\n  token.autocompletionString = token.string.trim();\r\n  if (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\r\n    // hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\r\n    for (var prefix in queryPrefixes) {\r\n      if (token.tokenPrefix === prefix + \":\") {\r\n        token.autocompletionString = queryPrefixes[prefix];\r\n        token.autocompletionString += token.string.substring(prefix.length + 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (token.autocompletionString.indexOf(\"<\") == 0)\r\n    token.autocompletionString = token.autocompletionString.substring(1);\r\n  if (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1)\r\n    token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\r\n  return token;\r\n};\r\n\r\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\r\n  if (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\r\n    // we need to get the suggested string back to prefixed form\r\n    suggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\r\n  } else {\r\n    // it is a regular uri. add '<' and '>' to string\r\n    suggestedString = \"<\" + suggestedString + \">\";\r\n  }\r\n  return suggestedString;\r\n};\r\n\r\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\r\nvar reqProtocol = window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\";\r\nvar fetchFromLov = function(yasqe, completer, token, callback) {\r\n  if (!token || !token.string || token.string.trim().length == 0) {\r\n    yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Nothing to autocomplete yet!\");\r\n    return false;\r\n  }\r\n  var maxResults = 50;\r\n\r\n  var args = {\r\n    q: token.autocompletionString,\r\n    page: 1\r\n  };\r\n  if (completer.name == \"classes\") {\r\n    args.type = \"class\";\r\n  } else {\r\n    args.type = \"property\";\r\n  }\r\n  var results = [];\r\n  var url = \"\";\r\n  var updateUrl = function() {\r\n    url = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\r\n  };\r\n  updateUrl();\r\n  var increasePage = function() {\r\n    args.page++;\r\n    updateUrl();\r\n  };\r\n  var doRequests = function() {\r\n    $.get(url, function(data) {\r\n      for (var i = 0; i < data.results.length; i++) {\r\n        if ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\r\n          results.push(data.results[i].uri[0]);\r\n        } else {\r\n          results.push(data.results[i].uri);\r\n        }\r\n      }\r\n      if (results.length < data.total_results && results.length < maxResults) {\r\n        increasePage();\r\n        doRequests();\r\n      } else {\r\n        //if notification bar is there, show feedback, or close\r\n        if (results.length > 0) {\r\n          yasqe.autocompleters.notifications.hide(yasqe, completer);\r\n        } else {\r\n          yasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\r\n        }\r\n        callback(results);\r\n        // requests done! Don't call this function again\r\n      }\r\n    }).fail(function(jqXHR, textStatus, errorThrown) {\r\n      yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Failed fetching suggestions..\");\r\n    });\r\n  };\r\n  //if notification bar is there, show a loader\r\n  yasqe.autocompleters.notifications\r\n    .getEl(completer)\r\n    .empty()\r\n    .append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\r\n    .append($(yutils.svg.getElement(require(\"../imgs.js\").loader)).addClass(\"notificationLoader\"));\r\n  doRequests();\r\n};\r\n\r\nmodule.exports = {\r\n  fetchFromLov: fetchFromLov,\r\n  preprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n  postprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion\r\n};\r\n\n},{\"../imgs.js\":29,\"./utils.js\":24,\"jquery\":undefined,\"yasgui-utils\":16}],25:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      var token = yasqe.getTokenAt(yasqe.getCursor());\r\n      if (token.type != \"ws\") {\r\n        token = yasqe.getCompleteToken(token);\r\n        if (token && token.string.indexOf(\"?\") == 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    get: function(token) {\r\n      if (token.trim().length == 0) return []; //nothing to autocomplete\r\n      var distinctVars = {};\r\n      //do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\r\n      $(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\r\n        var variable = this.innerHTML;\r\n        if (variable.indexOf(\"?\") == 0) {\r\n          //ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\r\n          var nextEl = $(this).next();\r\n          var nextElClass = nextEl.attr(\"class\");\r\n          if (nextElClass && nextEl.attr(\"class\").indexOf(\"cm-atom\") >= 0) {\r\n            variable += nextEl.text();\r\n          }\r\n\r\n          //skip single questionmarks\r\n          if (variable.length <= 1) return;\r\n\r\n          //it should match our token ofcourse\r\n          if (variable.indexOf(token) !== 0) return;\r\n\r\n          //skip exact matches\r\n          if (variable == token) return;\r\n\r\n          //store in map so we have a unique list\r\n          distinctVars[variable] = true;\r\n        }\r\n      });\r\n      var variables = [];\r\n      for (var variable in distinctVars) {\r\n        variables.push(variable);\r\n      }\r\n      variables.sort();\r\n      return variables;\r\n    },\r\n    async: false,\r\n    bulk: false,\r\n    autoShow: true\r\n  };\r\n};\r\n\n},{\"jquery\":undefined}],26:[function(require,module,exports){\nvar sparql = require(\"./sparql.js\"), $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nvar quote = function(string) {\r\n  return \"'\" + string + \"'\";\r\n};\r\nmodule.exports = {\r\n  createCurlString: function(yasqe, config) {\r\n    var ajaxConfig = sparql.getAjaxConfig(yasqe, config);\r\n    var url = ajaxConfig.url;\r\n    if (ajaxConfig.url.indexOf(\"http\") !== 0) {\r\n      //this is either a relative or absolute url, which is not supported by CURL.\r\n      //Add domain, schema, etc etc\r\n      var url = window.location.protocol + \"//\" + window.location.host;\r\n      if (ajaxConfig.url.indexOf(\"/\") === 0) {\r\n        //its an absolute path\r\n        url += ajaxConfig.url;\r\n      } else {\r\n        //relative, so append current location to url first\r\n        url += window.location.pathname + ajaxConfig.url;\r\n      }\r\n    }\r\n    var cmds = [\"curl\", url, \"-X\", yasqe.options.sparql.requestMethod];\r\n    if (yasqe.options.sparql.requestMethod == \"POST\") {\r\n      cmds.push(\"--data \" + quote($.param(ajaxConfig.data)));\r\n    }\r\n    for (var header in ajaxConfig.headers) {\r\n      cmds.push(\"-H \" + quote(header + \": \" + ajaxConfig.headers[header]));\r\n    }\r\n    return cmds.join(\" \");\r\n  }\r\n};\r\n\n},{\"./sparql.js\":33,\"jquery\":undefined}],27:[function(require,module,exports){\n/**\r\n * The default options of YASQE (check the CodeMirror documentation for even\r\n * more options, such as disabling line numbers, or changing keyboard shortcut\r\n * keys). Either change the default options by setting YASQE.defaults, or by\r\n * passing your own options as second argument to the YASQE constructor\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), YASQE = require(\"./main.js\");\r\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\r\n  mode: \"sparql11\",\r\n  /**\r\n\t * Query string\r\n\t */\r\n  value: \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\r\n  highlightSelectionMatches: {\r\n    showToken: /\\w/\r\n  },\r\n  tabMode: \"indent\",\r\n  lineNumbers: true,\r\n  lineWrapping: true,\r\n  backdrop: false,\r\n  foldGutter: {\r\n    rangeFinder: new YASQE.fold.combine(YASQE.fold.brace, YASQE.fold.prefix)\r\n  },\r\n  collapsePrefixesOnLoad: false,\r\n  gutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n  matchBrackets: true,\r\n  fixedGutter: true,\r\n  syntaxErrorCheck: true,\r\n  /**\r\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\r\n\t *\r\n\t * @property extraKeys\r\n\t * @type object\r\n\t */\r\n  extraKeys: {\r\n    //\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\r\n    //\t\t\t\t\t\tYASQE.autoComplete(yasqe);\r\n    //\t\t\t\t\t},\r\n    \"Ctrl-Space\": YASQE.autoComplete,\r\n\r\n    \"Cmd-Space\": YASQE.autoComplete,\r\n    \"Ctrl-D\": YASQE.deleteLine,\r\n    \"Ctrl-K\": YASQE.deleteLine,\r\n    \"Shift-Ctrl-K\": YASQE.deleteLine,\r\n    \"Cmd-D\": YASQE.deleteLine,\r\n    \"Cmd-K\": YASQE.deleteLine,\r\n    \"Ctrl-/\": YASQE.commentLines,\r\n    \"Cmd-/\": YASQE.commentLines,\r\n    \"Ctrl-Alt-Down\": YASQE.copyLineDown,\r\n    \"Ctrl-Alt-Up\": YASQE.copyLineUp,\r\n    \"Cmd-Alt-Down\": YASQE.copyLineDown,\r\n    \"Cmd-Alt-Up\": YASQE.copyLineUp,\r\n    \"Shift-Ctrl-F\": YASQE.doAutoFormat,\r\n    \"Shift-Cmd-F\": YASQE.doAutoFormat,\r\n    \"Ctrl-]\": YASQE.indentMore,\r\n    \"Cmd-]\": YASQE.indentMore,\r\n    \"Ctrl-[\": YASQE.indentLess,\r\n    \"Cmd-[\": YASQE.indentLess,\r\n    \"Ctrl-S\": YASQE.storeQuery,\r\n    \"Cmd-S\": YASQE.storeQuery,\r\n    \"Ctrl-Enter\": YASQE.executeQuery,\r\n    \"Cmd-Enter\": YASQE.executeQuery,\r\n    F11: function(yasqe) {\r\n      yasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\r\n    },\r\n    Esc: function(yasqe) {\r\n      if (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\r\n    }\r\n  },\r\n  cursorHeight: 0.9,\r\n\r\n  /**\r\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\r\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\r\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\r\n\t */\r\n  createShareLink: YASQE.createShareLink,\r\n\r\n  createShortLink: null,\r\n\r\n  /**\r\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\r\n\t */\r\n  consumeShareLink: YASQE.consumeShareLink,\r\n\r\n  /**\r\n\t * Change persistency settings for the YASQE query value. Setting the values\r\n\t * to null, will disable persistancy: nothing is stored between browser\r\n\t * sessions Setting the values to a string (or a function which returns a\r\n\t * string), will store the query in localstorage using the specified string.\r\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\r\n\t * page\r\n\t *\r\n\t * @type function|string\r\n\t */\r\n  persistent: function(yasqe) {\r\n    return \"yasqe_\" + $(yasqe.getWrapperElement()).closest(\"[id]\").attr(\"id\") + \"_queryVal\";\r\n  },\r\n\r\n  /**\r\n\t * Settings for querying sparql endpoints\r\n\t */\r\n  sparql: {\r\n    queryName: function(yasqe) {\r\n      return yasqe.getQueryMode();\r\n    },\r\n    showQueryButton: false,\r\n\r\n    /**f\r\n\t\t * Endpoint to query\r\n\t\t *\r\n\t\t * @property sparql.endpoint\r\n\t\t * @type String|function\r\n\t\t */\r\n    endpoint: \"http://dbpedia.org/sparql\",\r\n    /**\r\n\t\t * Request method via which to access SPARQL endpoint\r\n\t\t *\r\n\t\t * @property sparql.requestMethod\r\n\t\t * @type String|function\r\n\t\t */\r\n    requestMethod: \"POST\",\r\n\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\r\n\r\n    /**\r\n\t\t * Named graphs to query.\r\n\t\t */\r\n    namedGraphs: [],\r\n    /**\r\n\t\t * Default graphs to query.\r\n\t\t */\r\n    defaultGraphs: [],\r\n\r\n    /**\r\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\r\n\t\t */\r\n    args: [],\r\n\r\n    /**\r\n\t\t * Additional request headers\r\n\t\t */\r\n    headers: {},\r\n\r\n    getQueryForAjax: null,\r\n    /**\r\n\t\t * Set of ajax callbacks\r\n\t\t */\r\n    callbacks: {\r\n      beforeSend: null,\r\n      complete: null,\r\n      error: null,\r\n      success: null\r\n    },\r\n    handlers: {} //keep here for backwards compatability\r\n  }\r\n});\r\n\n},{\"./main.js\":30,\"jquery\":undefined}],28:[function(require,module,exports){\n//this is the entry-point for browserify.\r\n//the current browserify version does not support require-ing js files which are used as entry-point\r\n//this way, we can still require our main.js file\r\nmodule.exports = require(\"./main.js\");\r\n\n},{\"./main.js\":30}],29:[function(require,module,exports){\n\"use strict\";\r\nmodule.exports = {\r\n  query: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\r\n  queryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\r\n  download: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\r\n  share: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\r\n  warning: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',\r\n  fullscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\r\n  smallscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>'\r\n};\r\n\n},{}],30:[function(require,module,exports){\n\"use strict\";\r\n//make sure any console statements\r\nwindow.console = window.console || {\r\n  log: function() {}\r\n};\r\n\r\n/**\r\n * Load libraries\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n  CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\r\n  utils = require(\"./utils.js\"),\r\n  yutils = require(\"yasgui-utils\"),\r\n  imgs = require(\"./imgs.js\");\r\n\r\nrequire(\"../lib/deparam.js\");\r\nrequire(\"codemirror/addon/fold/foldcode.js\");\r\nrequire(\"codemirror/addon/fold/foldgutter.js\");\r\nrequire(\"codemirror/addon/fold/xml-fold.js\");\r\nrequire(\"codemirror/addon/fold/brace-fold.js\");\r\nrequire(\"./prefixFold.js\");\r\nrequire(\"codemirror/addon/hint/show-hint.js\");\r\nrequire(\"codemirror/addon/search/searchcursor.js\");\r\nrequire(\"codemirror/addon/edit/matchbrackets.js\");\r\nrequire(\"codemirror/addon/runmode/runmode.js\");\r\nrequire(\"codemirror/addon/display/fullscreen.js\");\r\nrequire(\"../lib/grammar/tokenizer.js\");\r\n\r\n/**\r\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\r\n *\r\n * @constructor\r\n * @param {DOM-Element} parent element to append editor to.\r\n * @param {object} settings\r\n * @class YASQE\r\n * @return {doc} YASQE document\r\n */\r\nvar root = module.exports = function(parent, config) {\r\n  var rootEl = $(\"<div>\", {\r\n    class: \"yasqe\"\r\n  }).appendTo($(parent));\r\n  config = extendConfig(config);\r\n  var yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\r\n  postProcessCmElement(yasqe);\r\n  return yasqe;\r\n};\r\n\r\n/**\r\n * Extend config object, which we will pass on to the CM constructor later on.\r\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\r\n * people who add their own onblur events to the config Additionally, need this\r\n * to include the CM defaults ourselves. CodeMirror has a method for including\r\n * defaults, but we can't rely on that one: it assumes flat config object, where\r\n * we have nested objects (e.g. the persistency option)\r\n *\r\n * @private\r\n */\r\nvar extendConfig = function(config) {\r\n  var extendedConfig = $.extend(true, {}, root.defaults, config);\r\n\r\n  // I know, codemirror deals with  default options as well.\r\n  //However, it does not do this recursively (i.e. the persistency option)\r\n\r\n  return extendedConfig;\r\n};\r\n/**\r\n * Add extra functions to the CM document (i.e. the codemirror instantiated\r\n * object)\r\n *\r\n * @private\r\n */\r\nvar extendCmInstance = function(yasqe) {\r\n  //instantiate autocompleters\r\n  yasqe.autocompleters = require(\"./autocompleters/autocompleterBase.js\")(root, yasqe);\r\n  if (yasqe.options.autocompleters) {\r\n    yasqe.options.autocompleters.forEach(function(name) {\r\n      if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\r\n    });\r\n  }\r\n  yasqe.lastQueryDuration = null;\r\n  yasqe.getCompleteToken = function(token, cur) {\r\n    return require(\"./tokenUtils.js\").getCompleteToken(yasqe, token, cur);\r\n  };\r\n  yasqe.getPreviousNonWsToken = function(line, token) {\r\n    return require(\"./tokenUtils.js\").getPreviousNonWsToken(yasqe, line, token);\r\n  };\r\n  yasqe.getNextNonWsToken = function(lineNumber, charNumber) {\r\n    return require(\"./tokenUtils.js\").getNextNonWsToken(yasqe, lineNumber, charNumber);\r\n  };\r\n  yasqe.collapsePrefixes = function(collapse) {\r\n    if (collapse === undefined) collapse = true;\r\n    yasqe.foldCode(\r\n      require(\"./prefixFold.js\").findFirstPrefixLine(yasqe),\r\n      root.fold.prefix,\r\n      collapse ? \"fold\" : \"unfold\"\r\n    );\r\n  };\r\n  var backdrop = null;\r\n  var animateSpeed = null;\r\n  yasqe.setBackdrop = function(show) {\r\n    if (yasqe.options.backdrop || yasqe.options.backdrop === 0 || yasqe.options.backdrop === \"0\") {\r\n      if (animateSpeed === null) {\r\n        animateSpeed = +yasqe.options.backdrop;\r\n        if (animateSpeed === 1) {\r\n          //ah, yasqe.options.backdrop was 'true'. Set this to default animate speed 400\r\n          animateSpeed = 400;\r\n        }\r\n      }\r\n\r\n      if (!backdrop) {\r\n        backdrop = $(\"<div>\", {\r\n          class: \"backdrop\"\r\n        })\r\n          .click(function() {\r\n            $(this).hide();\r\n          })\r\n          .insertAfter($(yasqe.getWrapperElement()));\r\n      }\r\n      if (show) {\r\n        backdrop.show(animateSpeed);\r\n      } else {\r\n        backdrop.hide(animateSpeed);\r\n      }\r\n    }\r\n  };\r\n  /**\r\n\t * Execute query. Pass a callback function, or a configuration object (see\r\n\t * default settings below for possible values) I.e., you can change the\r\n\t * query configuration by either changing the default settings, changing the\r\n\t * settings of this document, or by passing query settings to this function\r\n\t *\r\n\t * @method doc.query\r\n\t * @param function|object\r\n\t */\r\n  yasqe.query = function(callbackOrConfig) {\r\n    root.executeQuery(yasqe, callbackOrConfig);\r\n  };\r\n\r\n  yasqe.getUrlArguments = function(config) {\r\n    return root.getUrlArguments(yasqe, config);\r\n  };\r\n\r\n  /**\r\n\t * Fetch defined prefixes from query string\r\n\t *\r\n\t * @method doc.getPrefixesFromQuery\r\n\t * @return object\r\n\t */\r\n  yasqe.getPrefixesFromQuery = function() {\r\n    return require(\"./prefixUtils.js\").getPrefixesFromQuery(yasqe);\r\n  };\r\n\r\n  yasqe.addPrefixes = function(prefixes) {\r\n    return require(\"./prefixUtils.js\").addPrefixes(yasqe, prefixes);\r\n  };\r\n  yasqe.removePrefixes = function(prefixes) {\r\n    return require(\"./prefixUtils.js\").removePrefixes(yasqe, prefixes);\r\n  };\r\n\r\n  yasqe.getValueWithoutComments = function() {\r\n    var cleanedQuery = \"\";\r\n    root.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\r\n      if (className != \"comment\") {\r\n        cleanedQuery += stringVal;\r\n      }\r\n    });\r\n    return cleanedQuery;\r\n  };\r\n  /**\r\n\t * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\r\n\t *\r\n\t * @method doc.getQueryType\r\n\t * @return string\r\n\t *\r\n\t */\r\n  yasqe.getQueryType = function() {\r\n    return yasqe.queryType;\r\n  };\r\n  /**\r\n\t * Fetch the query mode: 'query' or 'update'\r\n\t *\r\n\t * @method doc.getQueryMode\r\n\t * @return string\r\n\t *\r\n\t */\r\n  yasqe.getQueryMode = function() {\r\n    var type = yasqe.getQueryType();\r\n    if (\r\n      type == \"INSERT\" ||\r\n      type == \"DELETE\" ||\r\n      type == \"LOAD\" ||\r\n      type == \"CLEAR\" ||\r\n      type == \"CREATE\" ||\r\n      type == \"DROP\" ||\r\n      type == \"COPY\" ||\r\n      type == \"MOVE\" ||\r\n      type == \"ADD\"\r\n    ) {\r\n      return \"update\";\r\n    } else {\r\n      return \"query\";\r\n    }\r\n  };\r\n\r\n  yasqe.setCheckSyntaxErrors = function(isEnabled) {\r\n    yasqe.options.syntaxErrorCheck = isEnabled;\r\n    checkSyntax(yasqe);\r\n  };\r\n\r\n  yasqe.enableCompleter = function(name) {\r\n    addCompleterToSettings(yasqe.options, name);\r\n    if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\r\n  };\r\n  yasqe.disableCompleter = function(name) {\r\n    removeCompleterFromSettings(yasqe.options, name);\r\n  };\r\n  return yasqe;\r\n};\r\n\r\nvar addCompleterToSettings = function(settings, name) {\r\n  if (!settings.autocompleters) settings.autocompleters = [];\r\n  settings.autocompleters.push(name);\r\n};\r\nvar removeCompleterFromSettings = function(settings, name) {\r\n  if (typeof settings.autocompleters == \"object\") {\r\n    var index = $.inArray(name, settings.autocompleters);\r\n    if (index >= 0) {\r\n      settings.autocompleters.splice(index, 1);\r\n      removeCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\r\n    }\r\n  }\r\n};\r\nvar postProcessCmElement = function(yasqe) {\r\n  /**\r\n\t * Set doc value\r\n\t */\r\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n  if (storageId) {\r\n    var valueFromStorage = yutils.storage.get(storageId);\r\n    if (valueFromStorage) yasqe.setValue(valueFromStorage);\r\n  }\r\n\r\n  root.drawButtons(yasqe);\r\n\r\n  /**\r\n\t * Add event handlers\r\n\t */\r\n  yasqe.on(\"blur\", function(yasqe, eventInfo) {\r\n    root.storeQuery(yasqe);\r\n  });\r\n  yasqe.on(\"change\", function(yasqe, eventInfo) {\r\n    checkSyntax(yasqe);\r\n    root.updateQueryButton(yasqe);\r\n    root.positionButtons(yasqe);\r\n  });\r\n  yasqe.on(\"changes\", function() {\r\n    //e.g. on paste\r\n    checkSyntax(yasqe);\r\n    root.updateQueryButton(yasqe);\r\n    root.positionButtons(yasqe);\r\n  });\r\n\r\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\r\n    updateButtonsTransparency(yasqe);\r\n  });\r\n  yasqe.prevQueryValid = false;\r\n  checkSyntax(yasqe); // on first load, check as well (our stored or default query might be incorrect)\r\n  root.positionButtons(yasqe);\r\n\r\n  $(yasqe.getWrapperElement())\r\n    .on(\"mouseenter\", \".cm-atom\", function() {\r\n      var matchText = $(this).text();\r\n      $(yasqe.getWrapperElement())\r\n        .find(\".cm-atom\")\r\n        .filter(function() {\r\n          return $(this).text() === matchText;\r\n        })\r\n        .addClass(\"matchingVar\");\r\n    })\r\n    .on(\"mouseleave\", \".cm-atom\", function() {\r\n      $(yasqe.getWrapperElement()).find(\".matchingVar\").removeClass(\"matchingVar\");\r\n    });\r\n  /**\r\n\t * check url args and modify yasqe settings if needed\r\n\t */\r\n  if (yasqe.options.consumeShareLink) {\r\n    yasqe.options.consumeShareLink(yasqe, getUrlParams());\r\n    //and: add a hash listener!\r\n    window.addEventListener(\"hashchange\", function() {\r\n      yasqe.options.consumeShareLink(yasqe, getUrlParams());\r\n    });\r\n  }\r\n  if (yasqe.options.collapsePrefixesOnLoad) yasqe.collapsePrefixes(true);\r\n};\r\n\r\n/**\r\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\r\n */\r\nvar getUrlParams = function() {\r\n  //first try hash\r\n  var urlParams = null;\r\n  if (window.location.hash.length > 1) {\r\n    //firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\r\n    //Don't want this. So simply get the hash string ourselves\r\n    urlParams = $.deparam(location.href.split(\"#\")[1]);\r\n  }\r\n  if ((!urlParams || !(\"query\" in urlParams)) && window.location.search.length > 1) {\r\n    //ok, then just try regular url params\r\n    urlParams = $.deparam(window.location.search.substring(1));\r\n  }\r\n  return urlParams;\r\n};\r\n\r\n/**\r\n * Update transparency of buttons. Increase transparency when cursor is below buttons\r\n */\r\n\r\nvar updateButtonsTransparency = function(yasqe) {\r\n  yasqe.cursor = $(\".CodeMirror-cursor\");\r\n  if (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\r\n    if (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\r\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\r\n    } else {\r\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\r\n    }\r\n  }\r\n};\r\n\r\nvar clearError = null;\r\nvar checkSyntax = function(yasqe, deepcheck) {\r\n  yasqe.queryValid = true;\r\n\r\n  yasqe.clearGutter(\"gutterErrorBar\");\r\n\r\n  var state = null;\r\n  for (var l = 0; l < yasqe.lineCount(); ++l) {\r\n    var precise = false;\r\n    if (!yasqe.prevQueryValid) {\r\n      // we don't want cached information in this case, otherwise the\r\n      // previous error sign might still show up,\r\n      // even though the syntax error might be gone already\r\n      precise = true;\r\n    }\r\n\r\n    var token = yasqe.getTokenAt(\r\n      {\r\n        line: l,\r\n        ch: yasqe.getLine(l).length\r\n      },\r\n      precise\r\n    );\r\n    var state = token.state;\r\n    yasqe.queryType = state.queryType;\r\n    if (state.OK == false) {\r\n      if (!yasqe.options.syntaxErrorCheck) {\r\n        //the library we use already marks everything as being an error. Overwrite this class attribute.\r\n        $(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\r\n        //we don't want to gutter error, so return\r\n        return;\r\n      }\r\n\r\n      var warningEl = yutils.svg.getElement(imgs.warning);\r\n      if (state.errorMsg) {\r\n        require(\"./tooltip\")(yasqe, warningEl, function() {\r\n          return $(\"<div/>\").text(token.state.errorMsg).html();\r\n        });\r\n      } else if (state.possibleCurrent && state.possibleCurrent.length > 0) {\r\n        //\t\t\t\twarningEl.style.zIndex = \"99999999\";\r\n        require(\"./tooltip\")(yasqe, warningEl, function() {\r\n          var expectedEncoded = [];\r\n          state.possibleCurrent.forEach(function(expected) {\r\n            expectedEncoded.push(\r\n              \"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\"\r\n            );\r\n          });\r\n          return \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\r\n        });\r\n      }\r\n      warningEl.style.marginTop = \"2px\";\r\n      warningEl.style.marginLeft = \"2px\";\r\n      warningEl.className = \"parseErrorIcon\";\r\n      yasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\r\n\r\n      yasqe.queryValid = false;\r\n      break;\r\n    }\r\n  }\r\n  yasqe.prevQueryValid = yasqe.queryValid;\r\n  if (deepcheck) {\r\n    if (state != null && state.stack != undefined) {\r\n      var stack = state.stack, len = state.stack.length;\r\n      // Because incremental parser doesn't receive end-of-input\r\n      // it can't clear stack, so we have to check that whatever\r\n      // is left on the stack is nillable\r\n      if (len > 1)\r\n        yasqe.queryValid = false;\r\n      else if (len == 1) {\r\n        if (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\r\n          yasqe.queryValid = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n/**\r\n * Static Utils\r\n */\r\n// first take all CodeMirror references and store them in the YASQE object\r\n$.extend(root, CodeMirror);\r\n\r\n//add registrar for autocompleters\r\nroot.Autocompleters = {};\r\nroot.registerAutocompleter = function(name, constructor) {\r\n  root.Autocompleters[name] = constructor;\r\n  addCompleterToSettings(root.defaults, name);\r\n};\r\n\r\nroot.autoComplete = function(yasqe) {\r\n  //this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\r\n  yasqe.autocompleters.autoComplete(false);\r\n};\r\n//include the autocompleters we provide out-of-the-box\r\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\r\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\r\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\r\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\r\n\r\nroot.positionButtons = function(yasqe) {\r\n  var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n  var offset = 0;\r\n  if (scrollBar.is(\":visible\")) {\r\n    offset = scrollBar.outerWidth();\r\n  }\r\n  if (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 4);\r\n};\r\n\r\n/**\r\n * Create a share link\r\n *\r\n * @method YASQE.createShareLink\r\n * @param {doc} YASQE document\r\n * @default {query: doc.getValue()}\r\n * @return object\r\n */\r\nroot.createShareLink = function(yasqe) {\r\n  //extend existing link, so first fetch current arguments\r\n  var urlParams = {};\r\n  if (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\r\n  urlParams[\"query\"] = yasqe.getValue();\r\n  return urlParams;\r\n};\r\nroot.getAsCurl = function(yasqe, ajaxConfig) {\r\n  var curl = require(\"./curl.js\");\r\n  return curl.createCurlString(yasqe, ajaxConfig);\r\n};\r\n/**\r\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\r\n *\r\n * @method YASQE.consumeShareLink\r\n * @param {doc} YASQE document\r\n */\r\nroot.consumeShareLink = function(yasqe, urlParams) {\r\n  if (urlParams && urlParams.query) {\r\n    yasqe.setValue(urlParams.query);\r\n  }\r\n};\r\nroot.drawButtons = function(yasqe) {\r\n  yasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\r\n\r\n  /**\r\n\t * draw share link button\r\n\t */\r\n  if (yasqe.options.createShareLink) {\r\n    var svgShare = $(yutils.svg.getElement(imgs.share));\r\n    svgShare\r\n      .click(function(event) {\r\n        event.stopPropagation();\r\n        var popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\r\n        $(\"html\").click(function() {\r\n          if (popup) popup.remove();\r\n        });\r\n\r\n        popup.click(function(event) {\r\n          event.stopPropagation();\r\n        });\r\n        var $input = $(\"<input>\").val(\r\n          location.protocol +\r\n            \"//\" +\r\n            location.host +\r\n            location.pathname +\r\n            location.search +\r\n            \"#\" +\r\n            $.param(yasqe.options.createShareLink(yasqe))\r\n        );\r\n\r\n        $input.focus(function() {\r\n          var $this = $(this);\r\n          $this.select();\r\n\r\n          // Work around Chrome's little problem\r\n          $this.mouseup(function() {\r\n            // Prevent further mouseup intervention\r\n            $this.unbind(\"mouseup\");\r\n            return false;\r\n          });\r\n        });\r\n\r\n        popup.empty().append($(\"<div>\", { class: \"inputWrapper\" }).append($input));\r\n        if (yasqe.options.createShortLink) {\r\n          popup.addClass(\"enableShort\");\r\n          $(\"<button>Shorten</button>\")\r\n            .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\r\n            .click(function() {\r\n              $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\r\n              yasqe.options.createShortLink($input.val(), function(errString, shortLink) {\r\n                if (errString) {\r\n                  $input.remove();\r\n                  popup.find(\".inputWrapper\").append($(\"<span>\", { class: \"shortlinkErr\" }).text(errString));\r\n                } else {\r\n                  $input.val(shortLink).focus();\r\n                }\r\n              });\r\n            })\r\n            .appendTo(popup);\r\n        }\r\n        $(\"<button>CURL</button>\")\r\n          .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\r\n          .click(function() {\r\n            $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\r\n            $input.val(root.getAsCurl(yasqe)).focus();\r\n          })\r\n          .appendTo(popup);\r\n        var positions = svgShare.position();\r\n        popup\r\n          .css(\"top\", positions.top + svgShare.outerHeight() + parseInt(popup.css(\"padding-top\")) + \"px\")\r\n          .css(\"left\", positions.left + svgShare.outerWidth() - popup.outerWidth() + \"px\");\r\n        $input.focus();\r\n      })\r\n      .addClass(\"yasqe_share\")\r\n      .attr(\"title\", \"Share your query\")\r\n      .appendTo(yasqe.buttons);\r\n  }\r\n\r\n  /**\r\n\t * draw fullscreen button\r\n\t */\r\n\r\n  var toggleFullscreen = $(\"<div>\", {\r\n    class: \"fullscreenToggleBtns\"\r\n  })\r\n    .append(\r\n      $(yutils.svg.getElement(imgs.fullscreen))\r\n        .addClass(\"yasqe_fullscreenBtn\")\r\n        .attr(\"title\", \"Set editor full screen\")\r\n        .click(function() {\r\n          yasqe.setOption(\"fullScreen\", true);\r\n        })\r\n    )\r\n    .append(\r\n      $(yutils.svg.getElement(imgs.smallscreen))\r\n        .addClass(\"yasqe_smallscreenBtn\")\r\n        .attr(\"title\", \"Set editor to normale size\")\r\n        .click(function() {\r\n          yasqe.setOption(\"fullScreen\", false);\r\n        })\r\n    );\r\n  yasqe.buttons.append(toggleFullscreen);\r\n\r\n  if (yasqe.options.sparql.showQueryButton) {\r\n    $(\"<div>\", {\r\n      class: \"yasqe_queryButton\"\r\n    })\r\n      .click(function() {\r\n        if ($(this).hasClass(\"query_busy\")) {\r\n          if (yasqe.xhr) yasqe.xhr.abort();\r\n          root.updateQueryButton(yasqe);\r\n        } else {\r\n          yasqe.query();\r\n        }\r\n      })\r\n      .appendTo(yasqe.buttons);\r\n    root.updateQueryButton(yasqe);\r\n  }\r\n};\r\n\r\nvar queryButtonIds = {\r\n  busy: \"loader\",\r\n  valid: \"query\",\r\n  error: \"queryInvalid\"\r\n};\r\n\r\n/**\r\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\r\n *\r\n * @param {doc} YASQE document\r\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\r\n */\r\nroot.updateQueryButton = function(yasqe, status) {\r\n  var queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\r\n  if (queryButton.length == 0) return; //no query button drawn\r\n\r\n  //detect status\r\n  if (!status) {\r\n    status = \"valid\";\r\n    if (yasqe.queryValid === false) status = \"error\";\r\n  }\r\n\r\n  if (status != yasqe.queryStatus) {\r\n    queryButton.empty().removeClass(function(index, classNames) {\r\n      return classNames\r\n        .split(\" \")\r\n        .filter(function(c) {\r\n          //remove classname from previous status\r\n          return c.indexOf(\"query_\") == 0;\r\n        })\r\n        .join(\" \");\r\n    });\r\n\r\n    if (status == \"busy\") {\r\n      queryButton.append(\r\n        $(\"<div>\", {\r\n          class: \"loader\"\r\n        })\r\n      );\r\n      yasqe.queryStatus = status;\r\n    } else if (status == \"valid\" || status == \"error\") {\r\n      queryButton.addClass(\"query_\" + status);\r\n      yutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\r\n      yasqe.queryStatus = status;\r\n    }\r\n  }\r\n};\r\n/**\r\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\r\n *\r\n * @method YASQE.fromTextArea\r\n * @param textArea {DOM element}\r\n * @param config {object}\r\n * @returns {doc} YASQE document\r\n */\r\nroot.fromTextArea = function(textAreaEl, config) {\r\n  config = extendConfig(config);\r\n  //add yasqe div as parent (needed for styles to be manageable and scoped).\r\n  //In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\r\n  var rootEl = $(\"<div>\", {\r\n    class: \"yasqe\"\r\n  })\r\n    .insertBefore($(textAreaEl))\r\n    .append($(textAreaEl));\r\n  var yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\r\n  postProcessCmElement(yasqe);\r\n  return yasqe;\r\n};\r\n\r\nroot.storeQuery = function(yasqe) {\r\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n  if (storageId) {\r\n    yutils.storage.set(storageId, yasqe.getValue(), \"month\");\r\n  }\r\n};\r\nroot.commentLines = function(yasqe) {\r\n  var startLine = yasqe.getCursor(true).line;\r\n  var endLine = yasqe.getCursor(false).line;\r\n  var min = Math.min(startLine, endLine);\r\n  var max = Math.max(startLine, endLine);\r\n\r\n  // if all lines start with #, remove this char. Otherwise add this char\r\n  var linesAreCommented = true;\r\n  for (var i = min; i <= max; i++) {\r\n    var line = yasqe.getLine(i);\r\n    if (line.length == 0 || line.substring(0, 1) != \"#\") {\r\n      linesAreCommented = false;\r\n      break;\r\n    }\r\n  }\r\n  for (var i = min; i <= max; i++) {\r\n    if (linesAreCommented) {\r\n      // lines are commented, so remove comments\r\n      yasqe.replaceRange(\r\n        \"\",\r\n        {\r\n          line: i,\r\n          ch: 0\r\n        },\r\n        {\r\n          line: i,\r\n          ch: 1\r\n        }\r\n      );\r\n    } else {\r\n      // Not all lines are commented, so add comments\r\n      yasqe.replaceRange(\"#\", {\r\n        line: i,\r\n        ch: 0\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nroot.copyLineUp = function(yasqe) {\r\n  var cursor = yasqe.getCursor();\r\n  var lineCount = yasqe.lineCount();\r\n  // First create new empty line at end of text\r\n  yasqe.replaceRange(\"\\n\", {\r\n    line: lineCount - 1,\r\n    ch: yasqe.getLine(lineCount - 1).length\r\n  });\r\n  // Copy all lines to their next line\r\n  for (var i = lineCount; i > cursor.line; i--) {\r\n    var line = yasqe.getLine(i - 1);\r\n    yasqe.replaceRange(\r\n      line,\r\n      {\r\n        line: i,\r\n        ch: 0\r\n      },\r\n      {\r\n        line: i,\r\n        ch: yasqe.getLine(i).length\r\n      }\r\n    );\r\n  }\r\n};\r\nroot.copyLineDown = function(yasqe) {\r\n  root.copyLineUp(yasqe);\r\n  // Make sure cursor goes one down (we are copying downwards)\r\n  var cursor = yasqe.getCursor();\r\n  cursor.line++;\r\n  yasqe.setCursor(cursor);\r\n};\r\nroot.doAutoFormat = function(yasqe) {\r\n  if (!yasqe.somethingSelected()) yasqe.execCommand(\"selectAll\");\r\n  var to = {\r\n    line: yasqe.getCursor(false).line,\r\n    ch: yasqe.getSelection().length\r\n  };\r\n  autoFormatRange(yasqe, yasqe.getCursor(true), to);\r\n};\r\n\r\nvar autoFormatRange = function(yasqe, from, to) {\r\n  var absStart = yasqe.indexFromPos(from);\r\n  var absEnd = yasqe.indexFromPos(to);\r\n  // Insert additional line breaks where necessary according to the\r\n  // mode's syntax\r\n  var res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\r\n\r\n  // Replace and auto-indent the range\r\n  yasqe.operation(function() {\r\n    yasqe.replaceRange(res, from, to);\r\n    var startLine = yasqe.posFromIndex(absStart).line;\r\n    var endLine = yasqe.posFromIndex(absStart + res.length).line;\r\n    for (var i = startLine; i <= endLine; i++) {\r\n      yasqe.indentLine(i, \"smart\");\r\n    }\r\n  });\r\n};\r\n\r\nvar autoFormatLineBreaks = function(text, start, end) {\r\n  text = text.substring(start, end);\r\n  var breakAfterArray = [\r\n    [\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\r\n    [\"keyword\", \"ws\", \"uri\"] // i.e. base\r\n  ];\r\n  var breakAfterCharacters = [\"{\", \".\", \";\"];\r\n  var breakBeforeCharacters = [\"}\"];\r\n  var getBreakType = function(stringVal, type) {\r\n    for (var i = 0; i < breakAfterArray.length; i++) {\r\n      if (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf().toString()) {\r\n        return 1;\r\n      }\r\n    }\r\n    for (var i = 0; i < breakAfterCharacters.length; i++) {\r\n      if (stringVal == breakAfterCharacters[i]) {\r\n        return 1;\r\n      }\r\n    }\r\n    for (var i = 0; i < breakBeforeCharacters.length; i++) {\r\n      // don't want to issue 'breakbefore' AND 'breakafter', so check\r\n      // current line\r\n      if ($.trim(currentLine) != \"\" && stringVal == breakBeforeCharacters[i]) {\r\n        return -1;\r\n      }\r\n    }\r\n    return 0;\r\n  };\r\n  var formattedQuery = \"\";\r\n  var currentLine = \"\";\r\n  var stackTrace = [];\r\n  CodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\r\n    stackTrace.push(type);\r\n    var breakType = getBreakType(stringVal, type);\r\n    if (breakType != 0) {\r\n      if (breakType == 1) {\r\n        formattedQuery += stringVal + \"\\n\";\r\n        currentLine = \"\";\r\n      } else {\r\n        // (-1)\r\n        formattedQuery += \"\\n\" + stringVal;\r\n        currentLine = stringVal;\r\n      }\r\n      stackTrace = [];\r\n    } else {\r\n      currentLine += stringVal;\r\n      formattedQuery += stringVal;\r\n    }\r\n    if (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\") stackTrace = [];\r\n  });\r\n  return $.trim(formattedQuery.replace(/\\n\\s*\\n/g, \"\\n\"));\r\n};\r\n\r\nrequire(\"./sparql.js\"), require(\"./defaults.js\");\r\nroot.$ = $;\r\nroot.version = {\r\n  CodeMirror: CodeMirror.version,\r\n  YASQE: require(\"../package.json\").version,\r\n  jquery: $.fn.jquery,\r\n  \"yasgui-utils\": yutils.version\r\n};\r\n\n},{\"../lib/deparam.js\":1,\"../lib/grammar/tokenizer.js\":3,\"../package.json\":19,\"./autocompleters/autocompleterBase.js\":20,\"./autocompleters/classes.js\":21,\"./autocompleters/prefixes.js\":22,\"./autocompleters/properties.js\":23,\"./autocompleters/variables.js\":25,\"./curl.js\":26,\"./defaults.js\":27,\"./imgs.js\":29,\"./prefixFold.js\":31,\"./prefixUtils.js\":32,\"./sparql.js\":33,\"./tokenUtils.js\":34,\"./tooltip\":35,\"./utils.js\":36,\"codemirror\":undefined,\"codemirror/addon/display/fullscreen.js\":5,\"codemirror/addon/edit/matchbrackets.js\":6,\"codemirror/addon/fold/brace-fold.js\":7,\"codemirror/addon/fold/foldcode.js\":8,\"codemirror/addon/fold/foldgutter.js\":9,\"codemirror/addon/fold/xml-fold.js\":10,\"codemirror/addon/hint/show-hint.js\":11,\"codemirror/addon/runmode/runmode.js\":12,\"codemirror/addon/search/searchcursor.js\":13,\"jquery\":undefined,\"yasgui-utils\":16}],31:[function(require,module,exports){\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), tokenUtils = require(\"./tokenUtils.js\");\r\n\r\n(\"use strict\");\r\nvar lookFor = \"PREFIX\";\r\nmodule.exports = {\r\n  findFirstPrefixLine: function(cm) {\r\n    var lastLine = cm.lastLine();\r\n    for (var i = 0; i <= lastLine; ++i) {\r\n      if (findFirstPrefix(cm, i) >= 0) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction findFirstPrefix(cm, line, ch, lineText) {\r\n  if (!ch) ch = 0;\r\n  if (!lineText) lineText = cm.getLine(line);\r\n  lineText = lineText.toUpperCase();\r\n  for (var at = ch, pass = 0; ; ) {\r\n    var found = lineText.indexOf(lookFor, at);\r\n    if (found == -1) {\r\n      //no prefix on this line\r\n      if (pass == 1) break;\r\n      pass = 1;\r\n      at = lineText.length;\r\n      continue;\r\n    }\r\n    if (pass == 1 && found < ch) break;\r\n    var tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n    if (!/^(comment|string)/.test(tokenType)) return found + 1;\r\n    at = found - 1;\r\n    //Could not find a prefix, no use looping any further. Probably invalid query\r\n    if (at === pass) break;\r\n  }\r\n}\r\n\r\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\r\n  var line = start.line, lineText = cm.getLine(line);\r\n\r\n  var startCh, tokenType;\r\n\r\n  function hasPreviousPrefix() {\r\n    var hasPreviousPrefix = false;\r\n    for (var i = line - 1; i >= 0; i--) {\r\n      if (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\r\n        hasPreviousPrefix = true;\r\n        break;\r\n      }\r\n    }\r\n    return hasPreviousPrefix;\r\n  }\r\n\r\n  function findOpening(openCh) {\r\n    for (var at = start.ch, pass = 0; ; ) {\r\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\r\n      if (found == -1) {\r\n        if (pass == 1) break;\r\n        pass = 1;\r\n        at = lineText.length;\r\n        continue;\r\n      }\r\n      if (pass == 1 && found < start.ch) break;\r\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\r\n      at = found - 1;\r\n    }\r\n  }\r\n  var getLastPrefixPos = function(line, ch) {\r\n    var prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\r\n    if (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\r\n    var prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\r\n    if (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\r\n    var prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\r\n    if (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\r\n    return prefixUri.end;\r\n  };\r\n\r\n  //only use opening prefix declaration\r\n  if (hasPreviousPrefix()) return;\r\n  var prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\r\n\r\n  if (prefixStart == null) return;\r\n  var stopAt = \"{\"; //if this char is there, we won't have a chance of finding more prefixes\r\n  var stopAtNextLine = false;\r\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\r\n  var prefixEndChar = getLastPrefixPos(line, prefixStart);\r\n  var prefixEndLine = line;\r\n\r\n  outer:\r\n  for (var i = line; i <= lastLine; ++i) {\r\n    if (stopAtNextLine) break;\r\n    var text = cm.getLine(i), pos = i == line ? prefixStart + 1 : 0;\r\n\r\n    for (;;) {\r\n      if (!stopAtNextLine && text.indexOf(stopAt) >= 0) stopAtNextLine = true;\r\n\r\n      var nextPrefixDeclaration = text.toUpperCase().indexOf(lookFor, pos);\r\n\r\n      if (nextPrefixDeclaration >= 0) {\r\n        if ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\r\n          prefixEndChar = endCh;\r\n          prefixEndLine = i;\r\n          pos = prefixEndChar;\r\n        }\r\n        pos++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    from: CodeMirror.Pos(line, prefixStart + lookFor.length),\r\n    to: CodeMirror.Pos(prefixEndLine, prefixEndChar)\r\n  };\r\n});\r\n\n},{\"./tokenUtils.js\":34,\"codemirror\":undefined}],32:[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * Append prefix declaration to list of prefixes in query window.\r\n *\r\n * @param yasqe\r\n * @param prefix\r\n */\r\nvar addPrefixes = function(yasqe, prefixes) {\r\n  var existingPrefixes = yasqe.getPrefixesFromQuery();\r\n  //for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\r\n  if (typeof prefixes == \"string\") {\r\n    addPrefixAsString(yasqe, prefixes);\r\n  } else {\r\n    for (var pref in prefixes) {\r\n      if (!(pref in existingPrefixes)) addPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\r\n    }\r\n  }\r\n  yasqe.collapsePrefixes(false);\r\n};\r\n\r\nvar addPrefixAsString = function(yasqe, prefixString) {\r\n  var lastPrefix = null;\r\n  var lastPrefixLine = 0;\r\n  var numLines = yasqe.lineCount();\r\n  for (var i = 0; i < numLines; i++) {\r\n    var firstToken = yasqe.getNextNonWsToken(i);\r\n    if (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\r\n      lastPrefix = firstToken;\r\n      lastPrefixLine = i;\r\n    }\r\n  }\r\n\r\n  if (lastPrefix == null) {\r\n    yasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\r\n      line: 0,\r\n      ch: 0\r\n    });\r\n  } else {\r\n    var previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\r\n    yasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\r\n      line: lastPrefixLine\r\n    });\r\n  }\r\n  yasqe.collapsePrefixes(false);\r\n};\r\nvar removePrefixes = function(yasqe, prefixes) {\r\n  var escapeRegex = function(string) {\r\n    //taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\r\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  };\r\n  for (var pref in prefixes) {\r\n    yasqe.setValue(\r\n      yasqe\r\n        .getValue()\r\n        .replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), \"\")\r\n    );\r\n  }\r\n  yasqe.collapsePrefixes(false);\r\n};\r\n\r\n/**\r\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\r\n *\r\n * @param cm\r\n * @returns {Array}\r\n */\r\nvar getPrefixesFromQuery = function(yasqe) {\r\n  //Use precise here. We want to be sure we use the most up to date state. If we're\r\n  //not, we might get outdated prefixes from the current query (creating loops such\r\n  //as https://github.com/OpenTriply/YASGUI/issues/84)\r\n  return yasqe.getTokenAt({ line: yasqe.lastLine(), ch: yasqe.getLine(yasqe.lastLine()).length }, true).state.prefixes;\r\n};\r\n\r\n/**\r\n * Get the used indentation for a certain line\r\n *\r\n * @param yasqe\r\n * @param line\r\n * @param charNumber\r\n * @returns\r\n */\r\nvar getIndentFromLine = function(yasqe, line, charNumber) {\r\n  if (charNumber == undefined) charNumber = 1;\r\n  var token = yasqe.getTokenAt({\r\n    line: line,\r\n    ch: charNumber\r\n  });\r\n  if (token == null || token == undefined || token.type != \"ws\") {\r\n    return \"\";\r\n  } else {\r\n    return token.string + getIndentFromLine(yasqe, line, token.end + 1);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addPrefixes: addPrefixes,\r\n  getPrefixesFromQuery: getPrefixesFromQuery,\r\n  removePrefixes: removePrefixes\r\n};\r\n\n},{}],33:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\"), YASQE = require(\"./main.js\");\r\n\r\nYASQE.getAjaxConfig = function(yasqe, callbackOrConfig) {\r\n  var callback = typeof callbackOrConfig == \"function\" ? callbackOrConfig : null;\r\n  var config = typeof callbackOrConfig == \"object\" ? callbackOrConfig : {};\r\n\r\n  if (yasqe.options.sparql) config = $.extend({}, yasqe.options.sparql, config);\r\n\r\n  //for backwards compatability, make sure we copy sparql handlers to sparql callbacks\r\n  if (config.handlers) $.extend(true, config.callbacks, config.handlers);\r\n\r\n  if (!config.endpoint || config.endpoint.length == 0) return; // nothing to query!\r\n\r\n  /**\r\n\t * initialize ajax config\r\n\t */\r\n  var ajaxConfig = {\r\n    url: typeof config.endpoint == \"function\" ? config.endpoint(yasqe) : config.endpoint,\r\n    type: typeof config.requestMethod == \"function\" ? config.requestMethod(yasqe) : config.requestMethod,\r\n    headers: {\r\n      Accept: getAcceptHeader(yasqe, config)\r\n    }\r\n  };\r\n  if (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\r\n  /**\r\n\t * add complete, beforesend, etc callbacks (if specified)\r\n\t */\r\n  var handlerDefined = false;\r\n  if (config.callbacks) {\r\n    for (var handler in config.callbacks) {\r\n      if (config.callbacks[handler]) {\r\n        handlerDefined = true;\r\n        ajaxConfig[handler] = config.callbacks[handler];\r\n      }\r\n    }\r\n  }\r\n  if (ajaxConfig.type === \"GET\") {\r\n    //we need to do encoding ourselve, as jquery does not properly encode the url string\r\n    //https://github.com/OpenTriply/YASGUI/issues/75\r\n    var first = true;\r\n    $.each(yasqe.getUrlArguments(config), function(key, val) {\r\n      ajaxConfig.url += (first ? \"?\" : \"&\") + val.name + \"=\" + encodeURIComponent(val.value);\r\n      first = false;\r\n    });\r\n  } else {\r\n    ajaxConfig.data = yasqe.getUrlArguments(config);\r\n  }\r\n  if (!handlerDefined && !callback) return; // ok, we can query, but have no callbacks. just stop now\r\n\r\n  // if only callback is passed as arg, add that on as 'onComplete' callback\r\n  if (callback) ajaxConfig.complete = callback;\r\n\r\n  /**\r\n\t * merge additional request headers\r\n\t */\r\n  if (config.headers && !$.isEmptyObject(config.headers)) $.extend(ajaxConfig.headers, config.headers);\r\n\r\n  var queryStart = new Date();\r\n  var updateYasqe = function() {\r\n    yasqe.lastQueryDuration = new Date() - queryStart;\r\n    YASQE.updateQueryButton(yasqe);\r\n    yasqe.setBackdrop(false);\r\n  };\r\n  //Make sure the query button is updated again on complete\r\n  var completeCallbacks = [\r\n    function() {\r\n      require(\"./main.js\").signal(yasqe, \"queryFinish\", arguments);\r\n    },\r\n    updateYasqe\r\n  ];\r\n\r\n  if (ajaxConfig.complete) {\r\n    completeCallbacks.push(ajaxConfig.complete);\r\n  }\r\n  ajaxConfig.complete = completeCallbacks;\r\n  return ajaxConfig;\r\n};\r\n\r\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\r\n  YASQE.signal(yasqe, \"query\", yasqe, callbackOrConfig);\r\n  YASQE.updateQueryButton(yasqe, \"busy\");\r\n  yasqe.setBackdrop(true);\r\n  yasqe.xhr = $.ajax(YASQE.getAjaxConfig(yasqe, callbackOrConfig));\r\n};\r\n\r\nYASQE.getUrlArguments = function(yasqe, config) {\r\n  var queryMode = yasqe.getQueryMode();\r\n  var data = [\r\n    {\r\n      name: utils.getString(yasqe, yasqe.options.sparql.queryName),\r\n      value: config.getQueryForAjax ? config.getQueryForAjax(yasqe) : yasqe.getValue()\r\n    }\r\n  ];\r\n\r\n  /**\r\n\t * add named graphs to ajax config\r\n\t */\r\n  if (config.namedGraphs && config.namedGraphs.length > 0) {\r\n    var argName = queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \";\r\n    for (var i = 0; i < config.namedGraphs.length; i++)\r\n      data.push({\r\n        name: argName,\r\n        value: config.namedGraphs[i]\r\n      });\r\n  }\r\n  /**\r\n\t * add default graphs to ajax config\r\n\t */\r\n  if (config.defaultGraphs && config.defaultGraphs.length > 0) {\r\n    var argName = queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \";\r\n    for (var i = 0; i < config.defaultGraphs.length; i++)\r\n      data.push({\r\n        name: argName,\r\n        value: config.defaultGraphs[i]\r\n      });\r\n  }\r\n\r\n  /**\r\n\t * add additional request args\r\n\t */\r\n  if (config.args && config.args.length > 0) $.merge(data, config.args);\r\n\r\n  return data;\r\n};\r\nvar getAcceptHeader = function(yasqe, config) {\r\n  var acceptHeader = null;\r\n  if (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\r\n    //this is the old config. For backwards compatability, keep supporting it\r\n    if (typeof config.acceptHeader == \"function\") {\r\n      acceptHeader = config.acceptHeader(yasqe);\r\n    } else {\r\n      acceptHeader = config.acceptHeader;\r\n    }\r\n  } else {\r\n    if (yasqe.getQueryMode() == \"update\") {\r\n      acceptHeader = typeof config.acceptHeader == \"function\"\r\n        ? config.acceptHeaderUpdate(yasqe)\r\n        : config.acceptHeaderUpdate;\r\n    } else {\r\n      var qType = yasqe.getQueryType();\r\n      if (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\r\n        acceptHeader = typeof config.acceptHeaderGraph == \"function\"\r\n          ? config.acceptHeaderGraph(yasqe)\r\n          : config.acceptHeaderGraph;\r\n      } else {\r\n        acceptHeader = typeof config.acceptHeaderSelect == \"function\"\r\n          ? config.acceptHeaderSelect(yasqe)\r\n          : config.acceptHeaderSelect;\r\n      }\r\n    }\r\n  }\r\n  return acceptHeader;\r\n};\r\n\r\nmodule.exports = {\r\n  getAjaxConfig: YASQE.getAjaxConfig\r\n};\r\n\n},{\"./main.js\":30,\"./utils.js\":36,\"jquery\":undefined}],34:[function(require,module,exports){\n\"use strict\";\r\n/**\r\n * When typing a query, this query is sometimes syntactically invalid, causing\r\n * the current tokens to be incorrect This causes problem for autocompletion.\r\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\r\n * these\r\n * \r\n * @param yasqe {doc}\r\n * @param token {object}\r\n * @param cursor {object}\r\n * @return token {object}\r\n * @method YASQE.getCompleteToken\r\n */\r\nvar getCompleteToken = function(yasqe, token, cur) {\r\n  if (!cur) {\r\n    cur = yasqe.getCursor();\r\n  }\r\n  if (!token) {\r\n    token = yasqe.getTokenAt(cur);\r\n  }\r\n  var prevToken = yasqe.getTokenAt({\r\n    line: cur.line,\r\n    ch: token.start\r\n  });\r\n  // not start of line, and not whitespace\r\n  if (prevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\") {\r\n    token.start = prevToken.start;\r\n    token.string = prevToken.string + token.string;\r\n    return getCompleteToken(yasqe, token, {\r\n      line: cur.line,\r\n      ch: prevToken.start\r\n    }); // recursively, might have multiple tokens which it should include\r\n  } else if (token.type != null && token.type == \"ws\") {\r\n    //always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\r\n    token.start = token.start + 1;\r\n    token.string = token.string.substring(1);\r\n    return token;\r\n  } else {\r\n    return token;\r\n  }\r\n};\r\nvar getPreviousNonWsToken = function(yasqe, line, token) {\r\n  var previousToken = yasqe.getTokenAt({\r\n    line: line,\r\n    ch: token.start\r\n  });\r\n  if (previousToken != null && previousToken.type == \"ws\") {\r\n    previousToken = getPreviousNonWsToken(yasqe, line, previousToken);\r\n  }\r\n  return previousToken;\r\n};\r\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\r\n  if (charNumber == undefined) charNumber = 1;\r\n  var token = yasqe.getTokenAt({\r\n    line: lineNumber,\r\n    ch: charNumber\r\n  });\r\n  if (token == null || token == undefined || token.end < charNumber) {\r\n    return null;\r\n  }\r\n  if (token.type == \"ws\") {\r\n    return getNextNonWsToken(yasqe, lineNumber, token.end + 1);\r\n  }\r\n  return token;\r\n};\r\n\r\nmodule.exports = {\r\n  getPreviousNonWsToken: getPreviousNonWsToken,\r\n  getCompleteToken: getCompleteToken,\r\n  getNextNonWsToken: getNextNonWsToken\r\n};\r\n\n},{}],35:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\");\r\n\r\n/**\r\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\r\n * Requirements: \r\n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\r\n * \t\tuse html as content\r\n */\r\nmodule.exports = function(yasqe, parent, html) {\r\n  var parent = $(parent);\r\n  var tooltip;\r\n  parent.hover(\r\n    function() {\r\n      if (typeof html == \"function\") html = html();\r\n      tooltip = $(\"<div>\").addClass(\"yasqe_tooltip\").html(html).appendTo(parent);\r\n      repositionTooltip();\r\n    },\r\n    function() {\r\n      $(\".yasqe_tooltip\").remove();\r\n    }\r\n  );\r\n\r\n  /**\r\n\t * only need to take into account top and bottom offset for this usecase\r\n\t */\r\n  var repositionTooltip = function() {\r\n    if ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\r\n      //shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\r\n      tooltip.css(\"bottom\", \"auto\");\r\n      tooltip.css(\"top\", \"26px\");\r\n    }\r\n  };\r\n};\r\n\n},{\"./utils.js\":36,\"jquery\":undefined}],36:[function(require,module,exports){\n\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n\r\nvar keyExists = function(objectToTest, key) {\r\n  var exists = false;\r\n  try {\r\n    if (objectToTest[key] !== undefined) exists = true;\r\n  } catch (e) {}\r\n  return exists;\r\n};\r\n\r\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\r\n  var persistencyId = null;\r\n\r\n  if (persistentIdCreator) {\r\n    if (typeof persistentIdCreator == \"string\") {\r\n      persistencyId = persistentIdCreator;\r\n    } else {\r\n      persistencyId = persistentIdCreator(yasqe);\r\n    }\r\n  }\r\n  return persistencyId;\r\n};\r\n\r\nvar elementsOverlap = (function() {\r\n  function getPositions(elem) {\r\n    var pos, width, height;\r\n    pos = $(elem).offset();\r\n    width = $(elem).width();\r\n    height = $(elem).height();\r\n    return [[pos.left, pos.left + width], [pos.top, pos.top + height]];\r\n  }\r\n\r\n  function comparePositions(p1, p2) {\r\n    var r1, r2;\r\n    r1 = p1[0] < p2[0] ? p1 : p2;\r\n    r2 = p1[0] < p2[0] ? p2 : p1;\r\n    return r1[1] > r2[0] || r1[0] === r2[0];\r\n  }\r\n\r\n  return function(a, b) {\r\n    var pos1 = getPositions(a), pos2 = getPositions(b);\r\n    return comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\r\n  };\r\n})();\r\n\r\nvar getString = function(yasqe, item) {\r\n  if (typeof item == \"function\") {\r\n    return item(yasqe);\r\n  } else {\r\n    return item;\r\n  }\r\n};\r\nmodule.exports = {\r\n  keyExists: keyExists,\r\n  getPersistencyId: getPersistencyId,\r\n  elementsOverlap: elementsOverlap,\r\n  getString: getString\r\n};\r\n\n},{\"jquery\":undefined}]},{},[28])(28)\n});\n\n","module.exports = {\r\n  table: {\r\n    \"*[&&,valueLogical]\": {\r\n      \"&&\": [\"[&&,valueLogical]\", \"*[&&,valueLogical]\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \";\": []\r\n    },\r\n    \"*[,,expression]\": {\r\n      \",\": [\"[,,expression]\", \"*[,,expression]\"],\r\n      \")\": []\r\n    },\r\n    \"*[,,objectPath]\": {\r\n      \",\": [\"[,,objectPath]\", \"*[,,objectPath]\"],\r\n      \".\": [],\r\n      \";\": [],\r\n      \"]\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"*[,,object]\": {\r\n      \",\": [\"[,,object]\", \"*[,,object]\"],\r\n      \".\": [],\r\n      \";\": [],\r\n      \"]\": [],\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"*[/,pathEltOrInverse]\": {\r\n      \"/\": [\"[/,pathEltOrInverse]\", \"*[/,pathEltOrInverse]\"],\r\n      \"|\": [],\r\n      \")\": [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    \"*[;,?[or([verbPath,verbSimple]),objectList]]\": {\r\n      \";\": [\"[;,?[or([verbPath,verbSimple]),objectList]]\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"*[;,?[verb,objectList]]\": {\r\n      \";\": [\"[;,?[verb,objectList]]\", \"*[;,?[verb,objectList]]\"],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"*[UNION,groupGraphPattern]\": {\r\n      UNION: [\"[UNION,groupGraphPattern]\", \"*[UNION,groupGraphPattern]\"],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      \".\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"*[graphPatternNotTriples,?.,?triplesBlock]\": {\r\n      \"{\": [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      OPTIONAL: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      MINUS: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      GRAPH: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      SERVICE: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      FILTER: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      BIND: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VALUES: [\"[graphPatternNotTriples,?.,?triplesBlock]\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"}\": []\r\n    },\r\n    \"*[quadsNotTriples,?.,?triplesTemplate]\": {\r\n      GRAPH: [\"[quadsNotTriples,?.,?triplesTemplate]\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"}\": []\r\n    },\r\n    \"*[|,pathOneInPropertySet]\": {\r\n      \"|\": [\"[|,pathOneInPropertySet]\", \"*[|,pathOneInPropertySet]\"],\r\n      \")\": []\r\n    },\r\n    \"*[|,pathSequence]\": {\r\n      \"|\": [\"[|,pathSequence]\", \"*[|,pathSequence]\"],\r\n      \")\": [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    \"*[||,conditionalAndExpression]\": {\r\n      \"||\": [\"[||,conditionalAndExpression]\", \"*[||,conditionalAndExpression]\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \";\": []\r\n    },\r\n    \"*dataBlockValue\": {\r\n      UNDEF: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      IRI_REF: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      TRUE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      FALSE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      PNAME_LN: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      PNAME_NS: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL1: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL2: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL_LONG1: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      STRING_LITERAL_LONG2: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      INTEGER: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DECIMAL: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DOUBLE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      INTEGER_POSITIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DECIMAL_POSITIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DOUBLE_POSITIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      INTEGER_NEGATIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DECIMAL_NEGATIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      DOUBLE_NEGATIVE: [\"dataBlockValue\", \"*dataBlockValue\"],\r\n      \"}\": [],\r\n      \")\": []\r\n    },\r\n    \"*datasetClause\": {\r\n      FROM: [\"datasetClause\", \"*datasetClause\"],\r\n      WHERE: [],\r\n      \"{\": []\r\n    },\r\n    \"*describeDatasetClause\": {\r\n      FROM: [\"describeDatasetClause\", \"*describeDatasetClause\"],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      GROUP: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      WHERE: [],\r\n      \"{\": [],\r\n      VALUES: [],\r\n      $: []\r\n    },\r\n    \"*graphNode\": {\r\n      \"(\": [\"graphNode\", \"*graphNode\"],\r\n      \"[\": [\"graphNode\", \"*graphNode\"],\r\n      VAR1: [\"graphNode\", \"*graphNode\"],\r\n      VAR2: [\"graphNode\", \"*graphNode\"],\r\n      NIL: [\"graphNode\", \"*graphNode\"],\r\n      IRI_REF: [\"graphNode\", \"*graphNode\"],\r\n      TRUE: [\"graphNode\", \"*graphNode\"],\r\n      FALSE: [\"graphNode\", \"*graphNode\"],\r\n      BLANK_NODE_LABEL: [\"graphNode\", \"*graphNode\"],\r\n      ANON: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_LN: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_NS: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL2: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG2: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      \")\": []\r\n    },\r\n    \"*graphNodePath\": {\r\n      \"(\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      \"[\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      NIL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      IRI_REF: [\"graphNodePath\", \"*graphNodePath\"],\r\n      TRUE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      FALSE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      BLANK_NODE_LABEL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      ANON: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_LN: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_NS: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      \")\": []\r\n    },\r\n    \"*groupCondition\": {\r\n      \"(\": [\"groupCondition\", \"*groupCondition\"],\r\n      STR: [\"groupCondition\", \"*groupCondition\"],\r\n      LANG: [\"groupCondition\", \"*groupCondition\"],\r\n      LANGMATCHES: [\"groupCondition\", \"*groupCondition\"],\r\n      DATATYPE: [\"groupCondition\", \"*groupCondition\"],\r\n      BOUND: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI: [\"groupCondition\", \"*groupCondition\"],\r\n      URI: [\"groupCondition\", \"*groupCondition\"],\r\n      BNODE: [\"groupCondition\", \"*groupCondition\"],\r\n      RAND: [\"groupCondition\", \"*groupCondition\"],\r\n      ABS: [\"groupCondition\", \"*groupCondition\"],\r\n      CEIL: [\"groupCondition\", \"*groupCondition\"],\r\n      FLOOR: [\"groupCondition\", \"*groupCondition\"],\r\n      ROUND: [\"groupCondition\", \"*groupCondition\"],\r\n      CONCAT: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLEN: [\"groupCondition\", \"*groupCondition\"],\r\n      UCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      LCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      ENCODE_FOR_URI: [\"groupCondition\", \"*groupCondition\"],\r\n      CONTAINS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRSTARTS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRENDS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRBEFORE: [\"groupCondition\", \"*groupCondition\"],\r\n      STRAFTER: [\"groupCondition\", \"*groupCondition\"],\r\n      YEAR: [\"groupCondition\", \"*groupCondition\"],\r\n      MONTH: [\"groupCondition\", \"*groupCondition\"],\r\n      DAY: [\"groupCondition\", \"*groupCondition\"],\r\n      HOURS: [\"groupCondition\", \"*groupCondition\"],\r\n      MINUTES: [\"groupCondition\", \"*groupCondition\"],\r\n      SECONDS: [\"groupCondition\", \"*groupCondition\"],\r\n      TIMEZONE: [\"groupCondition\", \"*groupCondition\"],\r\n      TZ: [\"groupCondition\", \"*groupCondition\"],\r\n      NOW: [\"groupCondition\", \"*groupCondition\"],\r\n      UUID: [\"groupCondition\", \"*groupCondition\"],\r\n      STRUUID: [\"groupCondition\", \"*groupCondition\"],\r\n      MD5: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA1: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA256: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA384: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA512: [\"groupCondition\", \"*groupCondition\"],\r\n      COALESCE: [\"groupCondition\", \"*groupCondition\"],\r\n      IF: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLANG: [\"groupCondition\", \"*groupCondition\"],\r\n      STRDT: [\"groupCondition\", \"*groupCondition\"],\r\n      SAMETERM: [\"groupCondition\", \"*groupCondition\"],\r\n      ISIRI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISURI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISBLANK: [\"groupCondition\", \"*groupCondition\"],\r\n      ISLITERAL: [\"groupCondition\", \"*groupCondition\"],\r\n      ISNUMERIC: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR1: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR2: [\"groupCondition\", \"*groupCondition\"],\r\n      SUBSTR: [\"groupCondition\", \"*groupCondition\"],\r\n      REPLACE: [\"groupCondition\", \"*groupCondition\"],\r\n      REGEX: [\"groupCondition\", \"*groupCondition\"],\r\n      EXISTS: [\"groupCondition\", \"*groupCondition\"],\r\n      NOT: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI_REF: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_LN: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_NS: [\"groupCondition\", \"*groupCondition\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"*havingCondition\": {\r\n      \"(\": [\"havingCondition\", \"*havingCondition\"],\r\n      STR: [\"havingCondition\", \"*havingCondition\"],\r\n      LANG: [\"havingCondition\", \"*havingCondition\"],\r\n      LANGMATCHES: [\"havingCondition\", \"*havingCondition\"],\r\n      DATATYPE: [\"havingCondition\", \"*havingCondition\"],\r\n      BOUND: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI: [\"havingCondition\", \"*havingCondition\"],\r\n      URI: [\"havingCondition\", \"*havingCondition\"],\r\n      BNODE: [\"havingCondition\", \"*havingCondition\"],\r\n      RAND: [\"havingCondition\", \"*havingCondition\"],\r\n      ABS: [\"havingCondition\", \"*havingCondition\"],\r\n      CEIL: [\"havingCondition\", \"*havingCondition\"],\r\n      FLOOR: [\"havingCondition\", \"*havingCondition\"],\r\n      ROUND: [\"havingCondition\", \"*havingCondition\"],\r\n      CONCAT: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLEN: [\"havingCondition\", \"*havingCondition\"],\r\n      UCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      LCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      ENCODE_FOR_URI: [\"havingCondition\", \"*havingCondition\"],\r\n      CONTAINS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRSTARTS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRENDS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRBEFORE: [\"havingCondition\", \"*havingCondition\"],\r\n      STRAFTER: [\"havingCondition\", \"*havingCondition\"],\r\n      YEAR: [\"havingCondition\", \"*havingCondition\"],\r\n      MONTH: [\"havingCondition\", \"*havingCondition\"],\r\n      DAY: [\"havingCondition\", \"*havingCondition\"],\r\n      HOURS: [\"havingCondition\", \"*havingCondition\"],\r\n      MINUTES: [\"havingCondition\", \"*havingCondition\"],\r\n      SECONDS: [\"havingCondition\", \"*havingCondition\"],\r\n      TIMEZONE: [\"havingCondition\", \"*havingCondition\"],\r\n      TZ: [\"havingCondition\", \"*havingCondition\"],\r\n      NOW: [\"havingCondition\", \"*havingCondition\"],\r\n      UUID: [\"havingCondition\", \"*havingCondition\"],\r\n      STRUUID: [\"havingCondition\", \"*havingCondition\"],\r\n      MD5: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA1: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA256: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA384: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA512: [\"havingCondition\", \"*havingCondition\"],\r\n      COALESCE: [\"havingCondition\", \"*havingCondition\"],\r\n      IF: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLANG: [\"havingCondition\", \"*havingCondition\"],\r\n      STRDT: [\"havingCondition\", \"*havingCondition\"],\r\n      SAMETERM: [\"havingCondition\", \"*havingCondition\"],\r\n      ISIRI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISURI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISBLANK: [\"havingCondition\", \"*havingCondition\"],\r\n      ISLITERAL: [\"havingCondition\", \"*havingCondition\"],\r\n      ISNUMERIC: [\"havingCondition\", \"*havingCondition\"],\r\n      SUBSTR: [\"havingCondition\", \"*havingCondition\"],\r\n      REPLACE: [\"havingCondition\", \"*havingCondition\"],\r\n      REGEX: [\"havingCondition\", \"*havingCondition\"],\r\n      EXISTS: [\"havingCondition\", \"*havingCondition\"],\r\n      NOT: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI_REF: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_LN: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_NS: [\"havingCondition\", \"*havingCondition\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"*or([[ (,*dataBlockValue,)],NIL])\": {\r\n      \"(\": [\"or([[ (,*dataBlockValue,)],NIL])\", \"*or([[ (,*dataBlockValue,)],NIL])\"],\r\n      NIL: [\"or([[ (,*dataBlockValue,)],NIL])\", \"*or([[ (,*dataBlockValue,)],NIL])\"],\r\n      \"}\": []\r\n    },\r\n    \"*or([[*,unaryExpression],[/,unaryExpression]])\": {\r\n      \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      \";\": []\r\n    },\r\n    \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\": {\r\n      \"+\": [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"-\": [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_POSITIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \";\": []\r\n    },\r\n    \"*or([baseDecl,prefixDecl])\": {\r\n      BASE: [\"or([baseDecl,prefixDecl])\", \"*or([baseDecl,prefixDecl])\"],\r\n      PREFIX: [\"or([baseDecl,prefixDecl])\", \"*or([baseDecl,prefixDecl])\"],\r\n      $: [],\r\n      CONSTRUCT: [],\r\n      DESCRIBE: [],\r\n      ASK: [],\r\n      INSERT: [],\r\n      DELETE: [],\r\n      SELECT: [],\r\n      LOAD: [],\r\n      CLEAR: [],\r\n      DROP: [],\r\n      ADD: [],\r\n      MOVE: [],\r\n      COPY: [],\r\n      CREATE: [],\r\n      WITH: []\r\n    },\r\n    \"*or([var,[ (,expression,AS,var,)]])\": {\r\n      \"(\": [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR1: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR2: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      WHERE: [],\r\n      \"{\": [],\r\n      FROM: []\r\n    },\r\n    \"*orderCondition\": {\r\n      ASC: [\"orderCondition\", \"*orderCondition\"],\r\n      DESC: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR1: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR2: [\"orderCondition\", \"*orderCondition\"],\r\n      \"(\": [\"orderCondition\", \"*orderCondition\"],\r\n      STR: [\"orderCondition\", \"*orderCondition\"],\r\n      LANG: [\"orderCondition\", \"*orderCondition\"],\r\n      LANGMATCHES: [\"orderCondition\", \"*orderCondition\"],\r\n      DATATYPE: [\"orderCondition\", \"*orderCondition\"],\r\n      BOUND: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI: [\"orderCondition\", \"*orderCondition\"],\r\n      URI: [\"orderCondition\", \"*orderCondition\"],\r\n      BNODE: [\"orderCondition\", \"*orderCondition\"],\r\n      RAND: [\"orderCondition\", \"*orderCondition\"],\r\n      ABS: [\"orderCondition\", \"*orderCondition\"],\r\n      CEIL: [\"orderCondition\", \"*orderCondition\"],\r\n      FLOOR: [\"orderCondition\", \"*orderCondition\"],\r\n      ROUND: [\"orderCondition\", \"*orderCondition\"],\r\n      CONCAT: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLEN: [\"orderCondition\", \"*orderCondition\"],\r\n      UCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      LCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      ENCODE_FOR_URI: [\"orderCondition\", \"*orderCondition\"],\r\n      CONTAINS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRSTARTS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRENDS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRBEFORE: [\"orderCondition\", \"*orderCondition\"],\r\n      STRAFTER: [\"orderCondition\", \"*orderCondition\"],\r\n      YEAR: [\"orderCondition\", \"*orderCondition\"],\r\n      MONTH: [\"orderCondition\", \"*orderCondition\"],\r\n      DAY: [\"orderCondition\", \"*orderCondition\"],\r\n      HOURS: [\"orderCondition\", \"*orderCondition\"],\r\n      MINUTES: [\"orderCondition\", \"*orderCondition\"],\r\n      SECONDS: [\"orderCondition\", \"*orderCondition\"],\r\n      TIMEZONE: [\"orderCondition\", \"*orderCondition\"],\r\n      TZ: [\"orderCondition\", \"*orderCondition\"],\r\n      NOW: [\"orderCondition\", \"*orderCondition\"],\r\n      UUID: [\"orderCondition\", \"*orderCondition\"],\r\n      STRUUID: [\"orderCondition\", \"*orderCondition\"],\r\n      MD5: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA1: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA256: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA384: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA512: [\"orderCondition\", \"*orderCondition\"],\r\n      COALESCE: [\"orderCondition\", \"*orderCondition\"],\r\n      IF: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLANG: [\"orderCondition\", \"*orderCondition\"],\r\n      STRDT: [\"orderCondition\", \"*orderCondition\"],\r\n      SAMETERM: [\"orderCondition\", \"*orderCondition\"],\r\n      ISIRI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISURI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISBLANK: [\"orderCondition\", \"*orderCondition\"],\r\n      ISLITERAL: [\"orderCondition\", \"*orderCondition\"],\r\n      ISNUMERIC: [\"orderCondition\", \"*orderCondition\"],\r\n      SUBSTR: [\"orderCondition\", \"*orderCondition\"],\r\n      REPLACE: [\"orderCondition\", \"*orderCondition\"],\r\n      REGEX: [\"orderCondition\", \"*orderCondition\"],\r\n      EXISTS: [\"orderCondition\", \"*orderCondition\"],\r\n      NOT: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI_REF: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_LN: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_NS: [\"orderCondition\", \"*orderCondition\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"*usingClause\": {\r\n      USING: [\"usingClause\", \"*usingClause\"],\r\n      WHERE: []\r\n    },\r\n    \"*var\": {\r\n      VAR1: [\"var\", \"*var\"],\r\n      VAR2: [\"var\", \"*var\"],\r\n      \")\": []\r\n    },\r\n    \"*varOrIRIref\": {\r\n      VAR1: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      VAR2: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      IRI_REF: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_LN: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_NS: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      GROUP: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      WHERE: [],\r\n      \"{\": [],\r\n      FROM: [],\r\n      VALUES: [],\r\n      $: []\r\n    },\r\n    \"+graphNode\": {\r\n      \"(\": [\"graphNode\", \"*graphNode\"],\r\n      \"[\": [\"graphNode\", \"*graphNode\"],\r\n      VAR1: [\"graphNode\", \"*graphNode\"],\r\n      VAR2: [\"graphNode\", \"*graphNode\"],\r\n      NIL: [\"graphNode\", \"*graphNode\"],\r\n      IRI_REF: [\"graphNode\", \"*graphNode\"],\r\n      TRUE: [\"graphNode\", \"*graphNode\"],\r\n      FALSE: [\"graphNode\", \"*graphNode\"],\r\n      BLANK_NODE_LABEL: [\"graphNode\", \"*graphNode\"],\r\n      ANON: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_LN: [\"graphNode\", \"*graphNode\"],\r\n      PNAME_NS: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL2: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG1: [\"graphNode\", \"*graphNode\"],\r\n      STRING_LITERAL_LONG2: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_POSITIVE: [\"graphNode\", \"*graphNode\"],\r\n      INTEGER_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DECIMAL_NEGATIVE: [\"graphNode\", \"*graphNode\"],\r\n      DOUBLE_NEGATIVE: [\"graphNode\", \"*graphNode\"]\r\n    },\r\n    \"+graphNodePath\": {\r\n      \"(\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      \"[\": [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      VAR2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      NIL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      IRI_REF: [\"graphNodePath\", \"*graphNodePath\"],\r\n      TRUE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      FALSE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      BLANK_NODE_LABEL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      ANON: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_LN: [\"graphNodePath\", \"*graphNodePath\"],\r\n      PNAME_NS: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG1: [\"graphNodePath\", \"*graphNodePath\"],\r\n      STRING_LITERAL_LONG2: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_POSITIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      INTEGER_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DECIMAL_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"],\r\n      DOUBLE_NEGATIVE: [\"graphNodePath\", \"*graphNodePath\"]\r\n    },\r\n    \"+groupCondition\": {\r\n      \"(\": [\"groupCondition\", \"*groupCondition\"],\r\n      STR: [\"groupCondition\", \"*groupCondition\"],\r\n      LANG: [\"groupCondition\", \"*groupCondition\"],\r\n      LANGMATCHES: [\"groupCondition\", \"*groupCondition\"],\r\n      DATATYPE: [\"groupCondition\", \"*groupCondition\"],\r\n      BOUND: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI: [\"groupCondition\", \"*groupCondition\"],\r\n      URI: [\"groupCondition\", \"*groupCondition\"],\r\n      BNODE: [\"groupCondition\", \"*groupCondition\"],\r\n      RAND: [\"groupCondition\", \"*groupCondition\"],\r\n      ABS: [\"groupCondition\", \"*groupCondition\"],\r\n      CEIL: [\"groupCondition\", \"*groupCondition\"],\r\n      FLOOR: [\"groupCondition\", \"*groupCondition\"],\r\n      ROUND: [\"groupCondition\", \"*groupCondition\"],\r\n      CONCAT: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLEN: [\"groupCondition\", \"*groupCondition\"],\r\n      UCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      LCASE: [\"groupCondition\", \"*groupCondition\"],\r\n      ENCODE_FOR_URI: [\"groupCondition\", \"*groupCondition\"],\r\n      CONTAINS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRSTARTS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRENDS: [\"groupCondition\", \"*groupCondition\"],\r\n      STRBEFORE: [\"groupCondition\", \"*groupCondition\"],\r\n      STRAFTER: [\"groupCondition\", \"*groupCondition\"],\r\n      YEAR: [\"groupCondition\", \"*groupCondition\"],\r\n      MONTH: [\"groupCondition\", \"*groupCondition\"],\r\n      DAY: [\"groupCondition\", \"*groupCondition\"],\r\n      HOURS: [\"groupCondition\", \"*groupCondition\"],\r\n      MINUTES: [\"groupCondition\", \"*groupCondition\"],\r\n      SECONDS: [\"groupCondition\", \"*groupCondition\"],\r\n      TIMEZONE: [\"groupCondition\", \"*groupCondition\"],\r\n      TZ: [\"groupCondition\", \"*groupCondition\"],\r\n      NOW: [\"groupCondition\", \"*groupCondition\"],\r\n      UUID: [\"groupCondition\", \"*groupCondition\"],\r\n      STRUUID: [\"groupCondition\", \"*groupCondition\"],\r\n      MD5: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA1: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA256: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA384: [\"groupCondition\", \"*groupCondition\"],\r\n      SHA512: [\"groupCondition\", \"*groupCondition\"],\r\n      COALESCE: [\"groupCondition\", \"*groupCondition\"],\r\n      IF: [\"groupCondition\", \"*groupCondition\"],\r\n      STRLANG: [\"groupCondition\", \"*groupCondition\"],\r\n      STRDT: [\"groupCondition\", \"*groupCondition\"],\r\n      SAMETERM: [\"groupCondition\", \"*groupCondition\"],\r\n      ISIRI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISURI: [\"groupCondition\", \"*groupCondition\"],\r\n      ISBLANK: [\"groupCondition\", \"*groupCondition\"],\r\n      ISLITERAL: [\"groupCondition\", \"*groupCondition\"],\r\n      ISNUMERIC: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR1: [\"groupCondition\", \"*groupCondition\"],\r\n      VAR2: [\"groupCondition\", \"*groupCondition\"],\r\n      SUBSTR: [\"groupCondition\", \"*groupCondition\"],\r\n      REPLACE: [\"groupCondition\", \"*groupCondition\"],\r\n      REGEX: [\"groupCondition\", \"*groupCondition\"],\r\n      EXISTS: [\"groupCondition\", \"*groupCondition\"],\r\n      NOT: [\"groupCondition\", \"*groupCondition\"],\r\n      IRI_REF: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_LN: [\"groupCondition\", \"*groupCondition\"],\r\n      PNAME_NS: [\"groupCondition\", \"*groupCondition\"]\r\n    },\r\n    \"+havingCondition\": {\r\n      \"(\": [\"havingCondition\", \"*havingCondition\"],\r\n      STR: [\"havingCondition\", \"*havingCondition\"],\r\n      LANG: [\"havingCondition\", \"*havingCondition\"],\r\n      LANGMATCHES: [\"havingCondition\", \"*havingCondition\"],\r\n      DATATYPE: [\"havingCondition\", \"*havingCondition\"],\r\n      BOUND: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI: [\"havingCondition\", \"*havingCondition\"],\r\n      URI: [\"havingCondition\", \"*havingCondition\"],\r\n      BNODE: [\"havingCondition\", \"*havingCondition\"],\r\n      RAND: [\"havingCondition\", \"*havingCondition\"],\r\n      ABS: [\"havingCondition\", \"*havingCondition\"],\r\n      CEIL: [\"havingCondition\", \"*havingCondition\"],\r\n      FLOOR: [\"havingCondition\", \"*havingCondition\"],\r\n      ROUND: [\"havingCondition\", \"*havingCondition\"],\r\n      CONCAT: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLEN: [\"havingCondition\", \"*havingCondition\"],\r\n      UCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      LCASE: [\"havingCondition\", \"*havingCondition\"],\r\n      ENCODE_FOR_URI: [\"havingCondition\", \"*havingCondition\"],\r\n      CONTAINS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRSTARTS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRENDS: [\"havingCondition\", \"*havingCondition\"],\r\n      STRBEFORE: [\"havingCondition\", \"*havingCondition\"],\r\n      STRAFTER: [\"havingCondition\", \"*havingCondition\"],\r\n      YEAR: [\"havingCondition\", \"*havingCondition\"],\r\n      MONTH: [\"havingCondition\", \"*havingCondition\"],\r\n      DAY: [\"havingCondition\", \"*havingCondition\"],\r\n      HOURS: [\"havingCondition\", \"*havingCondition\"],\r\n      MINUTES: [\"havingCondition\", \"*havingCondition\"],\r\n      SECONDS: [\"havingCondition\", \"*havingCondition\"],\r\n      TIMEZONE: [\"havingCondition\", \"*havingCondition\"],\r\n      TZ: [\"havingCondition\", \"*havingCondition\"],\r\n      NOW: [\"havingCondition\", \"*havingCondition\"],\r\n      UUID: [\"havingCondition\", \"*havingCondition\"],\r\n      STRUUID: [\"havingCondition\", \"*havingCondition\"],\r\n      MD5: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA1: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA256: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA384: [\"havingCondition\", \"*havingCondition\"],\r\n      SHA512: [\"havingCondition\", \"*havingCondition\"],\r\n      COALESCE: [\"havingCondition\", \"*havingCondition\"],\r\n      IF: [\"havingCondition\", \"*havingCondition\"],\r\n      STRLANG: [\"havingCondition\", \"*havingCondition\"],\r\n      STRDT: [\"havingCondition\", \"*havingCondition\"],\r\n      SAMETERM: [\"havingCondition\", \"*havingCondition\"],\r\n      ISIRI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISURI: [\"havingCondition\", \"*havingCondition\"],\r\n      ISBLANK: [\"havingCondition\", \"*havingCondition\"],\r\n      ISLITERAL: [\"havingCondition\", \"*havingCondition\"],\r\n      ISNUMERIC: [\"havingCondition\", \"*havingCondition\"],\r\n      SUBSTR: [\"havingCondition\", \"*havingCondition\"],\r\n      REPLACE: [\"havingCondition\", \"*havingCondition\"],\r\n      REGEX: [\"havingCondition\", \"*havingCondition\"],\r\n      EXISTS: [\"havingCondition\", \"*havingCondition\"],\r\n      NOT: [\"havingCondition\", \"*havingCondition\"],\r\n      IRI_REF: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_LN: [\"havingCondition\", \"*havingCondition\"],\r\n      PNAME_NS: [\"havingCondition\", \"*havingCondition\"]\r\n    },\r\n    \"+or([var,[ (,expression,AS,var,)]])\": {\r\n      \"(\": [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR1: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR2: [\"or([var,[ (,expression,AS,var,)]])\", \"*or([var,[ (,expression,AS,var,)]])\"]\r\n    },\r\n    \"+orderCondition\": {\r\n      ASC: [\"orderCondition\", \"*orderCondition\"],\r\n      DESC: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR1: [\"orderCondition\", \"*orderCondition\"],\r\n      VAR2: [\"orderCondition\", \"*orderCondition\"],\r\n      \"(\": [\"orderCondition\", \"*orderCondition\"],\r\n      STR: [\"orderCondition\", \"*orderCondition\"],\r\n      LANG: [\"orderCondition\", \"*orderCondition\"],\r\n      LANGMATCHES: [\"orderCondition\", \"*orderCondition\"],\r\n      DATATYPE: [\"orderCondition\", \"*orderCondition\"],\r\n      BOUND: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI: [\"orderCondition\", \"*orderCondition\"],\r\n      URI: [\"orderCondition\", \"*orderCondition\"],\r\n      BNODE: [\"orderCondition\", \"*orderCondition\"],\r\n      RAND: [\"orderCondition\", \"*orderCondition\"],\r\n      ABS: [\"orderCondition\", \"*orderCondition\"],\r\n      CEIL: [\"orderCondition\", \"*orderCondition\"],\r\n      FLOOR: [\"orderCondition\", \"*orderCondition\"],\r\n      ROUND: [\"orderCondition\", \"*orderCondition\"],\r\n      CONCAT: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLEN: [\"orderCondition\", \"*orderCondition\"],\r\n      UCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      LCASE: [\"orderCondition\", \"*orderCondition\"],\r\n      ENCODE_FOR_URI: [\"orderCondition\", \"*orderCondition\"],\r\n      CONTAINS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRSTARTS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRENDS: [\"orderCondition\", \"*orderCondition\"],\r\n      STRBEFORE: [\"orderCondition\", \"*orderCondition\"],\r\n      STRAFTER: [\"orderCondition\", \"*orderCondition\"],\r\n      YEAR: [\"orderCondition\", \"*orderCondition\"],\r\n      MONTH: [\"orderCondition\", \"*orderCondition\"],\r\n      DAY: [\"orderCondition\", \"*orderCondition\"],\r\n      HOURS: [\"orderCondition\", \"*orderCondition\"],\r\n      MINUTES: [\"orderCondition\", \"*orderCondition\"],\r\n      SECONDS: [\"orderCondition\", \"*orderCondition\"],\r\n      TIMEZONE: [\"orderCondition\", \"*orderCondition\"],\r\n      TZ: [\"orderCondition\", \"*orderCondition\"],\r\n      NOW: [\"orderCondition\", \"*orderCondition\"],\r\n      UUID: [\"orderCondition\", \"*orderCondition\"],\r\n      STRUUID: [\"orderCondition\", \"*orderCondition\"],\r\n      MD5: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA1: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA256: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA384: [\"orderCondition\", \"*orderCondition\"],\r\n      SHA512: [\"orderCondition\", \"*orderCondition\"],\r\n      COALESCE: [\"orderCondition\", \"*orderCondition\"],\r\n      IF: [\"orderCondition\", \"*orderCondition\"],\r\n      STRLANG: [\"orderCondition\", \"*orderCondition\"],\r\n      STRDT: [\"orderCondition\", \"*orderCondition\"],\r\n      SAMETERM: [\"orderCondition\", \"*orderCondition\"],\r\n      ISIRI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISURI: [\"orderCondition\", \"*orderCondition\"],\r\n      ISBLANK: [\"orderCondition\", \"*orderCondition\"],\r\n      ISLITERAL: [\"orderCondition\", \"*orderCondition\"],\r\n      ISNUMERIC: [\"orderCondition\", \"*orderCondition\"],\r\n      SUBSTR: [\"orderCondition\", \"*orderCondition\"],\r\n      REPLACE: [\"orderCondition\", \"*orderCondition\"],\r\n      REGEX: [\"orderCondition\", \"*orderCondition\"],\r\n      EXISTS: [\"orderCondition\", \"*orderCondition\"],\r\n      NOT: [\"orderCondition\", \"*orderCondition\"],\r\n      IRI_REF: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_LN: [\"orderCondition\", \"*orderCondition\"],\r\n      PNAME_NS: [\"orderCondition\", \"*orderCondition\"]\r\n    },\r\n    \"+varOrIRIref\": {\r\n      VAR1: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      VAR2: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      IRI_REF: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_LN: [\"varOrIRIref\", \"*varOrIRIref\"],\r\n      PNAME_NS: [\"varOrIRIref\", \"*varOrIRIref\"]\r\n    },\r\n    \"?.\": {\r\n      \".\": [\".\"],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?DISTINCT\": {\r\n      DISTINCT: [\"DISTINCT\"],\r\n      \"!\": [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      \"(\": [],\r\n      STR: [],\r\n      LANG: [],\r\n      LANGMATCHES: [],\r\n      DATATYPE: [],\r\n      BOUND: [],\r\n      IRI: [],\r\n      URI: [],\r\n      BNODE: [],\r\n      RAND: [],\r\n      ABS: [],\r\n      CEIL: [],\r\n      FLOOR: [],\r\n      ROUND: [],\r\n      CONCAT: [],\r\n      STRLEN: [],\r\n      UCASE: [],\r\n      LCASE: [],\r\n      ENCODE_FOR_URI: [],\r\n      CONTAINS: [],\r\n      STRSTARTS: [],\r\n      STRENDS: [],\r\n      STRBEFORE: [],\r\n      STRAFTER: [],\r\n      YEAR: [],\r\n      MONTH: [],\r\n      DAY: [],\r\n      HOURS: [],\r\n      MINUTES: [],\r\n      SECONDS: [],\r\n      TIMEZONE: [],\r\n      TZ: [],\r\n      NOW: [],\r\n      UUID: [],\r\n      STRUUID: [],\r\n      MD5: [],\r\n      SHA1: [],\r\n      SHA256: [],\r\n      SHA384: [],\r\n      SHA512: [],\r\n      COALESCE: [],\r\n      IF: [],\r\n      STRLANG: [],\r\n      STRDT: [],\r\n      SAMETERM: [],\r\n      ISIRI: [],\r\n      ISURI: [],\r\n      ISBLANK: [],\r\n      ISLITERAL: [],\r\n      ISNUMERIC: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      COUNT: [],\r\n      SUM: [],\r\n      MIN: [],\r\n      MAX: [],\r\n      AVG: [],\r\n      SAMPLE: [],\r\n      GROUP_CONCAT: [],\r\n      SUBSTR: [],\r\n      REPLACE: [],\r\n      REGEX: [],\r\n      EXISTS: [],\r\n      NOT: [],\r\n      IRI_REF: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      \"*\": []\r\n    },\r\n    \"?GRAPH\": {\r\n      GRAPH: [\"GRAPH\"],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?SILENT\": {\r\n      SILENT: [\"SILENT\"],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?SILENT_1\": {\r\n      SILENT: [\"SILENT\"],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?SILENT_2\": {\r\n      SILENT: [\"SILENT\"],\r\n      GRAPH: [],\r\n      DEFAULT: [],\r\n      NAMED: [],\r\n      ALL: []\r\n    },\r\n    \"?SILENT_3\": {\r\n      SILENT: [\"SILENT\"],\r\n      GRAPH: []\r\n    },\r\n    \"?SILENT_4\": {\r\n      SILENT: [\"SILENT\"],\r\n      DEFAULT: [],\r\n      GRAPH: [],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: []\r\n    },\r\n    \"?WHERE\": {\r\n      WHERE: [\"WHERE\"],\r\n      \"{\": []\r\n    },\r\n    \"?[,,expression]\": {\r\n      \",\": [\"[,,expression]\"],\r\n      \")\": []\r\n    },\r\n    \"?[.,?constructTriples]\": {\r\n      \".\": [\"[.,?constructTriples]\"],\r\n      \"}\": []\r\n    },\r\n    \"?[.,?triplesBlock]\": {\r\n      \".\": [\"[.,?triplesBlock]\"],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?[.,?triplesTemplate]\": {\r\n      \".\": [\"[.,?triplesTemplate]\"],\r\n      \"}\": [],\r\n      GRAPH: []\r\n    },\r\n    \"?[;,SEPARATOR,=,string]\": {\r\n      \";\": [\"[;,SEPARATOR,=,string]\"],\r\n      \")\": []\r\n    },\r\n    \"?[;,update]\": {\r\n      \";\": [\"[;,update]\"],\r\n      $: []\r\n    },\r\n    \"?[AS,var]\": {\r\n      AS: [\"[AS,var]\"],\r\n      \")\": []\r\n    },\r\n    \"?[INTO,graphRef]\": {\r\n      INTO: [\"[INTO,graphRef]\"],\r\n      \";\": [],\r\n      $: []\r\n    },\r\n    \"?[or([verbPath,verbSimple]),objectList]\": {\r\n      VAR1: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      VAR2: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \"^\": [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      a: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \"!\": [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \"(\": [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      IRI_REF: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      PNAME_LN: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      PNAME_NS: [\"[or([verbPath,verbSimple]),objectList]\"],\r\n      \";\": [],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\": {\r\n      a: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      \"^\": [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      IRI_REF: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      PNAME_LN: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      PNAME_NS: [\"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\"],\r\n      \")\": []\r\n    },\r\n    \"?[update1,?[;,update]]\": {\r\n      INSERT: [\"[update1,?[;,update]]\"],\r\n      DELETE: [\"[update1,?[;,update]]\"],\r\n      LOAD: [\"[update1,?[;,update]]\"],\r\n      CLEAR: [\"[update1,?[;,update]]\"],\r\n      DROP: [\"[update1,?[;,update]]\"],\r\n      ADD: [\"[update1,?[;,update]]\"],\r\n      MOVE: [\"[update1,?[;,update]]\"],\r\n      COPY: [\"[update1,?[;,update]]\"],\r\n      CREATE: [\"[update1,?[;,update]]\"],\r\n      WITH: [\"[update1,?[;,update]]\"],\r\n      $: []\r\n    },\r\n    \"?[verb,objectList]\": {\r\n      a: [\"[verb,objectList]\"],\r\n      VAR1: [\"[verb,objectList]\"],\r\n      VAR2: [\"[verb,objectList]\"],\r\n      IRI_REF: [\"[verb,objectList]\"],\r\n      PNAME_LN: [\"[verb,objectList]\"],\r\n      PNAME_NS: [\"[verb,objectList]\"],\r\n      \";\": [],\r\n      \".\": [],\r\n      \"]\": [],\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"?argList\": {\r\n      NIL: [\"argList\"],\r\n      \"(\": [\"argList\"],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      \"*\": [],\r\n      \"/\": [],\r\n      \";\": []\r\n    },\r\n    \"?constructTriples\": {\r\n      VAR1: [\"constructTriples\"],\r\n      VAR2: [\"constructTriples\"],\r\n      NIL: [\"constructTriples\"],\r\n      \"(\": [\"constructTriples\"],\r\n      \"[\": [\"constructTriples\"],\r\n      IRI_REF: [\"constructTriples\"],\r\n      TRUE: [\"constructTriples\"],\r\n      FALSE: [\"constructTriples\"],\r\n      BLANK_NODE_LABEL: [\"constructTriples\"],\r\n      ANON: [\"constructTriples\"],\r\n      PNAME_LN: [\"constructTriples\"],\r\n      PNAME_NS: [\"constructTriples\"],\r\n      STRING_LITERAL1: [\"constructTriples\"],\r\n      STRING_LITERAL2: [\"constructTriples\"],\r\n      STRING_LITERAL_LONG1: [\"constructTriples\"],\r\n      STRING_LITERAL_LONG2: [\"constructTriples\"],\r\n      INTEGER: [\"constructTriples\"],\r\n      DECIMAL: [\"constructTriples\"],\r\n      DOUBLE: [\"constructTriples\"],\r\n      INTEGER_POSITIVE: [\"constructTriples\"],\r\n      DECIMAL_POSITIVE: [\"constructTriples\"],\r\n      DOUBLE_POSITIVE: [\"constructTriples\"],\r\n      INTEGER_NEGATIVE: [\"constructTriples\"],\r\n      DECIMAL_NEGATIVE: [\"constructTriples\"],\r\n      DOUBLE_NEGATIVE: [\"constructTriples\"],\r\n      \"}\": []\r\n    },\r\n    \"?groupClause\": {\r\n      GROUP: [\"groupClause\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?havingClause\": {\r\n      HAVING: [\"havingClause\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      ORDER: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?insertClause\": {\r\n      INSERT: [\"insertClause\"],\r\n      WHERE: [],\r\n      USING: []\r\n    },\r\n    \"?limitClause\": {\r\n      LIMIT: [\"limitClause\"],\r\n      VALUES: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?limitOffsetClauses\": {\r\n      LIMIT: [\"limitOffsetClauses\"],\r\n      OFFSET: [\"limitOffsetClauses\"],\r\n      VALUES: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?offsetClause\": {\r\n      OFFSET: [\"offsetClause\"],\r\n      VALUES: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?or([DISTINCT,REDUCED])\": {\r\n      DISTINCT: [\"or([DISTINCT,REDUCED])\"],\r\n      REDUCED: [\"or([DISTINCT,REDUCED])\"],\r\n      \"*\": [],\r\n      \"(\": [],\r\n      VAR1: [],\r\n      VAR2: []\r\n    },\r\n    \"?or([LANGTAG,[^^,iriRef]])\": {\r\n      LANGTAG: [\"or([LANGTAG,[^^,iriRef]])\"],\r\n      \"^^\": [\"or([LANGTAG,[^^,iriRef]])\"],\r\n      UNDEF: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      a: [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      \"^\": [],\r\n      \"!\": [],\r\n      \"(\": [],\r\n      \".\": [],\r\n      \";\": [],\r\n      \",\": [],\r\n      AS: [],\r\n      \")\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      \"*\": [],\r\n      \"/\": [],\r\n      \"}\": [],\r\n      \"[\": [],\r\n      NIL: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      \"]\": [],\r\n      GRAPH: [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: []\r\n    },\r\n    \"?or([[*,unaryExpression],[/,unaryExpression]])\": {\r\n      \"*\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"/\": [\"or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"+\": [],\r\n      \"-\": [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: [],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \"=\": [],\r\n      \"!=\": [],\r\n      \"<\": [],\r\n      \">\": [],\r\n      \"<=\": [],\r\n      \">=\": [],\r\n      IN: [],\r\n      NOT: [],\r\n      \";\": []\r\n    },\r\n    \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\": {\r\n      \"=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"!=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"<\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \">\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"<=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \">=\": [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IN: [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      NOT: [\r\n        \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      AS: [],\r\n      \")\": [],\r\n      \",\": [],\r\n      \"||\": [],\r\n      \"&&\": [],\r\n      \";\": []\r\n    },\r\n    \"?orderClause\": {\r\n      ORDER: [\"orderClause\"],\r\n      VALUES: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    \"?pathMod\": {\r\n      \"*\": [\"pathMod\"],\r\n      \"?\": [\"pathMod\"],\r\n      \"+\": [\"pathMod\"],\r\n      \"{\": [\"pathMod\"],\r\n      \"|\": [],\r\n      \"/\": [],\r\n      \")\": [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    \"?triplesBlock\": {\r\n      VAR1: [\"triplesBlock\"],\r\n      VAR2: [\"triplesBlock\"],\r\n      NIL: [\"triplesBlock\"],\r\n      \"(\": [\"triplesBlock\"],\r\n      \"[\": [\"triplesBlock\"],\r\n      IRI_REF: [\"triplesBlock\"],\r\n      TRUE: [\"triplesBlock\"],\r\n      FALSE: [\"triplesBlock\"],\r\n      BLANK_NODE_LABEL: [\"triplesBlock\"],\r\n      ANON: [\"triplesBlock\"],\r\n      PNAME_LN: [\"triplesBlock\"],\r\n      PNAME_NS: [\"triplesBlock\"],\r\n      STRING_LITERAL1: [\"triplesBlock\"],\r\n      STRING_LITERAL2: [\"triplesBlock\"],\r\n      STRING_LITERAL_LONG1: [\"triplesBlock\"],\r\n      STRING_LITERAL_LONG2: [\"triplesBlock\"],\r\n      INTEGER: [\"triplesBlock\"],\r\n      DECIMAL: [\"triplesBlock\"],\r\n      DOUBLE: [\"triplesBlock\"],\r\n      INTEGER_POSITIVE: [\"triplesBlock\"],\r\n      DECIMAL_POSITIVE: [\"triplesBlock\"],\r\n      DOUBLE_POSITIVE: [\"triplesBlock\"],\r\n      INTEGER_NEGATIVE: [\"triplesBlock\"],\r\n      DECIMAL_NEGATIVE: [\"triplesBlock\"],\r\n      DOUBLE_NEGATIVE: [\"triplesBlock\"],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    \"?triplesTemplate\": {\r\n      VAR1: [\"triplesTemplate\"],\r\n      VAR2: [\"triplesTemplate\"],\r\n      NIL: [\"triplesTemplate\"],\r\n      \"(\": [\"triplesTemplate\"],\r\n      \"[\": [\"triplesTemplate\"],\r\n      IRI_REF: [\"triplesTemplate\"],\r\n      TRUE: [\"triplesTemplate\"],\r\n      FALSE: [\"triplesTemplate\"],\r\n      BLANK_NODE_LABEL: [\"triplesTemplate\"],\r\n      ANON: [\"triplesTemplate\"],\r\n      PNAME_LN: [\"triplesTemplate\"],\r\n      PNAME_NS: [\"triplesTemplate\"],\r\n      STRING_LITERAL1: [\"triplesTemplate\"],\r\n      STRING_LITERAL2: [\"triplesTemplate\"],\r\n      STRING_LITERAL_LONG1: [\"triplesTemplate\"],\r\n      STRING_LITERAL_LONG2: [\"triplesTemplate\"],\r\n      INTEGER: [\"triplesTemplate\"],\r\n      DECIMAL: [\"triplesTemplate\"],\r\n      DOUBLE: [\"triplesTemplate\"],\r\n      INTEGER_POSITIVE: [\"triplesTemplate\"],\r\n      DECIMAL_POSITIVE: [\"triplesTemplate\"],\r\n      DOUBLE_POSITIVE: [\"triplesTemplate\"],\r\n      INTEGER_NEGATIVE: [\"triplesTemplate\"],\r\n      DECIMAL_NEGATIVE: [\"triplesTemplate\"],\r\n      DOUBLE_NEGATIVE: [\"triplesTemplate\"],\r\n      \"}\": [],\r\n      GRAPH: []\r\n    },\r\n    \"?whereClause\": {\r\n      WHERE: [\"whereClause\"],\r\n      \"{\": [\"whereClause\"],\r\n      ORDER: [],\r\n      HAVING: [],\r\n      GROUP: [],\r\n      LIMIT: [],\r\n      OFFSET: [],\r\n      VALUES: [],\r\n      $: []\r\n    },\r\n    \"[ (,*dataBlockValue,)]\": {\r\n      \"(\": [\"(\", \"*dataBlockValue\", \")\"]\r\n    },\r\n    \"[ (,*var,)]\": {\r\n      \"(\": [\"(\", \"*var\", \")\"]\r\n    },\r\n    \"[ (,expression,)]\": {\r\n      \"(\": [\"(\", \"expression\", \")\"]\r\n    },\r\n    \"[ (,expression,AS,var,)]\": {\r\n      \"(\": [\"(\", \"expression\", \"AS\", \"var\", \")\"]\r\n    },\r\n    \"[!=,numericExpression]\": {\r\n      \"!=\": [\"!=\", \"numericExpression\"]\r\n    },\r\n    \"[&&,valueLogical]\": {\r\n      \"&&\": [\"&&\", \"valueLogical\"]\r\n    },\r\n    \"[*,unaryExpression]\": {\r\n      \"*\": [\"*\", \"unaryExpression\"]\r\n    },\r\n    \"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\": {\r\n      WHERE: [\"*datasetClause\", \"WHERE\", \"{\", \"?triplesTemplate\", \"}\", \"solutionModifier\"],\r\n      FROM: [\"*datasetClause\", \"WHERE\", \"{\", \"?triplesTemplate\", \"}\", \"solutionModifier\"]\r\n    },\r\n    \"[+,multiplicativeExpression]\": {\r\n      \"+\": [\"+\", \"multiplicativeExpression\"]\r\n    },\r\n    \"[,,expression]\": {\r\n      \",\": [\",\", \"expression\"]\r\n    },\r\n    \"[,,integer,}]\": {\r\n      \",\": [\",\", \"integer\", \"}\"]\r\n    },\r\n    \"[,,objectPath]\": {\r\n      \",\": [\",\", \"objectPath\"]\r\n    },\r\n    \"[,,object]\": {\r\n      \",\": [\",\", \"object\"]\r\n    },\r\n    \"[,,or([},[integer,}]])]\": {\r\n      \",\": [\",\", \"or([},[integer,}]])\"]\r\n    },\r\n    \"[-,multiplicativeExpression]\": {\r\n      \"-\": [\"-\", \"multiplicativeExpression\"]\r\n    },\r\n    \"[.,?constructTriples]\": {\r\n      \".\": [\".\", \"?constructTriples\"]\r\n    },\r\n    \"[.,?triplesBlock]\": {\r\n      \".\": [\".\", \"?triplesBlock\"]\r\n    },\r\n    \"[.,?triplesTemplate]\": {\r\n      \".\": [\".\", \"?triplesTemplate\"]\r\n    },\r\n    \"[/,pathEltOrInverse]\": {\r\n      \"/\": [\"/\", \"pathEltOrInverse\"]\r\n    },\r\n    \"[/,unaryExpression]\": {\r\n      \"/\": [\"/\", \"unaryExpression\"]\r\n    },\r\n    \"[;,?[or([verbPath,verbSimple]),objectList]]\": {\r\n      \";\": [\";\", \"?[or([verbPath,verbSimple]),objectList]\"]\r\n    },\r\n    \"[;,?[verb,objectList]]\": {\r\n      \";\": [\";\", \"?[verb,objectList]\"]\r\n    },\r\n    \"[;,SEPARATOR,=,string]\": {\r\n      \";\": [\";\", \"SEPARATOR\", \"=\", \"string\"]\r\n    },\r\n    \"[;,update]\": {\r\n      \";\": [\";\", \"update\"]\r\n    },\r\n    \"[<,numericExpression]\": {\r\n      \"<\": [\"<\", \"numericExpression\"]\r\n    },\r\n    \"[<=,numericExpression]\": {\r\n      \"<=\": [\"<=\", \"numericExpression\"]\r\n    },\r\n    \"[=,numericExpression]\": {\r\n      \"=\": [\"=\", \"numericExpression\"]\r\n    },\r\n    \"[>,numericExpression]\": {\r\n      \">\": [\">\", \"numericExpression\"]\r\n    },\r\n    \"[>=,numericExpression]\": {\r\n      \">=\": [\">=\", \"numericExpression\"]\r\n    },\r\n    \"[AS,var]\": {\r\n      AS: [\"AS\", \"var\"]\r\n    },\r\n    \"[IN,expressionList]\": {\r\n      IN: [\"IN\", \"expressionList\"]\r\n    },\r\n    \"[INTO,graphRef]\": {\r\n      INTO: [\"INTO\", \"graphRef\"]\r\n    },\r\n    \"[NAMED,iriRef]\": {\r\n      NAMED: [\"NAMED\", \"iriRef\"]\r\n    },\r\n    \"[NOT,IN,expressionList]\": {\r\n      NOT: [\"NOT\", \"IN\", \"expressionList\"]\r\n    },\r\n    \"[UNION,groupGraphPattern]\": {\r\n      UNION: [\"UNION\", \"groupGraphPattern\"]\r\n    },\r\n    \"[^^,iriRef]\": {\r\n      \"^^\": [\"^^\", \"iriRef\"]\r\n    },\r\n    \"[constructTemplate,*datasetClause,whereClause,solutionModifier]\": {\r\n      \"{\": [\"constructTemplate\", \"*datasetClause\", \"whereClause\", \"solutionModifier\"]\r\n    },\r\n    \"[deleteClause,?insertClause]\": {\r\n      DELETE: [\"deleteClause\", \"?insertClause\"]\r\n    },\r\n    \"[graphPatternNotTriples,?.,?triplesBlock]\": {\r\n      \"{\": [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      OPTIONAL: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      MINUS: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      GRAPH: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      SERVICE: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      FILTER: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      BIND: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"],\r\n      VALUES: [\"graphPatternNotTriples\", \"?.\", \"?triplesBlock\"]\r\n    },\r\n    \"[integer,or([[,,or([},[integer,}]])],}])]\": {\r\n      INTEGER: [\"integer\", \"or([[,,or([},[integer,}]])],}])\"]\r\n    },\r\n    \"[integer,}]\": {\r\n      INTEGER: [\"integer\", \"}\"]\r\n    },\r\n    \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\": {\r\n      INTEGER_POSITIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"or([numericLiteralPositive,numericLiteralNegative])\",\r\n        \"?or([[*,unaryExpression],[/,unaryExpression]])\"\r\n      ]\r\n    },\r\n    \"[or([verbPath,verbSimple]),objectList]\": {\r\n      VAR1: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      VAR2: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      \"^\": [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      a: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      \"!\": [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      \"(\": [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      IRI_REF: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      PNAME_LN: [\"or([verbPath,verbSimple])\", \"objectList\"],\r\n      PNAME_NS: [\"or([verbPath,verbSimple])\", \"objectList\"]\r\n    },\r\n    \"[pathOneInPropertySet,*[|,pathOneInPropertySet]]\": {\r\n      a: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      \"^\": [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      IRI_REF: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      PNAME_LN: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"],\r\n      PNAME_NS: [\"pathOneInPropertySet\", \"*[|,pathOneInPropertySet]\"]\r\n    },\r\n    \"[quadsNotTriples,?.,?triplesTemplate]\": {\r\n      GRAPH: [\"quadsNotTriples\", \"?.\", \"?triplesTemplate\"]\r\n    },\r\n    \"[update1,?[;,update]]\": {\r\n      INSERT: [\"update1\", \"?[;,update]\"],\r\n      DELETE: [\"update1\", \"?[;,update]\"],\r\n      LOAD: [\"update1\", \"?[;,update]\"],\r\n      CLEAR: [\"update1\", \"?[;,update]\"],\r\n      DROP: [\"update1\", \"?[;,update]\"],\r\n      ADD: [\"update1\", \"?[;,update]\"],\r\n      MOVE: [\"update1\", \"?[;,update]\"],\r\n      COPY: [\"update1\", \"?[;,update]\"],\r\n      CREATE: [\"update1\", \"?[;,update]\"],\r\n      WITH: [\"update1\", \"?[;,update]\"]\r\n    },\r\n    \"[verb,objectList]\": {\r\n      a: [\"verb\", \"objectList\"],\r\n      VAR1: [\"verb\", \"objectList\"],\r\n      VAR2: [\"verb\", \"objectList\"],\r\n      IRI_REF: [\"verb\", \"objectList\"],\r\n      PNAME_LN: [\"verb\", \"objectList\"],\r\n      PNAME_NS: [\"verb\", \"objectList\"]\r\n    },\r\n    \"[|,pathOneInPropertySet]\": {\r\n      \"|\": [\"|\", \"pathOneInPropertySet\"]\r\n    },\r\n    \"[|,pathSequence]\": {\r\n      \"|\": [\"|\", \"pathSequence\"]\r\n    },\r\n    \"[||,conditionalAndExpression]\": {\r\n      \"||\": [\"||\", \"conditionalAndExpression\"]\r\n    },\r\n    add: {\r\n      ADD: [\"ADD\", \"?SILENT_4\", \"graphOrDefault\", \"TO\", \"graphOrDefault\"]\r\n    },\r\n    additiveExpression: {\r\n      \"!\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"+\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"-\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      VAR1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      VAR2: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      \"(\": [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      LANG: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      LANGMATCHES: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DATATYPE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      BOUND: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      IRI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      URI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      BNODE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      RAND: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ABS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      CEIL: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      FLOOR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ROUND: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      CONCAT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRLEN: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      UCASE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      LCASE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ENCODE_FOR_URI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      CONTAINS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRSTARTS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRENDS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRBEFORE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRAFTER: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      YEAR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MONTH: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DAY: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      HOURS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MINUTES: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SECONDS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      TIMEZONE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      TZ: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      NOW: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      UUID: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRUUID: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MD5: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA256: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA384: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SHA512: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      COALESCE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      IF: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRLANG: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRDT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SAMETERM: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISIRI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISURI: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISBLANK: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISLITERAL: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      ISNUMERIC: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      TRUE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      FALSE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      COUNT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SUM: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MIN: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      MAX: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      AVG: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SAMPLE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      GROUP_CONCAT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      SUBSTR: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      REPLACE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      REGEX: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      EXISTS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      NOT: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      IRI_REF: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL2: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL_LONG1: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      STRING_LITERAL_LONG2: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_POSITIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      PNAME_LN: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ],\r\n      PNAME_NS: [\r\n        \"multiplicativeExpression\",\r\n        \"*or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\"\r\n      ]\r\n    },\r\n    aggregate: {\r\n      COUNT: [\"COUNT\", \"(\", \"?DISTINCT\", \"or([*,expression])\", \")\"],\r\n      SUM: [\"SUM\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      MIN: [\"MIN\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      MAX: [\"MAX\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      AVG: [\"AVG\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      SAMPLE: [\"SAMPLE\", \"(\", \"?DISTINCT\", \"expression\", \")\"],\r\n      GROUP_CONCAT: [\"GROUP_CONCAT\", \"(\", \"?DISTINCT\", \"expression\", \"?[;,SEPARATOR,=,string]\", \")\"]\r\n    },\r\n    allowBnodes: {\r\n      \"}\": []\r\n    },\r\n    allowVars: {\r\n      \"}\": []\r\n    },\r\n    argList: {\r\n      NIL: [\"NIL\"],\r\n      \"(\": [\"(\", \"?DISTINCT\", \"expression\", \"*[,,expression]\", \")\"]\r\n    },\r\n    askQuery: {\r\n      ASK: [\"ASK\", \"*datasetClause\", \"whereClause\", \"solutionModifier\"]\r\n    },\r\n    baseDecl: {\r\n      BASE: [\"BASE\", \"IRI_REF\"]\r\n    },\r\n    bind: {\r\n      BIND: [\"BIND\", \"(\", \"expression\", \"AS\", \"var\", \")\"]\r\n    },\r\n    blankNode: {\r\n      BLANK_NODE_LABEL: [\"BLANK_NODE_LABEL\"],\r\n      ANON: [\"ANON\"]\r\n    },\r\n    blankNodePropertyList: {\r\n      \"[\": [\"[\", \"propertyListNotEmpty\", \"]\"]\r\n    },\r\n    blankNodePropertyListPath: {\r\n      \"[\": [\"[\", \"propertyListPathNotEmpty\", \"]\"]\r\n    },\r\n    booleanLiteral: {\r\n      TRUE: [\"TRUE\"],\r\n      FALSE: [\"FALSE\"]\r\n    },\r\n    brackettedExpression: {\r\n      \"(\": [\"(\", \"expression\", \")\"]\r\n    },\r\n    builtInCall: {\r\n      STR: [\"STR\", \"(\", \"expression\", \")\"],\r\n      LANG: [\"LANG\", \"(\", \"expression\", \")\"],\r\n      LANGMATCHES: [\"LANGMATCHES\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      DATATYPE: [\"DATATYPE\", \"(\", \"expression\", \")\"],\r\n      BOUND: [\"BOUND\", \"(\", \"var\", \")\"],\r\n      IRI: [\"IRI\", \"(\", \"expression\", \")\"],\r\n      URI: [\"URI\", \"(\", \"expression\", \")\"],\r\n      BNODE: [\"BNODE\", \"or([[ (,expression,)],NIL])\"],\r\n      RAND: [\"RAND\", \"NIL\"],\r\n      ABS: [\"ABS\", \"(\", \"expression\", \")\"],\r\n      CEIL: [\"CEIL\", \"(\", \"expression\", \")\"],\r\n      FLOOR: [\"FLOOR\", \"(\", \"expression\", \")\"],\r\n      ROUND: [\"ROUND\", \"(\", \"expression\", \")\"],\r\n      CONCAT: [\"CONCAT\", \"expressionList\"],\r\n      SUBSTR: [\"substringExpression\"],\r\n      STRLEN: [\"STRLEN\", \"(\", \"expression\", \")\"],\r\n      REPLACE: [\"strReplaceExpression\"],\r\n      UCASE: [\"UCASE\", \"(\", \"expression\", \")\"],\r\n      LCASE: [\"LCASE\", \"(\", \"expression\", \")\"],\r\n      ENCODE_FOR_URI: [\"ENCODE_FOR_URI\", \"(\", \"expression\", \")\"],\r\n      CONTAINS: [\"CONTAINS\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRSTARTS: [\"STRSTARTS\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRENDS: [\"STRENDS\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRBEFORE: [\"STRBEFORE\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRAFTER: [\"STRAFTER\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      YEAR: [\"YEAR\", \"(\", \"expression\", \")\"],\r\n      MONTH: [\"MONTH\", \"(\", \"expression\", \")\"],\r\n      DAY: [\"DAY\", \"(\", \"expression\", \")\"],\r\n      HOURS: [\"HOURS\", \"(\", \"expression\", \")\"],\r\n      MINUTES: [\"MINUTES\", \"(\", \"expression\", \")\"],\r\n      SECONDS: [\"SECONDS\", \"(\", \"expression\", \")\"],\r\n      TIMEZONE: [\"TIMEZONE\", \"(\", \"expression\", \")\"],\r\n      TZ: [\"TZ\", \"(\", \"expression\", \")\"],\r\n      NOW: [\"NOW\", \"NIL\"],\r\n      UUID: [\"UUID\", \"NIL\"],\r\n      STRUUID: [\"STRUUID\", \"NIL\"],\r\n      MD5: [\"MD5\", \"(\", \"expression\", \")\"],\r\n      SHA1: [\"SHA1\", \"(\", \"expression\", \")\"],\r\n      SHA256: [\"SHA256\", \"(\", \"expression\", \")\"],\r\n      SHA384: [\"SHA384\", \"(\", \"expression\", \")\"],\r\n      SHA512: [\"SHA512\", \"(\", \"expression\", \")\"],\r\n      COALESCE: [\"COALESCE\", \"expressionList\"],\r\n      IF: [\"IF\", \"(\", \"expression\", \",\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRLANG: [\"STRLANG\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      STRDT: [\"STRDT\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      SAMETERM: [\"SAMETERM\", \"(\", \"expression\", \",\", \"expression\", \")\"],\r\n      ISIRI: [\"ISIRI\", \"(\", \"expression\", \")\"],\r\n      ISURI: [\"ISURI\", \"(\", \"expression\", \")\"],\r\n      ISBLANK: [\"ISBLANK\", \"(\", \"expression\", \")\"],\r\n      ISLITERAL: [\"ISLITERAL\", \"(\", \"expression\", \")\"],\r\n      ISNUMERIC: [\"ISNUMERIC\", \"(\", \"expression\", \")\"],\r\n      REGEX: [\"regexExpression\"],\r\n      EXISTS: [\"existsFunc\"],\r\n      NOT: [\"notExistsFunc\"]\r\n    },\r\n    clear: {\r\n      CLEAR: [\"CLEAR\", \"?SILENT_2\", \"graphRefAll\"]\r\n    },\r\n    collection: {\r\n      \"(\": [\"(\", \"+graphNode\", \")\"]\r\n    },\r\n    collectionPath: {\r\n      \"(\": [\"(\", \"+graphNodePath\", \")\"]\r\n    },\r\n    conditionalAndExpression: {\r\n      \"!\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      \"+\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      \"-\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      VAR1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      VAR2: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      \"(\": [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      LANG: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      LANGMATCHES: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DATATYPE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      BOUND: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      IRI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      URI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      BNODE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      RAND: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ABS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      CEIL: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      FLOOR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ROUND: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      CONCAT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRLEN: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      UCASE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      LCASE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ENCODE_FOR_URI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      CONTAINS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRSTARTS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRENDS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRBEFORE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRAFTER: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      YEAR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MONTH: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DAY: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      HOURS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MINUTES: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SECONDS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      TIMEZONE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      TZ: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      NOW: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      UUID: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRUUID: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MD5: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA256: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA384: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SHA512: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      COALESCE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      IF: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRLANG: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRDT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SAMETERM: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISIRI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISURI: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISBLANK: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISLITERAL: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      ISNUMERIC: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      TRUE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      FALSE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      COUNT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SUM: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MIN: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      MAX: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      AVG: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SAMPLE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      GROUP_CONCAT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      SUBSTR: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      REPLACE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      REGEX: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      EXISTS: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      NOT: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      IRI_REF: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL2: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL_LONG1: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      STRING_LITERAL_LONG2: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      INTEGER: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DECIMAL: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DOUBLE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      INTEGER_POSITIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DECIMAL_POSITIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DOUBLE_POSITIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      INTEGER_NEGATIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DECIMAL_NEGATIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      DOUBLE_NEGATIVE: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      PNAME_LN: [\"valueLogical\", \"*[&&,valueLogical]\"],\r\n      PNAME_NS: [\"valueLogical\", \"*[&&,valueLogical]\"]\r\n    },\r\n    conditionalOrExpression: {\r\n      \"!\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      \"+\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      \"-\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      VAR1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      VAR2: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      \"(\": [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      LANG: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      LANGMATCHES: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DATATYPE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      BOUND: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      IRI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      URI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      BNODE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      RAND: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ABS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      CEIL: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      FLOOR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ROUND: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      CONCAT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRLEN: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      UCASE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      LCASE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ENCODE_FOR_URI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      CONTAINS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRSTARTS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRENDS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRBEFORE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRAFTER: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      YEAR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MONTH: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DAY: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      HOURS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MINUTES: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SECONDS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      TIMEZONE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      TZ: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      NOW: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      UUID: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRUUID: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MD5: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA256: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA384: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SHA512: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      COALESCE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      IF: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRLANG: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRDT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SAMETERM: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISIRI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISURI: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISBLANK: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISLITERAL: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      ISNUMERIC: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      TRUE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      FALSE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      COUNT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SUM: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MIN: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      MAX: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      AVG: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SAMPLE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      GROUP_CONCAT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      SUBSTR: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      REPLACE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      REGEX: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      EXISTS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      NOT: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      IRI_REF: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL2: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL_LONG1: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      STRING_LITERAL_LONG2: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      INTEGER: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DECIMAL: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DOUBLE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      INTEGER_POSITIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DECIMAL_POSITIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DOUBLE_POSITIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      INTEGER_NEGATIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DECIMAL_NEGATIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      DOUBLE_NEGATIVE: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      PNAME_LN: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"],\r\n      PNAME_NS: [\"conditionalAndExpression\", \"*[||,conditionalAndExpression]\"]\r\n    },\r\n    constraint: {\r\n      \"(\": [\"brackettedExpression\"],\r\n      STR: [\"builtInCall\"],\r\n      LANG: [\"builtInCall\"],\r\n      LANGMATCHES: [\"builtInCall\"],\r\n      DATATYPE: [\"builtInCall\"],\r\n      BOUND: [\"builtInCall\"],\r\n      IRI: [\"builtInCall\"],\r\n      URI: [\"builtInCall\"],\r\n      BNODE: [\"builtInCall\"],\r\n      RAND: [\"builtInCall\"],\r\n      ABS: [\"builtInCall\"],\r\n      CEIL: [\"builtInCall\"],\r\n      FLOOR: [\"builtInCall\"],\r\n      ROUND: [\"builtInCall\"],\r\n      CONCAT: [\"builtInCall\"],\r\n      STRLEN: [\"builtInCall\"],\r\n      UCASE: [\"builtInCall\"],\r\n      LCASE: [\"builtInCall\"],\r\n      ENCODE_FOR_URI: [\"builtInCall\"],\r\n      CONTAINS: [\"builtInCall\"],\r\n      STRSTARTS: [\"builtInCall\"],\r\n      STRENDS: [\"builtInCall\"],\r\n      STRBEFORE: [\"builtInCall\"],\r\n      STRAFTER: [\"builtInCall\"],\r\n      YEAR: [\"builtInCall\"],\r\n      MONTH: [\"builtInCall\"],\r\n      DAY: [\"builtInCall\"],\r\n      HOURS: [\"builtInCall\"],\r\n      MINUTES: [\"builtInCall\"],\r\n      SECONDS: [\"builtInCall\"],\r\n      TIMEZONE: [\"builtInCall\"],\r\n      TZ: [\"builtInCall\"],\r\n      NOW: [\"builtInCall\"],\r\n      UUID: [\"builtInCall\"],\r\n      STRUUID: [\"builtInCall\"],\r\n      MD5: [\"builtInCall\"],\r\n      SHA1: [\"builtInCall\"],\r\n      SHA256: [\"builtInCall\"],\r\n      SHA384: [\"builtInCall\"],\r\n      SHA512: [\"builtInCall\"],\r\n      COALESCE: [\"builtInCall\"],\r\n      IF: [\"builtInCall\"],\r\n      STRLANG: [\"builtInCall\"],\r\n      STRDT: [\"builtInCall\"],\r\n      SAMETERM: [\"builtInCall\"],\r\n      ISIRI: [\"builtInCall\"],\r\n      ISURI: [\"builtInCall\"],\r\n      ISBLANK: [\"builtInCall\"],\r\n      ISLITERAL: [\"builtInCall\"],\r\n      ISNUMERIC: [\"builtInCall\"],\r\n      SUBSTR: [\"builtInCall\"],\r\n      REPLACE: [\"builtInCall\"],\r\n      REGEX: [\"builtInCall\"],\r\n      EXISTS: [\"builtInCall\"],\r\n      NOT: [\"builtInCall\"],\r\n      IRI_REF: [\"functionCall\"],\r\n      PNAME_LN: [\"functionCall\"],\r\n      PNAME_NS: [\"functionCall\"]\r\n    },\r\n    constructQuery: {\r\n      CONSTRUCT: [\r\n        \"CONSTRUCT\",\r\n        \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\"\r\n      ]\r\n    },\r\n    constructTemplate: {\r\n      \"{\": [\"{\", \"?constructTriples\", \"}\"]\r\n    },\r\n    constructTriples: {\r\n      VAR1: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      VAR2: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      NIL: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      \"(\": [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      \"[\": [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      IRI_REF: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      TRUE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      FALSE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      BLANK_NODE_LABEL: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      ANON: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      PNAME_LN: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      PNAME_NS: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL1: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL2: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL_LONG1: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      STRING_LITERAL_LONG2: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      INTEGER: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DECIMAL: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DOUBLE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      INTEGER_POSITIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DECIMAL_POSITIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DOUBLE_POSITIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      INTEGER_NEGATIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DECIMAL_NEGATIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"],\r\n      DOUBLE_NEGATIVE: [\"triplesSameSubject\", \"?[.,?constructTriples]\"]\r\n    },\r\n    copy: {\r\n      COPY: [\"COPY\", \"?SILENT_4\", \"graphOrDefault\", \"TO\", \"graphOrDefault\"]\r\n    },\r\n    create: {\r\n      CREATE: [\"CREATE\", \"?SILENT_3\", \"graphRef\"]\r\n    },\r\n    dataBlock: {\r\n      NIL: [\"or([inlineDataOneVar,inlineDataFull])\"],\r\n      \"(\": [\"or([inlineDataOneVar,inlineDataFull])\"],\r\n      VAR1: [\"or([inlineDataOneVar,inlineDataFull])\"],\r\n      VAR2: [\"or([inlineDataOneVar,inlineDataFull])\"]\r\n    },\r\n    dataBlockValue: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      STRING_LITERAL1: [\"rdfLiteral\"],\r\n      STRING_LITERAL2: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG1: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG2: [\"rdfLiteral\"],\r\n      INTEGER: [\"numericLiteral\"],\r\n      DECIMAL: [\"numericLiteral\"],\r\n      DOUBLE: [\"numericLiteral\"],\r\n      INTEGER_POSITIVE: [\"numericLiteral\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteral\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteral\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteral\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteral\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteral\"],\r\n      TRUE: [\"booleanLiteral\"],\r\n      FALSE: [\"booleanLiteral\"],\r\n      UNDEF: [\"UNDEF\"]\r\n    },\r\n    datasetClause: {\r\n      FROM: [\"FROM\", \"or([defaultGraphClause,namedGraphClause])\"]\r\n    },\r\n    defaultGraphClause: {\r\n      IRI_REF: [\"sourceSelector\"],\r\n      PNAME_LN: [\"sourceSelector\"],\r\n      PNAME_NS: [\"sourceSelector\"]\r\n    },\r\n    delete1: {\r\n      DATA: [\"DATA\", \"quadDataNoBnodes\"],\r\n      WHERE: [\"WHERE\", \"quadPatternNoBnodes\"],\r\n      \"{\": [\"quadPatternNoBnodes\", \"?insertClause\", \"*usingClause\", \"WHERE\", \"groupGraphPattern\"]\r\n    },\r\n    deleteClause: {\r\n      DELETE: [\"DELETE\", \"quadPattern\"]\r\n    },\r\n    describeDatasetClause: {\r\n      FROM: [\"FROM\", \"or([defaultGraphClause,namedGraphClause])\"]\r\n    },\r\n    describeQuery: {\r\n      DESCRIBE: [\"DESCRIBE\", \"or([+varOrIRIref,*])\", \"*describeDatasetClause\", \"?whereClause\", \"solutionModifier\"]\r\n    },\r\n    disallowBnodes: {\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    disallowVars: {\r\n      \"}\": [],\r\n      GRAPH: [],\r\n      VAR1: [],\r\n      VAR2: [],\r\n      NIL: [],\r\n      \"(\": [],\r\n      \"[\": [],\r\n      IRI_REF: [],\r\n      TRUE: [],\r\n      FALSE: [],\r\n      BLANK_NODE_LABEL: [],\r\n      ANON: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      STRING_LITERAL1: [],\r\n      STRING_LITERAL2: [],\r\n      STRING_LITERAL_LONG1: [],\r\n      STRING_LITERAL_LONG2: [],\r\n      INTEGER: [],\r\n      DECIMAL: [],\r\n      DOUBLE: [],\r\n      INTEGER_POSITIVE: [],\r\n      DECIMAL_POSITIVE: [],\r\n      DOUBLE_POSITIVE: [],\r\n      INTEGER_NEGATIVE: [],\r\n      DECIMAL_NEGATIVE: [],\r\n      DOUBLE_NEGATIVE: []\r\n    },\r\n    drop: {\r\n      DROP: [\"DROP\", \"?SILENT_2\", \"graphRefAll\"]\r\n    },\r\n    existsFunc: {\r\n      EXISTS: [\"EXISTS\", \"groupGraphPattern\"]\r\n    },\r\n    expression: {\r\n      \"!\": [\"conditionalOrExpression\"],\r\n      \"+\": [\"conditionalOrExpression\"],\r\n      \"-\": [\"conditionalOrExpression\"],\r\n      VAR1: [\"conditionalOrExpression\"],\r\n      VAR2: [\"conditionalOrExpression\"],\r\n      \"(\": [\"conditionalOrExpression\"],\r\n      STR: [\"conditionalOrExpression\"],\r\n      LANG: [\"conditionalOrExpression\"],\r\n      LANGMATCHES: [\"conditionalOrExpression\"],\r\n      DATATYPE: [\"conditionalOrExpression\"],\r\n      BOUND: [\"conditionalOrExpression\"],\r\n      IRI: [\"conditionalOrExpression\"],\r\n      URI: [\"conditionalOrExpression\"],\r\n      BNODE: [\"conditionalOrExpression\"],\r\n      RAND: [\"conditionalOrExpression\"],\r\n      ABS: [\"conditionalOrExpression\"],\r\n      CEIL: [\"conditionalOrExpression\"],\r\n      FLOOR: [\"conditionalOrExpression\"],\r\n      ROUND: [\"conditionalOrExpression\"],\r\n      CONCAT: [\"conditionalOrExpression\"],\r\n      STRLEN: [\"conditionalOrExpression\"],\r\n      UCASE: [\"conditionalOrExpression\"],\r\n      LCASE: [\"conditionalOrExpression\"],\r\n      ENCODE_FOR_URI: [\"conditionalOrExpression\"],\r\n      CONTAINS: [\"conditionalOrExpression\"],\r\n      STRSTARTS: [\"conditionalOrExpression\"],\r\n      STRENDS: [\"conditionalOrExpression\"],\r\n      STRBEFORE: [\"conditionalOrExpression\"],\r\n      STRAFTER: [\"conditionalOrExpression\"],\r\n      YEAR: [\"conditionalOrExpression\"],\r\n      MONTH: [\"conditionalOrExpression\"],\r\n      DAY: [\"conditionalOrExpression\"],\r\n      HOURS: [\"conditionalOrExpression\"],\r\n      MINUTES: [\"conditionalOrExpression\"],\r\n      SECONDS: [\"conditionalOrExpression\"],\r\n      TIMEZONE: [\"conditionalOrExpression\"],\r\n      TZ: [\"conditionalOrExpression\"],\r\n      NOW: [\"conditionalOrExpression\"],\r\n      UUID: [\"conditionalOrExpression\"],\r\n      STRUUID: [\"conditionalOrExpression\"],\r\n      MD5: [\"conditionalOrExpression\"],\r\n      SHA1: [\"conditionalOrExpression\"],\r\n      SHA256: [\"conditionalOrExpression\"],\r\n      SHA384: [\"conditionalOrExpression\"],\r\n      SHA512: [\"conditionalOrExpression\"],\r\n      COALESCE: [\"conditionalOrExpression\"],\r\n      IF: [\"conditionalOrExpression\"],\r\n      STRLANG: [\"conditionalOrExpression\"],\r\n      STRDT: [\"conditionalOrExpression\"],\r\n      SAMETERM: [\"conditionalOrExpression\"],\r\n      ISIRI: [\"conditionalOrExpression\"],\r\n      ISURI: [\"conditionalOrExpression\"],\r\n      ISBLANK: [\"conditionalOrExpression\"],\r\n      ISLITERAL: [\"conditionalOrExpression\"],\r\n      ISNUMERIC: [\"conditionalOrExpression\"],\r\n      TRUE: [\"conditionalOrExpression\"],\r\n      FALSE: [\"conditionalOrExpression\"],\r\n      COUNT: [\"conditionalOrExpression\"],\r\n      SUM: [\"conditionalOrExpression\"],\r\n      MIN: [\"conditionalOrExpression\"],\r\n      MAX: [\"conditionalOrExpression\"],\r\n      AVG: [\"conditionalOrExpression\"],\r\n      SAMPLE: [\"conditionalOrExpression\"],\r\n      GROUP_CONCAT: [\"conditionalOrExpression\"],\r\n      SUBSTR: [\"conditionalOrExpression\"],\r\n      REPLACE: [\"conditionalOrExpression\"],\r\n      REGEX: [\"conditionalOrExpression\"],\r\n      EXISTS: [\"conditionalOrExpression\"],\r\n      NOT: [\"conditionalOrExpression\"],\r\n      IRI_REF: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL1: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL2: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL_LONG1: [\"conditionalOrExpression\"],\r\n      STRING_LITERAL_LONG2: [\"conditionalOrExpression\"],\r\n      INTEGER: [\"conditionalOrExpression\"],\r\n      DECIMAL: [\"conditionalOrExpression\"],\r\n      DOUBLE: [\"conditionalOrExpression\"],\r\n      INTEGER_POSITIVE: [\"conditionalOrExpression\"],\r\n      DECIMAL_POSITIVE: [\"conditionalOrExpression\"],\r\n      DOUBLE_POSITIVE: [\"conditionalOrExpression\"],\r\n      INTEGER_NEGATIVE: [\"conditionalOrExpression\"],\r\n      DECIMAL_NEGATIVE: [\"conditionalOrExpression\"],\r\n      DOUBLE_NEGATIVE: [\"conditionalOrExpression\"],\r\n      PNAME_LN: [\"conditionalOrExpression\"],\r\n      PNAME_NS: [\"conditionalOrExpression\"]\r\n    },\r\n    expressionList: {\r\n      NIL: [\"NIL\"],\r\n      \"(\": [\"(\", \"expression\", \"*[,,expression]\", \")\"]\r\n    },\r\n    filter: {\r\n      FILTER: [\"FILTER\", \"constraint\"]\r\n    },\r\n    functionCall: {\r\n      IRI_REF: [\"iriRef\", \"argList\"],\r\n      PNAME_LN: [\"iriRef\", \"argList\"],\r\n      PNAME_NS: [\"iriRef\", \"argList\"]\r\n    },\r\n    graphGraphPattern: {\r\n      GRAPH: [\"GRAPH\", \"varOrIRIref\", \"groupGraphPattern\"]\r\n    },\r\n    graphNode: {\r\n      VAR1: [\"varOrTerm\"],\r\n      VAR2: [\"varOrTerm\"],\r\n      NIL: [\"varOrTerm\"],\r\n      IRI_REF: [\"varOrTerm\"],\r\n      TRUE: [\"varOrTerm\"],\r\n      FALSE: [\"varOrTerm\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\"],\r\n      ANON: [\"varOrTerm\"],\r\n      PNAME_LN: [\"varOrTerm\"],\r\n      PNAME_NS: [\"varOrTerm\"],\r\n      STRING_LITERAL1: [\"varOrTerm\"],\r\n      STRING_LITERAL2: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\"],\r\n      INTEGER: [\"varOrTerm\"],\r\n      DECIMAL: [\"varOrTerm\"],\r\n      DOUBLE: [\"varOrTerm\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\"],\r\n      \"(\": [\"triplesNode\"],\r\n      \"[\": [\"triplesNode\"]\r\n    },\r\n    graphNodePath: {\r\n      VAR1: [\"varOrTerm\"],\r\n      VAR2: [\"varOrTerm\"],\r\n      NIL: [\"varOrTerm\"],\r\n      IRI_REF: [\"varOrTerm\"],\r\n      TRUE: [\"varOrTerm\"],\r\n      FALSE: [\"varOrTerm\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\"],\r\n      ANON: [\"varOrTerm\"],\r\n      PNAME_LN: [\"varOrTerm\"],\r\n      PNAME_NS: [\"varOrTerm\"],\r\n      STRING_LITERAL1: [\"varOrTerm\"],\r\n      STRING_LITERAL2: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\"],\r\n      INTEGER: [\"varOrTerm\"],\r\n      DECIMAL: [\"varOrTerm\"],\r\n      DOUBLE: [\"varOrTerm\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\"],\r\n      \"(\": [\"triplesNodePath\"],\r\n      \"[\": [\"triplesNodePath\"]\r\n    },\r\n    graphOrDefault: {\r\n      DEFAULT: [\"DEFAULT\"],\r\n      IRI_REF: [\"?GRAPH\", \"iriRef\"],\r\n      PNAME_LN: [\"?GRAPH\", \"iriRef\"],\r\n      PNAME_NS: [\"?GRAPH\", \"iriRef\"],\r\n      GRAPH: [\"?GRAPH\", \"iriRef\"]\r\n    },\r\n    graphPatternNotTriples: {\r\n      \"{\": [\"groupOrUnionGraphPattern\"],\r\n      OPTIONAL: [\"optionalGraphPattern\"],\r\n      MINUS: [\"minusGraphPattern\"],\r\n      GRAPH: [\"graphGraphPattern\"],\r\n      SERVICE: [\"serviceGraphPattern\"],\r\n      FILTER: [\"filter\"],\r\n      BIND: [\"bind\"],\r\n      VALUES: [\"inlineData\"]\r\n    },\r\n    graphRef: {\r\n      GRAPH: [\"GRAPH\", \"iriRef\"]\r\n    },\r\n    graphRefAll: {\r\n      GRAPH: [\"graphRef\"],\r\n      DEFAULT: [\"DEFAULT\"],\r\n      NAMED: [\"NAMED\"],\r\n      ALL: [\"ALL\"]\r\n    },\r\n    graphTerm: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      STRING_LITERAL1: [\"rdfLiteral\"],\r\n      STRING_LITERAL2: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG1: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG2: [\"rdfLiteral\"],\r\n      INTEGER: [\"numericLiteral\"],\r\n      DECIMAL: [\"numericLiteral\"],\r\n      DOUBLE: [\"numericLiteral\"],\r\n      INTEGER_POSITIVE: [\"numericLiteral\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteral\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteral\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteral\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteral\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteral\"],\r\n      TRUE: [\"booleanLiteral\"],\r\n      FALSE: [\"booleanLiteral\"],\r\n      BLANK_NODE_LABEL: [\"blankNode\"],\r\n      ANON: [\"blankNode\"],\r\n      NIL: [\"NIL\"]\r\n    },\r\n    groupClause: {\r\n      GROUP: [\"GROUP\", \"BY\", \"+groupCondition\"]\r\n    },\r\n    groupCondition: {\r\n      STR: [\"builtInCall\"],\r\n      LANG: [\"builtInCall\"],\r\n      LANGMATCHES: [\"builtInCall\"],\r\n      DATATYPE: [\"builtInCall\"],\r\n      BOUND: [\"builtInCall\"],\r\n      IRI: [\"builtInCall\"],\r\n      URI: [\"builtInCall\"],\r\n      BNODE: [\"builtInCall\"],\r\n      RAND: [\"builtInCall\"],\r\n      ABS: [\"builtInCall\"],\r\n      CEIL: [\"builtInCall\"],\r\n      FLOOR: [\"builtInCall\"],\r\n      ROUND: [\"builtInCall\"],\r\n      CONCAT: [\"builtInCall\"],\r\n      STRLEN: [\"builtInCall\"],\r\n      UCASE: [\"builtInCall\"],\r\n      LCASE: [\"builtInCall\"],\r\n      ENCODE_FOR_URI: [\"builtInCall\"],\r\n      CONTAINS: [\"builtInCall\"],\r\n      STRSTARTS: [\"builtInCall\"],\r\n      STRENDS: [\"builtInCall\"],\r\n      STRBEFORE: [\"builtInCall\"],\r\n      STRAFTER: [\"builtInCall\"],\r\n      YEAR: [\"builtInCall\"],\r\n      MONTH: [\"builtInCall\"],\r\n      DAY: [\"builtInCall\"],\r\n      HOURS: [\"builtInCall\"],\r\n      MINUTES: [\"builtInCall\"],\r\n      SECONDS: [\"builtInCall\"],\r\n      TIMEZONE: [\"builtInCall\"],\r\n      TZ: [\"builtInCall\"],\r\n      NOW: [\"builtInCall\"],\r\n      UUID: [\"builtInCall\"],\r\n      STRUUID: [\"builtInCall\"],\r\n      MD5: [\"builtInCall\"],\r\n      SHA1: [\"builtInCall\"],\r\n      SHA256: [\"builtInCall\"],\r\n      SHA384: [\"builtInCall\"],\r\n      SHA512: [\"builtInCall\"],\r\n      COALESCE: [\"builtInCall\"],\r\n      IF: [\"builtInCall\"],\r\n      STRLANG: [\"builtInCall\"],\r\n      STRDT: [\"builtInCall\"],\r\n      SAMETERM: [\"builtInCall\"],\r\n      ISIRI: [\"builtInCall\"],\r\n      ISURI: [\"builtInCall\"],\r\n      ISBLANK: [\"builtInCall\"],\r\n      ISLITERAL: [\"builtInCall\"],\r\n      ISNUMERIC: [\"builtInCall\"],\r\n      SUBSTR: [\"builtInCall\"],\r\n      REPLACE: [\"builtInCall\"],\r\n      REGEX: [\"builtInCall\"],\r\n      EXISTS: [\"builtInCall\"],\r\n      NOT: [\"builtInCall\"],\r\n      IRI_REF: [\"functionCall\"],\r\n      PNAME_LN: [\"functionCall\"],\r\n      PNAME_NS: [\"functionCall\"],\r\n      \"(\": [\"(\", \"expression\", \"?[AS,var]\", \")\"],\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"]\r\n    },\r\n    groupGraphPattern: {\r\n      \"{\": [\"{\", \"or([subSelect,groupGraphPatternSub])\", \"}\"]\r\n    },\r\n    groupGraphPatternSub: {\r\n      \"{\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      OPTIONAL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      MINUS: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      GRAPH: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      SERVICE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      FILTER: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      BIND: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VALUES: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VAR1: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      VAR2: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      NIL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"(\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"[\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      IRI_REF: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      TRUE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      FALSE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      BLANK_NODE_LABEL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      ANON: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      PNAME_LN: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      PNAME_NS: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL1: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL2: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG1: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG2: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      INTEGER: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DECIMAL: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DOUBLE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      INTEGER_POSITIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DECIMAL_POSITIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DOUBLE_POSITIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      INTEGER_NEGATIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DECIMAL_NEGATIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      DOUBLE_NEGATIVE: [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"],\r\n      \"}\": [\"?triplesBlock\", \"*[graphPatternNotTriples,?.,?triplesBlock]\"]\r\n    },\r\n    groupOrUnionGraphPattern: {\r\n      \"{\": [\"groupGraphPattern\", \"*[UNION,groupGraphPattern]\"]\r\n    },\r\n    havingClause: {\r\n      HAVING: [\"HAVING\", \"+havingCondition\"]\r\n    },\r\n    havingCondition: {\r\n      \"(\": [\"constraint\"],\r\n      STR: [\"constraint\"],\r\n      LANG: [\"constraint\"],\r\n      LANGMATCHES: [\"constraint\"],\r\n      DATATYPE: [\"constraint\"],\r\n      BOUND: [\"constraint\"],\r\n      IRI: [\"constraint\"],\r\n      URI: [\"constraint\"],\r\n      BNODE: [\"constraint\"],\r\n      RAND: [\"constraint\"],\r\n      ABS: [\"constraint\"],\r\n      CEIL: [\"constraint\"],\r\n      FLOOR: [\"constraint\"],\r\n      ROUND: [\"constraint\"],\r\n      CONCAT: [\"constraint\"],\r\n      STRLEN: [\"constraint\"],\r\n      UCASE: [\"constraint\"],\r\n      LCASE: [\"constraint\"],\r\n      ENCODE_FOR_URI: [\"constraint\"],\r\n      CONTAINS: [\"constraint\"],\r\n      STRSTARTS: [\"constraint\"],\r\n      STRENDS: [\"constraint\"],\r\n      STRBEFORE: [\"constraint\"],\r\n      STRAFTER: [\"constraint\"],\r\n      YEAR: [\"constraint\"],\r\n      MONTH: [\"constraint\"],\r\n      DAY: [\"constraint\"],\r\n      HOURS: [\"constraint\"],\r\n      MINUTES: [\"constraint\"],\r\n      SECONDS: [\"constraint\"],\r\n      TIMEZONE: [\"constraint\"],\r\n      TZ: [\"constraint\"],\r\n      NOW: [\"constraint\"],\r\n      UUID: [\"constraint\"],\r\n      STRUUID: [\"constraint\"],\r\n      MD5: [\"constraint\"],\r\n      SHA1: [\"constraint\"],\r\n      SHA256: [\"constraint\"],\r\n      SHA384: [\"constraint\"],\r\n      SHA512: [\"constraint\"],\r\n      COALESCE: [\"constraint\"],\r\n      IF: [\"constraint\"],\r\n      STRLANG: [\"constraint\"],\r\n      STRDT: [\"constraint\"],\r\n      SAMETERM: [\"constraint\"],\r\n      ISIRI: [\"constraint\"],\r\n      ISURI: [\"constraint\"],\r\n      ISBLANK: [\"constraint\"],\r\n      ISLITERAL: [\"constraint\"],\r\n      ISNUMERIC: [\"constraint\"],\r\n      SUBSTR: [\"constraint\"],\r\n      REPLACE: [\"constraint\"],\r\n      REGEX: [\"constraint\"],\r\n      EXISTS: [\"constraint\"],\r\n      NOT: [\"constraint\"],\r\n      IRI_REF: [\"constraint\"],\r\n      PNAME_LN: [\"constraint\"],\r\n      PNAME_NS: [\"constraint\"]\r\n    },\r\n    inlineData: {\r\n      VALUES: [\"VALUES\", \"dataBlock\"]\r\n    },\r\n    inlineDataFull: {\r\n      NIL: [\"or([NIL,[ (,*var,)]])\", \"{\", \"*or([[ (,*dataBlockValue,)],NIL])\", \"}\"],\r\n      \"(\": [\"or([NIL,[ (,*var,)]])\", \"{\", \"*or([[ (,*dataBlockValue,)],NIL])\", \"}\"]\r\n    },\r\n    inlineDataOneVar: {\r\n      VAR1: [\"var\", \"{\", \"*dataBlockValue\", \"}\"],\r\n      VAR2: [\"var\", \"{\", \"*dataBlockValue\", \"}\"]\r\n    },\r\n    insert1: {\r\n      DATA: [\"DATA\", \"quadData\"],\r\n      \"{\": [\"quadPattern\", \"*usingClause\", \"WHERE\", \"groupGraphPattern\"]\r\n    },\r\n    insertClause: {\r\n      INSERT: [\"INSERT\", \"quadPattern\"]\r\n    },\r\n    integer: {\r\n      INTEGER: [\"INTEGER\"]\r\n    },\r\n    iriRef: {\r\n      IRI_REF: [\"IRI_REF\"],\r\n      PNAME_LN: [\"prefixedName\"],\r\n      PNAME_NS: [\"prefixedName\"]\r\n    },\r\n    iriRefOrFunction: {\r\n      IRI_REF: [\"iriRef\", \"?argList\"],\r\n      PNAME_LN: [\"iriRef\", \"?argList\"],\r\n      PNAME_NS: [\"iriRef\", \"?argList\"]\r\n    },\r\n    limitClause: {\r\n      LIMIT: [\"LIMIT\", \"INTEGER\"]\r\n    },\r\n    limitOffsetClauses: {\r\n      LIMIT: [\"limitClause\", \"?offsetClause\"],\r\n      OFFSET: [\"offsetClause\", \"?limitClause\"]\r\n    },\r\n    load: {\r\n      LOAD: [\"LOAD\", \"?SILENT_1\", \"iriRef\", \"?[INTO,graphRef]\"]\r\n    },\r\n    minusGraphPattern: {\r\n      MINUS: [\"MINUS\", \"groupGraphPattern\"]\r\n    },\r\n    modify: {\r\n      WITH: [\r\n        \"WITH\",\r\n        \"iriRef\",\r\n        \"or([[deleteClause,?insertClause],insertClause])\",\r\n        \"*usingClause\",\r\n        \"WHERE\",\r\n        \"groupGraphPattern\"\r\n      ]\r\n    },\r\n    move: {\r\n      MOVE: [\"MOVE\", \"?SILENT_4\", \"graphOrDefault\", \"TO\", \"graphOrDefault\"]\r\n    },\r\n    multiplicativeExpression: {\r\n      \"!\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"+\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"-\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      VAR1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      VAR2: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      \"(\": [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      LANG: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      LANGMATCHES: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DATATYPE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      BOUND: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      IRI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      URI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      BNODE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      RAND: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ABS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      CEIL: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      FLOOR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ROUND: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      CONCAT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRLEN: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      UCASE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      LCASE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ENCODE_FOR_URI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      CONTAINS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRSTARTS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRENDS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRBEFORE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRAFTER: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      YEAR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MONTH: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DAY: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      HOURS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MINUTES: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SECONDS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      TIMEZONE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      TZ: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      NOW: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      UUID: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRUUID: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MD5: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA256: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA384: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SHA512: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      COALESCE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      IF: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRLANG: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRDT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SAMETERM: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISIRI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISURI: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISBLANK: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISLITERAL: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      ISNUMERIC: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      TRUE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      FALSE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      COUNT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SUM: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MIN: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      MAX: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      AVG: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SAMPLE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      GROUP_CONCAT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      SUBSTR: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      REPLACE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      REGEX: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      EXISTS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      NOT: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      IRI_REF: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL2: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL_LONG1: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      STRING_LITERAL_LONG2: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      INTEGER: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DECIMAL: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DOUBLE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      INTEGER_POSITIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DECIMAL_POSITIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DOUBLE_POSITIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      INTEGER_NEGATIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DECIMAL_NEGATIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      DOUBLE_NEGATIVE: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      PNAME_LN: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"],\r\n      PNAME_NS: [\"unaryExpression\", \"*or([[*,unaryExpression],[/,unaryExpression]])\"]\r\n    },\r\n    namedGraphClause: {\r\n      NAMED: [\"NAMED\", \"sourceSelector\"]\r\n    },\r\n    notExistsFunc: {\r\n      NOT: [\"NOT\", \"EXISTS\", \"groupGraphPattern\"]\r\n    },\r\n    numericExpression: {\r\n      \"!\": [\"additiveExpression\"],\r\n      \"+\": [\"additiveExpression\"],\r\n      \"-\": [\"additiveExpression\"],\r\n      VAR1: [\"additiveExpression\"],\r\n      VAR2: [\"additiveExpression\"],\r\n      \"(\": [\"additiveExpression\"],\r\n      STR: [\"additiveExpression\"],\r\n      LANG: [\"additiveExpression\"],\r\n      LANGMATCHES: [\"additiveExpression\"],\r\n      DATATYPE: [\"additiveExpression\"],\r\n      BOUND: [\"additiveExpression\"],\r\n      IRI: [\"additiveExpression\"],\r\n      URI: [\"additiveExpression\"],\r\n      BNODE: [\"additiveExpression\"],\r\n      RAND: [\"additiveExpression\"],\r\n      ABS: [\"additiveExpression\"],\r\n      CEIL: [\"additiveExpression\"],\r\n      FLOOR: [\"additiveExpression\"],\r\n      ROUND: [\"additiveExpression\"],\r\n      CONCAT: [\"additiveExpression\"],\r\n      STRLEN: [\"additiveExpression\"],\r\n      UCASE: [\"additiveExpression\"],\r\n      LCASE: [\"additiveExpression\"],\r\n      ENCODE_FOR_URI: [\"additiveExpression\"],\r\n      CONTAINS: [\"additiveExpression\"],\r\n      STRSTARTS: [\"additiveExpression\"],\r\n      STRENDS: [\"additiveExpression\"],\r\n      STRBEFORE: [\"additiveExpression\"],\r\n      STRAFTER: [\"additiveExpression\"],\r\n      YEAR: [\"additiveExpression\"],\r\n      MONTH: [\"additiveExpression\"],\r\n      DAY: [\"additiveExpression\"],\r\n      HOURS: [\"additiveExpression\"],\r\n      MINUTES: [\"additiveExpression\"],\r\n      SECONDS: [\"additiveExpression\"],\r\n      TIMEZONE: [\"additiveExpression\"],\r\n      TZ: [\"additiveExpression\"],\r\n      NOW: [\"additiveExpression\"],\r\n      UUID: [\"additiveExpression\"],\r\n      STRUUID: [\"additiveExpression\"],\r\n      MD5: [\"additiveExpression\"],\r\n      SHA1: [\"additiveExpression\"],\r\n      SHA256: [\"additiveExpression\"],\r\n      SHA384: [\"additiveExpression\"],\r\n      SHA512: [\"additiveExpression\"],\r\n      COALESCE: [\"additiveExpression\"],\r\n      IF: [\"additiveExpression\"],\r\n      STRLANG: [\"additiveExpression\"],\r\n      STRDT: [\"additiveExpression\"],\r\n      SAMETERM: [\"additiveExpression\"],\r\n      ISIRI: [\"additiveExpression\"],\r\n      ISURI: [\"additiveExpression\"],\r\n      ISBLANK: [\"additiveExpression\"],\r\n      ISLITERAL: [\"additiveExpression\"],\r\n      ISNUMERIC: [\"additiveExpression\"],\r\n      TRUE: [\"additiveExpression\"],\r\n      FALSE: [\"additiveExpression\"],\r\n      COUNT: [\"additiveExpression\"],\r\n      SUM: [\"additiveExpression\"],\r\n      MIN: [\"additiveExpression\"],\r\n      MAX: [\"additiveExpression\"],\r\n      AVG: [\"additiveExpression\"],\r\n      SAMPLE: [\"additiveExpression\"],\r\n      GROUP_CONCAT: [\"additiveExpression\"],\r\n      SUBSTR: [\"additiveExpression\"],\r\n      REPLACE: [\"additiveExpression\"],\r\n      REGEX: [\"additiveExpression\"],\r\n      EXISTS: [\"additiveExpression\"],\r\n      NOT: [\"additiveExpression\"],\r\n      IRI_REF: [\"additiveExpression\"],\r\n      STRING_LITERAL1: [\"additiveExpression\"],\r\n      STRING_LITERAL2: [\"additiveExpression\"],\r\n      STRING_LITERAL_LONG1: [\"additiveExpression\"],\r\n      STRING_LITERAL_LONG2: [\"additiveExpression\"],\r\n      INTEGER: [\"additiveExpression\"],\r\n      DECIMAL: [\"additiveExpression\"],\r\n      DOUBLE: [\"additiveExpression\"],\r\n      INTEGER_POSITIVE: [\"additiveExpression\"],\r\n      DECIMAL_POSITIVE: [\"additiveExpression\"],\r\n      DOUBLE_POSITIVE: [\"additiveExpression\"],\r\n      INTEGER_NEGATIVE: [\"additiveExpression\"],\r\n      DECIMAL_NEGATIVE: [\"additiveExpression\"],\r\n      DOUBLE_NEGATIVE: [\"additiveExpression\"],\r\n      PNAME_LN: [\"additiveExpression\"],\r\n      PNAME_NS: [\"additiveExpression\"]\r\n    },\r\n    numericLiteral: {\r\n      INTEGER: [\"numericLiteralUnsigned\"],\r\n      DECIMAL: [\"numericLiteralUnsigned\"],\r\n      DOUBLE: [\"numericLiteralUnsigned\"],\r\n      INTEGER_POSITIVE: [\"numericLiteralPositive\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteralPositive\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteralPositive\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteralNegative\"]\r\n    },\r\n    numericLiteralNegative: {\r\n      INTEGER_NEGATIVE: [\"INTEGER_NEGATIVE\"],\r\n      DECIMAL_NEGATIVE: [\"DECIMAL_NEGATIVE\"],\r\n      DOUBLE_NEGATIVE: [\"DOUBLE_NEGATIVE\"]\r\n    },\r\n    numericLiteralPositive: {\r\n      INTEGER_POSITIVE: [\"INTEGER_POSITIVE\"],\r\n      DECIMAL_POSITIVE: [\"DECIMAL_POSITIVE\"],\r\n      DOUBLE_POSITIVE: [\"DOUBLE_POSITIVE\"]\r\n    },\r\n    numericLiteralUnsigned: {\r\n      INTEGER: [\"INTEGER\"],\r\n      DECIMAL: [\"DECIMAL\"],\r\n      DOUBLE: [\"DOUBLE\"]\r\n    },\r\n    object: {\r\n      \"(\": [\"graphNode\"],\r\n      \"[\": [\"graphNode\"],\r\n      VAR1: [\"graphNode\"],\r\n      VAR2: [\"graphNode\"],\r\n      NIL: [\"graphNode\"],\r\n      IRI_REF: [\"graphNode\"],\r\n      TRUE: [\"graphNode\"],\r\n      FALSE: [\"graphNode\"],\r\n      BLANK_NODE_LABEL: [\"graphNode\"],\r\n      ANON: [\"graphNode\"],\r\n      PNAME_LN: [\"graphNode\"],\r\n      PNAME_NS: [\"graphNode\"],\r\n      STRING_LITERAL1: [\"graphNode\"],\r\n      STRING_LITERAL2: [\"graphNode\"],\r\n      STRING_LITERAL_LONG1: [\"graphNode\"],\r\n      STRING_LITERAL_LONG2: [\"graphNode\"],\r\n      INTEGER: [\"graphNode\"],\r\n      DECIMAL: [\"graphNode\"],\r\n      DOUBLE: [\"graphNode\"],\r\n      INTEGER_POSITIVE: [\"graphNode\"],\r\n      DECIMAL_POSITIVE: [\"graphNode\"],\r\n      DOUBLE_POSITIVE: [\"graphNode\"],\r\n      INTEGER_NEGATIVE: [\"graphNode\"],\r\n      DECIMAL_NEGATIVE: [\"graphNode\"],\r\n      DOUBLE_NEGATIVE: [\"graphNode\"]\r\n    },\r\n    objectList: {\r\n      \"(\": [\"object\", \"*[,,object]\"],\r\n      \"[\": [\"object\", \"*[,,object]\"],\r\n      VAR1: [\"object\", \"*[,,object]\"],\r\n      VAR2: [\"object\", \"*[,,object]\"],\r\n      NIL: [\"object\", \"*[,,object]\"],\r\n      IRI_REF: [\"object\", \"*[,,object]\"],\r\n      TRUE: [\"object\", \"*[,,object]\"],\r\n      FALSE: [\"object\", \"*[,,object]\"],\r\n      BLANK_NODE_LABEL: [\"object\", \"*[,,object]\"],\r\n      ANON: [\"object\", \"*[,,object]\"],\r\n      PNAME_LN: [\"object\", \"*[,,object]\"],\r\n      PNAME_NS: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL1: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL2: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL_LONG1: [\"object\", \"*[,,object]\"],\r\n      STRING_LITERAL_LONG2: [\"object\", \"*[,,object]\"],\r\n      INTEGER: [\"object\", \"*[,,object]\"],\r\n      DECIMAL: [\"object\", \"*[,,object]\"],\r\n      DOUBLE: [\"object\", \"*[,,object]\"],\r\n      INTEGER_POSITIVE: [\"object\", \"*[,,object]\"],\r\n      DECIMAL_POSITIVE: [\"object\", \"*[,,object]\"],\r\n      DOUBLE_POSITIVE: [\"object\", \"*[,,object]\"],\r\n      INTEGER_NEGATIVE: [\"object\", \"*[,,object]\"],\r\n      DECIMAL_NEGATIVE: [\"object\", \"*[,,object]\"],\r\n      DOUBLE_NEGATIVE: [\"object\", \"*[,,object]\"]\r\n    },\r\n    objectListPath: {\r\n      \"(\": [\"objectPath\", \"*[,,objectPath]\"],\r\n      \"[\": [\"objectPath\", \"*[,,objectPath]\"],\r\n      VAR1: [\"objectPath\", \"*[,,objectPath]\"],\r\n      VAR2: [\"objectPath\", \"*[,,objectPath]\"],\r\n      NIL: [\"objectPath\", \"*[,,objectPath]\"],\r\n      IRI_REF: [\"objectPath\", \"*[,,objectPath]\"],\r\n      TRUE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      FALSE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      BLANK_NODE_LABEL: [\"objectPath\", \"*[,,objectPath]\"],\r\n      ANON: [\"objectPath\", \"*[,,objectPath]\"],\r\n      PNAME_LN: [\"objectPath\", \"*[,,objectPath]\"],\r\n      PNAME_NS: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL1: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL2: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL_LONG1: [\"objectPath\", \"*[,,objectPath]\"],\r\n      STRING_LITERAL_LONG2: [\"objectPath\", \"*[,,objectPath]\"],\r\n      INTEGER: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DECIMAL: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DOUBLE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      INTEGER_POSITIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DECIMAL_POSITIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DOUBLE_POSITIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      INTEGER_NEGATIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DECIMAL_NEGATIVE: [\"objectPath\", \"*[,,objectPath]\"],\r\n      DOUBLE_NEGATIVE: [\"objectPath\", \"*[,,objectPath]\"]\r\n    },\r\n    objectPath: {\r\n      \"(\": [\"graphNodePath\"],\r\n      \"[\": [\"graphNodePath\"],\r\n      VAR1: [\"graphNodePath\"],\r\n      VAR2: [\"graphNodePath\"],\r\n      NIL: [\"graphNodePath\"],\r\n      IRI_REF: [\"graphNodePath\"],\r\n      TRUE: [\"graphNodePath\"],\r\n      FALSE: [\"graphNodePath\"],\r\n      BLANK_NODE_LABEL: [\"graphNodePath\"],\r\n      ANON: [\"graphNodePath\"],\r\n      PNAME_LN: [\"graphNodePath\"],\r\n      PNAME_NS: [\"graphNodePath\"],\r\n      STRING_LITERAL1: [\"graphNodePath\"],\r\n      STRING_LITERAL2: [\"graphNodePath\"],\r\n      STRING_LITERAL_LONG1: [\"graphNodePath\"],\r\n      STRING_LITERAL_LONG2: [\"graphNodePath\"],\r\n      INTEGER: [\"graphNodePath\"],\r\n      DECIMAL: [\"graphNodePath\"],\r\n      DOUBLE: [\"graphNodePath\"],\r\n      INTEGER_POSITIVE: [\"graphNodePath\"],\r\n      DECIMAL_POSITIVE: [\"graphNodePath\"],\r\n      DOUBLE_POSITIVE: [\"graphNodePath\"],\r\n      INTEGER_NEGATIVE: [\"graphNodePath\"],\r\n      DECIMAL_NEGATIVE: [\"graphNodePath\"],\r\n      DOUBLE_NEGATIVE: [\"graphNodePath\"]\r\n    },\r\n    offsetClause: {\r\n      OFFSET: [\"OFFSET\", \"INTEGER\"]\r\n    },\r\n    optionalGraphPattern: {\r\n      OPTIONAL: [\"OPTIONAL\", \"groupGraphPattern\"]\r\n    },\r\n    \"or([*,expression])\": {\r\n      \"*\": [\"*\"],\r\n      \"!\": [\"expression\"],\r\n      \"+\": [\"expression\"],\r\n      \"-\": [\"expression\"],\r\n      VAR1: [\"expression\"],\r\n      VAR2: [\"expression\"],\r\n      \"(\": [\"expression\"],\r\n      STR: [\"expression\"],\r\n      LANG: [\"expression\"],\r\n      LANGMATCHES: [\"expression\"],\r\n      DATATYPE: [\"expression\"],\r\n      BOUND: [\"expression\"],\r\n      IRI: [\"expression\"],\r\n      URI: [\"expression\"],\r\n      BNODE: [\"expression\"],\r\n      RAND: [\"expression\"],\r\n      ABS: [\"expression\"],\r\n      CEIL: [\"expression\"],\r\n      FLOOR: [\"expression\"],\r\n      ROUND: [\"expression\"],\r\n      CONCAT: [\"expression\"],\r\n      STRLEN: [\"expression\"],\r\n      UCASE: [\"expression\"],\r\n      LCASE: [\"expression\"],\r\n      ENCODE_FOR_URI: [\"expression\"],\r\n      CONTAINS: [\"expression\"],\r\n      STRSTARTS: [\"expression\"],\r\n      STRENDS: [\"expression\"],\r\n      STRBEFORE: [\"expression\"],\r\n      STRAFTER: [\"expression\"],\r\n      YEAR: [\"expression\"],\r\n      MONTH: [\"expression\"],\r\n      DAY: [\"expression\"],\r\n      HOURS: [\"expression\"],\r\n      MINUTES: [\"expression\"],\r\n      SECONDS: [\"expression\"],\r\n      TIMEZONE: [\"expression\"],\r\n      TZ: [\"expression\"],\r\n      NOW: [\"expression\"],\r\n      UUID: [\"expression\"],\r\n      STRUUID: [\"expression\"],\r\n      MD5: [\"expression\"],\r\n      SHA1: [\"expression\"],\r\n      SHA256: [\"expression\"],\r\n      SHA384: [\"expression\"],\r\n      SHA512: [\"expression\"],\r\n      COALESCE: [\"expression\"],\r\n      IF: [\"expression\"],\r\n      STRLANG: [\"expression\"],\r\n      STRDT: [\"expression\"],\r\n      SAMETERM: [\"expression\"],\r\n      ISIRI: [\"expression\"],\r\n      ISURI: [\"expression\"],\r\n      ISBLANK: [\"expression\"],\r\n      ISLITERAL: [\"expression\"],\r\n      ISNUMERIC: [\"expression\"],\r\n      TRUE: [\"expression\"],\r\n      FALSE: [\"expression\"],\r\n      COUNT: [\"expression\"],\r\n      SUM: [\"expression\"],\r\n      MIN: [\"expression\"],\r\n      MAX: [\"expression\"],\r\n      AVG: [\"expression\"],\r\n      SAMPLE: [\"expression\"],\r\n      GROUP_CONCAT: [\"expression\"],\r\n      SUBSTR: [\"expression\"],\r\n      REPLACE: [\"expression\"],\r\n      REGEX: [\"expression\"],\r\n      EXISTS: [\"expression\"],\r\n      NOT: [\"expression\"],\r\n      IRI_REF: [\"expression\"],\r\n      STRING_LITERAL1: [\"expression\"],\r\n      STRING_LITERAL2: [\"expression\"],\r\n      STRING_LITERAL_LONG1: [\"expression\"],\r\n      STRING_LITERAL_LONG2: [\"expression\"],\r\n      INTEGER: [\"expression\"],\r\n      DECIMAL: [\"expression\"],\r\n      DOUBLE: [\"expression\"],\r\n      INTEGER_POSITIVE: [\"expression\"],\r\n      DECIMAL_POSITIVE: [\"expression\"],\r\n      DOUBLE_POSITIVE: [\"expression\"],\r\n      INTEGER_NEGATIVE: [\"expression\"],\r\n      DECIMAL_NEGATIVE: [\"expression\"],\r\n      DOUBLE_NEGATIVE: [\"expression\"],\r\n      PNAME_LN: [\"expression\"],\r\n      PNAME_NS: [\"expression\"]\r\n    },\r\n    \"or([+or([var,[ (,expression,AS,var,)]]),*])\": {\r\n      \"(\": [\"+or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR1: [\"+or([var,[ (,expression,AS,var,)]])\"],\r\n      VAR2: [\"+or([var,[ (,expression,AS,var,)]])\"],\r\n      \"*\": [\"*\"]\r\n    },\r\n    \"or([+varOrIRIref,*])\": {\r\n      VAR1: [\"+varOrIRIref\"],\r\n      VAR2: [\"+varOrIRIref\"],\r\n      IRI_REF: [\"+varOrIRIref\"],\r\n      PNAME_LN: [\"+varOrIRIref\"],\r\n      PNAME_NS: [\"+varOrIRIref\"],\r\n      \"*\": [\"*\"]\r\n    },\r\n    \"or([ASC,DESC])\": {\r\n      ASC: [\"ASC\"],\r\n      DESC: [\"DESC\"]\r\n    },\r\n    \"or([DISTINCT,REDUCED])\": {\r\n      DISTINCT: [\"DISTINCT\"],\r\n      REDUCED: [\"REDUCED\"]\r\n    },\r\n    \"or([LANGTAG,[^^,iriRef]])\": {\r\n      LANGTAG: [\"LANGTAG\"],\r\n      \"^^\": [\"[^^,iriRef]\"]\r\n    },\r\n    \"or([NIL,[ (,*var,)]])\": {\r\n      NIL: [\"NIL\"],\r\n      \"(\": [\"[ (,*var,)]\"]\r\n    },\r\n    \"or([[ (,*dataBlockValue,)],NIL])\": {\r\n      \"(\": [\"[ (,*dataBlockValue,)]\"],\r\n      NIL: [\"NIL\"]\r\n    },\r\n    \"or([[ (,expression,)],NIL])\": {\r\n      \"(\": [\"[ (,expression,)]\"],\r\n      NIL: [\"NIL\"]\r\n    },\r\n    \"or([[*,unaryExpression],[/,unaryExpression]])\": {\r\n      \"*\": [\"[*,unaryExpression]\"],\r\n      \"/\": [\"[/,unaryExpression]\"]\r\n    },\r\n    \"or([[+,multiplicativeExpression],[-,multiplicativeExpression],[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]])\": {\r\n      \"+\": [\"[+,multiplicativeExpression]\"],\r\n      \"-\": [\"[-,multiplicativeExpression]\"],\r\n      INTEGER_POSITIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"[or([numericLiteralPositive,numericLiteralNegative]),?or([[*,unaryExpression],[/,unaryExpression]])]\"\r\n      ]\r\n    },\r\n    \"or([[,,or([},[integer,}]])],}])\": {\r\n      \",\": [\"[,,or([},[integer,}]])]\"],\r\n      \"}\": [\"}\"]\r\n    },\r\n    \"or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\": {\r\n      \"=\": [\"[=,numericExpression]\"],\r\n      \"!=\": [\"[!=,numericExpression]\"],\r\n      \"<\": [\"[<,numericExpression]\"],\r\n      \">\": [\"[>,numericExpression]\"],\r\n      \"<=\": [\"[<=,numericExpression]\"],\r\n      \">=\": [\"[>=,numericExpression]\"],\r\n      IN: [\"[IN,expressionList]\"],\r\n      NOT: [\"[NOT,IN,expressionList]\"]\r\n    },\r\n    \"or([[constructTemplate,*datasetClause,whereClause,solutionModifier],[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]])\": {\r\n      \"{\": [\"[constructTemplate,*datasetClause,whereClause,solutionModifier]\"],\r\n      WHERE: [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"],\r\n      FROM: [\"[*datasetClause,WHERE,{,?triplesTemplate,},solutionModifier]\"]\r\n    },\r\n    \"or([[deleteClause,?insertClause],insertClause])\": {\r\n      DELETE: [\"[deleteClause,?insertClause]\"],\r\n      INSERT: [\"insertClause\"]\r\n    },\r\n    \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\": {\r\n      INTEGER: [\"[integer,or([[,,or([},[integer,}]])],}])]\"],\r\n      \",\": [\"[,,integer,}]\"]\r\n    },\r\n    \"or([baseDecl,prefixDecl])\": {\r\n      BASE: [\"baseDecl\"],\r\n      PREFIX: [\"prefixDecl\"]\r\n    },\r\n    \"or([defaultGraphClause,namedGraphClause])\": {\r\n      IRI_REF: [\"defaultGraphClause\"],\r\n      PNAME_LN: [\"defaultGraphClause\"],\r\n      PNAME_NS: [\"defaultGraphClause\"],\r\n      NAMED: [\"namedGraphClause\"]\r\n    },\r\n    \"or([inlineDataOneVar,inlineDataFull])\": {\r\n      VAR1: [\"inlineDataOneVar\"],\r\n      VAR2: [\"inlineDataOneVar\"],\r\n      NIL: [\"inlineDataFull\"],\r\n      \"(\": [\"inlineDataFull\"]\r\n    },\r\n    \"or([iriRef,[NAMED,iriRef]])\": {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      NAMED: [\"[NAMED,iriRef]\"]\r\n    },\r\n    \"or([iriRef,a])\": {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      a: [\"a\"]\r\n    },\r\n    \"or([numericLiteralPositive,numericLiteralNegative])\": {\r\n      INTEGER_POSITIVE: [\"numericLiteralPositive\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteralPositive\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteralPositive\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteralNegative\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteralNegative\"]\r\n    },\r\n    \"or([queryAll,updateAll])\": {\r\n      CONSTRUCT: [\"queryAll\"],\r\n      DESCRIBE: [\"queryAll\"],\r\n      ASK: [\"queryAll\"],\r\n      SELECT: [\"queryAll\"],\r\n      INSERT: [\"updateAll\"],\r\n      DELETE: [\"updateAll\"],\r\n      LOAD: [\"updateAll\"],\r\n      CLEAR: [\"updateAll\"],\r\n      DROP: [\"updateAll\"],\r\n      ADD: [\"updateAll\"],\r\n      MOVE: [\"updateAll\"],\r\n      COPY: [\"updateAll\"],\r\n      CREATE: [\"updateAll\"],\r\n      WITH: [\"updateAll\"],\r\n      $: [\"updateAll\"]\r\n    },\r\n    \"or([selectQuery,constructQuery,describeQuery,askQuery])\": {\r\n      SELECT: [\"selectQuery\"],\r\n      CONSTRUCT: [\"constructQuery\"],\r\n      DESCRIBE: [\"describeQuery\"],\r\n      ASK: [\"askQuery\"]\r\n    },\r\n    \"or([subSelect,groupGraphPatternSub])\": {\r\n      SELECT: [\"subSelect\"],\r\n      \"{\": [\"groupGraphPatternSub\"],\r\n      OPTIONAL: [\"groupGraphPatternSub\"],\r\n      MINUS: [\"groupGraphPatternSub\"],\r\n      GRAPH: [\"groupGraphPatternSub\"],\r\n      SERVICE: [\"groupGraphPatternSub\"],\r\n      FILTER: [\"groupGraphPatternSub\"],\r\n      BIND: [\"groupGraphPatternSub\"],\r\n      VALUES: [\"groupGraphPatternSub\"],\r\n      VAR1: [\"groupGraphPatternSub\"],\r\n      VAR2: [\"groupGraphPatternSub\"],\r\n      NIL: [\"groupGraphPatternSub\"],\r\n      \"(\": [\"groupGraphPatternSub\"],\r\n      \"[\": [\"groupGraphPatternSub\"],\r\n      IRI_REF: [\"groupGraphPatternSub\"],\r\n      TRUE: [\"groupGraphPatternSub\"],\r\n      FALSE: [\"groupGraphPatternSub\"],\r\n      BLANK_NODE_LABEL: [\"groupGraphPatternSub\"],\r\n      ANON: [\"groupGraphPatternSub\"],\r\n      PNAME_LN: [\"groupGraphPatternSub\"],\r\n      PNAME_NS: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL1: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL2: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL_LONG1: [\"groupGraphPatternSub\"],\r\n      STRING_LITERAL_LONG2: [\"groupGraphPatternSub\"],\r\n      INTEGER: [\"groupGraphPatternSub\"],\r\n      DECIMAL: [\"groupGraphPatternSub\"],\r\n      DOUBLE: [\"groupGraphPatternSub\"],\r\n      INTEGER_POSITIVE: [\"groupGraphPatternSub\"],\r\n      DECIMAL_POSITIVE: [\"groupGraphPatternSub\"],\r\n      DOUBLE_POSITIVE: [\"groupGraphPatternSub\"],\r\n      INTEGER_NEGATIVE: [\"groupGraphPatternSub\"],\r\n      DECIMAL_NEGATIVE: [\"groupGraphPatternSub\"],\r\n      DOUBLE_NEGATIVE: [\"groupGraphPatternSub\"],\r\n      \"}\": [\"groupGraphPatternSub\"]\r\n    },\r\n    \"or([var,[ (,expression,AS,var,)]])\": {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      \"(\": [\"[ (,expression,AS,var,)]\"]\r\n    },\r\n    \"or([verbPath,verbSimple])\": {\r\n      \"^\": [\"verbPath\"],\r\n      a: [\"verbPath\"],\r\n      \"!\": [\"verbPath\"],\r\n      \"(\": [\"verbPath\"],\r\n      IRI_REF: [\"verbPath\"],\r\n      PNAME_LN: [\"verbPath\"],\r\n      PNAME_NS: [\"verbPath\"],\r\n      VAR1: [\"verbSimple\"],\r\n      VAR2: [\"verbSimple\"]\r\n    },\r\n    \"or([},[integer,}]])\": {\r\n      \"}\": [\"}\"],\r\n      INTEGER: [\"[integer,}]\"]\r\n    },\r\n    orderClause: {\r\n      ORDER: [\"ORDER\", \"BY\", \"+orderCondition\"]\r\n    },\r\n    orderCondition: {\r\n      ASC: [\"or([ASC,DESC])\", \"brackettedExpression\"],\r\n      DESC: [\"or([ASC,DESC])\", \"brackettedExpression\"],\r\n      \"(\": [\"constraint\"],\r\n      STR: [\"constraint\"],\r\n      LANG: [\"constraint\"],\r\n      LANGMATCHES: [\"constraint\"],\r\n      DATATYPE: [\"constraint\"],\r\n      BOUND: [\"constraint\"],\r\n      IRI: [\"constraint\"],\r\n      URI: [\"constraint\"],\r\n      BNODE: [\"constraint\"],\r\n      RAND: [\"constraint\"],\r\n      ABS: [\"constraint\"],\r\n      CEIL: [\"constraint\"],\r\n      FLOOR: [\"constraint\"],\r\n      ROUND: [\"constraint\"],\r\n      CONCAT: [\"constraint\"],\r\n      STRLEN: [\"constraint\"],\r\n      UCASE: [\"constraint\"],\r\n      LCASE: [\"constraint\"],\r\n      ENCODE_FOR_URI: [\"constraint\"],\r\n      CONTAINS: [\"constraint\"],\r\n      STRSTARTS: [\"constraint\"],\r\n      STRENDS: [\"constraint\"],\r\n      STRBEFORE: [\"constraint\"],\r\n      STRAFTER: [\"constraint\"],\r\n      YEAR: [\"constraint\"],\r\n      MONTH: [\"constraint\"],\r\n      DAY: [\"constraint\"],\r\n      HOURS: [\"constraint\"],\r\n      MINUTES: [\"constraint\"],\r\n      SECONDS: [\"constraint\"],\r\n      TIMEZONE: [\"constraint\"],\r\n      TZ: [\"constraint\"],\r\n      NOW: [\"constraint\"],\r\n      UUID: [\"constraint\"],\r\n      STRUUID: [\"constraint\"],\r\n      MD5: [\"constraint\"],\r\n      SHA1: [\"constraint\"],\r\n      SHA256: [\"constraint\"],\r\n      SHA384: [\"constraint\"],\r\n      SHA512: [\"constraint\"],\r\n      COALESCE: [\"constraint\"],\r\n      IF: [\"constraint\"],\r\n      STRLANG: [\"constraint\"],\r\n      STRDT: [\"constraint\"],\r\n      SAMETERM: [\"constraint\"],\r\n      ISIRI: [\"constraint\"],\r\n      ISURI: [\"constraint\"],\r\n      ISBLANK: [\"constraint\"],\r\n      ISLITERAL: [\"constraint\"],\r\n      ISNUMERIC: [\"constraint\"],\r\n      SUBSTR: [\"constraint\"],\r\n      REPLACE: [\"constraint\"],\r\n      REGEX: [\"constraint\"],\r\n      EXISTS: [\"constraint\"],\r\n      NOT: [\"constraint\"],\r\n      IRI_REF: [\"constraint\"],\r\n      PNAME_LN: [\"constraint\"],\r\n      PNAME_NS: [\"constraint\"],\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"]\r\n    },\r\n    path: {\r\n      \"^\": [\"pathAlternative\"],\r\n      a: [\"pathAlternative\"],\r\n      \"!\": [\"pathAlternative\"],\r\n      \"(\": [\"pathAlternative\"],\r\n      IRI_REF: [\"pathAlternative\"],\r\n      PNAME_LN: [\"pathAlternative\"],\r\n      PNAME_NS: [\"pathAlternative\"]\r\n    },\r\n    pathAlternative: {\r\n      \"^\": [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      a: [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      \"!\": [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      \"(\": [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      IRI_REF: [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      PNAME_LN: [\"pathSequence\", \"*[|,pathSequence]\"],\r\n      PNAME_NS: [\"pathSequence\", \"*[|,pathSequence]\"]\r\n    },\r\n    pathElt: {\r\n      a: [\"pathPrimary\", \"?pathMod\"],\r\n      \"!\": [\"pathPrimary\", \"?pathMod\"],\r\n      \"(\": [\"pathPrimary\", \"?pathMod\"],\r\n      IRI_REF: [\"pathPrimary\", \"?pathMod\"],\r\n      PNAME_LN: [\"pathPrimary\", \"?pathMod\"],\r\n      PNAME_NS: [\"pathPrimary\", \"?pathMod\"]\r\n    },\r\n    pathEltOrInverse: {\r\n      a: [\"pathElt\"],\r\n      \"!\": [\"pathElt\"],\r\n      \"(\": [\"pathElt\"],\r\n      IRI_REF: [\"pathElt\"],\r\n      PNAME_LN: [\"pathElt\"],\r\n      PNAME_NS: [\"pathElt\"],\r\n      \"^\": [\"^\", \"pathElt\"]\r\n    },\r\n    pathMod: {\r\n      \"*\": [\"*\"],\r\n      \"?\": [\"?\"],\r\n      \"+\": [\"+\"],\r\n      \"{\": [\"{\", \"or([[integer,or([[,,or([},[integer,}]])],}])],[,,integer,}]])\"]\r\n    },\r\n    pathNegatedPropertySet: {\r\n      a: [\"pathOneInPropertySet\"],\r\n      \"^\": [\"pathOneInPropertySet\"],\r\n      IRI_REF: [\"pathOneInPropertySet\"],\r\n      PNAME_LN: [\"pathOneInPropertySet\"],\r\n      PNAME_NS: [\"pathOneInPropertySet\"],\r\n      \"(\": [\"(\", \"?[pathOneInPropertySet,*[|,pathOneInPropertySet]]\", \")\"]\r\n    },\r\n    pathOneInPropertySet: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"],\r\n      a: [\"a\"],\r\n      \"^\": [\"^\", \"or([iriRef,a])\"]\r\n    },\r\n    pathPrimary: {\r\n      IRI_REF: [\"storeProperty\", \"iriRef\"],\r\n      PNAME_LN: [\"storeProperty\", \"iriRef\"],\r\n      PNAME_NS: [\"storeProperty\", \"iriRef\"],\r\n      a: [\"storeProperty\", \"a\"],\r\n      \"!\": [\"!\", \"pathNegatedPropertySet\"],\r\n      \"(\": [\"(\", \"path\", \")\"]\r\n    },\r\n    pathSequence: {\r\n      \"^\": [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      a: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      \"!\": [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      \"(\": [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      IRI_REF: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      PNAME_LN: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"],\r\n      PNAME_NS: [\"pathEltOrInverse\", \"*[/,pathEltOrInverse]\"]\r\n    },\r\n    prefixDecl: {\r\n      PREFIX: [\"PREFIX\", \"PNAME_NS\", \"IRI_REF\"]\r\n    },\r\n    prefixedName: {\r\n      PNAME_LN: [\"PNAME_LN\"],\r\n      PNAME_NS: [\"PNAME_NS\"]\r\n    },\r\n    primaryExpression: {\r\n      \"(\": [\"brackettedExpression\"],\r\n      STR: [\"builtInCall\"],\r\n      LANG: [\"builtInCall\"],\r\n      LANGMATCHES: [\"builtInCall\"],\r\n      DATATYPE: [\"builtInCall\"],\r\n      BOUND: [\"builtInCall\"],\r\n      IRI: [\"builtInCall\"],\r\n      URI: [\"builtInCall\"],\r\n      BNODE: [\"builtInCall\"],\r\n      RAND: [\"builtInCall\"],\r\n      ABS: [\"builtInCall\"],\r\n      CEIL: [\"builtInCall\"],\r\n      FLOOR: [\"builtInCall\"],\r\n      ROUND: [\"builtInCall\"],\r\n      CONCAT: [\"builtInCall\"],\r\n      STRLEN: [\"builtInCall\"],\r\n      UCASE: [\"builtInCall\"],\r\n      LCASE: [\"builtInCall\"],\r\n      ENCODE_FOR_URI: [\"builtInCall\"],\r\n      CONTAINS: [\"builtInCall\"],\r\n      STRSTARTS: [\"builtInCall\"],\r\n      STRENDS: [\"builtInCall\"],\r\n      STRBEFORE: [\"builtInCall\"],\r\n      STRAFTER: [\"builtInCall\"],\r\n      YEAR: [\"builtInCall\"],\r\n      MONTH: [\"builtInCall\"],\r\n      DAY: [\"builtInCall\"],\r\n      HOURS: [\"builtInCall\"],\r\n      MINUTES: [\"builtInCall\"],\r\n      SECONDS: [\"builtInCall\"],\r\n      TIMEZONE: [\"builtInCall\"],\r\n      TZ: [\"builtInCall\"],\r\n      NOW: [\"builtInCall\"],\r\n      UUID: [\"builtInCall\"],\r\n      STRUUID: [\"builtInCall\"],\r\n      MD5: [\"builtInCall\"],\r\n      SHA1: [\"builtInCall\"],\r\n      SHA256: [\"builtInCall\"],\r\n      SHA384: [\"builtInCall\"],\r\n      SHA512: [\"builtInCall\"],\r\n      COALESCE: [\"builtInCall\"],\r\n      IF: [\"builtInCall\"],\r\n      STRLANG: [\"builtInCall\"],\r\n      STRDT: [\"builtInCall\"],\r\n      SAMETERM: [\"builtInCall\"],\r\n      ISIRI: [\"builtInCall\"],\r\n      ISURI: [\"builtInCall\"],\r\n      ISBLANK: [\"builtInCall\"],\r\n      ISLITERAL: [\"builtInCall\"],\r\n      ISNUMERIC: [\"builtInCall\"],\r\n      SUBSTR: [\"builtInCall\"],\r\n      REPLACE: [\"builtInCall\"],\r\n      REGEX: [\"builtInCall\"],\r\n      EXISTS: [\"builtInCall\"],\r\n      NOT: [\"builtInCall\"],\r\n      IRI_REF: [\"iriRefOrFunction\"],\r\n      PNAME_LN: [\"iriRefOrFunction\"],\r\n      PNAME_NS: [\"iriRefOrFunction\"],\r\n      STRING_LITERAL1: [\"rdfLiteral\"],\r\n      STRING_LITERAL2: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG1: [\"rdfLiteral\"],\r\n      STRING_LITERAL_LONG2: [\"rdfLiteral\"],\r\n      INTEGER: [\"numericLiteral\"],\r\n      DECIMAL: [\"numericLiteral\"],\r\n      DOUBLE: [\"numericLiteral\"],\r\n      INTEGER_POSITIVE: [\"numericLiteral\"],\r\n      DECIMAL_POSITIVE: [\"numericLiteral\"],\r\n      DOUBLE_POSITIVE: [\"numericLiteral\"],\r\n      INTEGER_NEGATIVE: [\"numericLiteral\"],\r\n      DECIMAL_NEGATIVE: [\"numericLiteral\"],\r\n      DOUBLE_NEGATIVE: [\"numericLiteral\"],\r\n      TRUE: [\"booleanLiteral\"],\r\n      FALSE: [\"booleanLiteral\"],\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      COUNT: [\"aggregate\"],\r\n      SUM: [\"aggregate\"],\r\n      MIN: [\"aggregate\"],\r\n      MAX: [\"aggregate\"],\r\n      AVG: [\"aggregate\"],\r\n      SAMPLE: [\"aggregate\"],\r\n      GROUP_CONCAT: [\"aggregate\"]\r\n    },\r\n    prologue: {\r\n      BASE: [\"*or([baseDecl,prefixDecl])\"],\r\n      PREFIX: [\"*or([baseDecl,prefixDecl])\"],\r\n      $: [\"*or([baseDecl,prefixDecl])\"],\r\n      CONSTRUCT: [\"*or([baseDecl,prefixDecl])\"],\r\n      DESCRIBE: [\"*or([baseDecl,prefixDecl])\"],\r\n      ASK: [\"*or([baseDecl,prefixDecl])\"],\r\n      INSERT: [\"*or([baseDecl,prefixDecl])\"],\r\n      DELETE: [\"*or([baseDecl,prefixDecl])\"],\r\n      SELECT: [\"*or([baseDecl,prefixDecl])\"],\r\n      LOAD: [\"*or([baseDecl,prefixDecl])\"],\r\n      CLEAR: [\"*or([baseDecl,prefixDecl])\"],\r\n      DROP: [\"*or([baseDecl,prefixDecl])\"],\r\n      ADD: [\"*or([baseDecl,prefixDecl])\"],\r\n      MOVE: [\"*or([baseDecl,prefixDecl])\"],\r\n      COPY: [\"*or([baseDecl,prefixDecl])\"],\r\n      CREATE: [\"*or([baseDecl,prefixDecl])\"],\r\n      WITH: [\"*or([baseDecl,prefixDecl])\"]\r\n    },\r\n    propertyList: {\r\n      a: [\"propertyListNotEmpty\"],\r\n      VAR1: [\"propertyListNotEmpty\"],\r\n      VAR2: [\"propertyListNotEmpty\"],\r\n      IRI_REF: [\"propertyListNotEmpty\"],\r\n      PNAME_LN: [\"propertyListNotEmpty\"],\r\n      PNAME_NS: [\"propertyListNotEmpty\"],\r\n      \".\": [],\r\n      \"}\": [],\r\n      GRAPH: []\r\n    },\r\n    propertyListNotEmpty: {\r\n      a: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      VAR1: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      VAR2: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      IRI_REF: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      PNAME_LN: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"],\r\n      PNAME_NS: [\"verb\", \"objectList\", \"*[;,?[verb,objectList]]\"]\r\n    },\r\n    propertyListPath: {\r\n      a: [\"propertyListNotEmpty\"],\r\n      VAR1: [\"propertyListNotEmpty\"],\r\n      VAR2: [\"propertyListNotEmpty\"],\r\n      IRI_REF: [\"propertyListNotEmpty\"],\r\n      PNAME_LN: [\"propertyListNotEmpty\"],\r\n      PNAME_NS: [\"propertyListNotEmpty\"],\r\n      \".\": [],\r\n      \"{\": [],\r\n      OPTIONAL: [],\r\n      MINUS: [],\r\n      GRAPH: [],\r\n      SERVICE: [],\r\n      FILTER: [],\r\n      BIND: [],\r\n      VALUES: [],\r\n      \"}\": []\r\n    },\r\n    propertyListPathNotEmpty: {\r\n      VAR1: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      VAR2: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \"^\": [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      a: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \"!\": [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      \"(\": [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      IRI_REF: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      PNAME_LN: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"],\r\n      PNAME_NS: [\"or([verbPath,verbSimple])\", \"objectListPath\", \"*[;,?[or([verbPath,verbSimple]),objectList]]\"]\r\n    },\r\n    quadData: {\r\n      \"{\": [\"{\", \"disallowVars\", \"quads\", \"allowVars\", \"}\"]\r\n    },\r\n    quadDataNoBnodes: {\r\n      \"{\": [\"{\", \"disallowBnodes\", \"disallowVars\", \"quads\", \"allowVars\", \"allowBnodes\", \"}\"]\r\n    },\r\n    quadPattern: {\r\n      \"{\": [\"{\", \"quads\", \"}\"]\r\n    },\r\n    quadPatternNoBnodes: {\r\n      \"{\": [\"{\", \"disallowBnodes\", \"quads\", \"allowBnodes\", \"}\"]\r\n    },\r\n    quads: {\r\n      GRAPH: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      VAR1: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      VAR2: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      NIL: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"(\": [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"[\": [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      IRI_REF: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      TRUE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      FALSE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      BLANK_NODE_LABEL: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      ANON: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      PNAME_LN: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      PNAME_NS: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL1: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL2: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG1: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG2: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      INTEGER: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DECIMAL: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DOUBLE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      INTEGER_POSITIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DECIMAL_POSITIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DOUBLE_POSITIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      INTEGER_NEGATIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DECIMAL_NEGATIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      DOUBLE_NEGATIVE: [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"],\r\n      \"}\": [\"?triplesTemplate\", \"*[quadsNotTriples,?.,?triplesTemplate]\"]\r\n    },\r\n    quadsNotTriples: {\r\n      GRAPH: [\"GRAPH\", \"varOrIRIref\", \"{\", \"?triplesTemplate\", \"}\"]\r\n    },\r\n    queryAll: {\r\n      CONSTRUCT: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"],\r\n      DESCRIBE: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"],\r\n      ASK: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"],\r\n      SELECT: [\"or([selectQuery,constructQuery,describeQuery,askQuery])\", \"valuesClause\"]\r\n    },\r\n    rdfLiteral: {\r\n      STRING_LITERAL1: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"],\r\n      STRING_LITERAL2: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"],\r\n      STRING_LITERAL_LONG1: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"],\r\n      STRING_LITERAL_LONG2: [\"string\", \"?or([LANGTAG,[^^,iriRef]])\"]\r\n    },\r\n    regexExpression: {\r\n      REGEX: [\"REGEX\", \"(\", \"expression\", \",\", \"expression\", \"?[,,expression]\", \")\"]\r\n    },\r\n    relationalExpression: {\r\n      \"!\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"+\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"-\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      VAR1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      VAR2: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      \"(\": [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      LANG: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      LANGMATCHES: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DATATYPE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      BOUND: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IRI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      URI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      BNODE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      RAND: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ABS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      CEIL: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      FLOOR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ROUND: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      CONCAT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRLEN: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      UCASE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      LCASE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ENCODE_FOR_URI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      CONTAINS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRSTARTS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRENDS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRBEFORE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRAFTER: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      YEAR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MONTH: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DAY: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      HOURS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MINUTES: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SECONDS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      TIMEZONE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      TZ: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      NOW: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      UUID: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRUUID: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MD5: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA256: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA384: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SHA512: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      COALESCE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IF: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRLANG: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRDT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SAMETERM: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISIRI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISURI: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISBLANK: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISLITERAL: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      ISNUMERIC: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      TRUE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      FALSE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      COUNT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SUM: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MIN: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      MAX: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      AVG: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SAMPLE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      GROUP_CONCAT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      SUBSTR: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      REPLACE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      REGEX: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      EXISTS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      NOT: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      IRI_REF: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL2: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL_LONG1: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      STRING_LITERAL_LONG2: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      INTEGER: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DECIMAL: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DOUBLE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      INTEGER_POSITIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DECIMAL_POSITIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DOUBLE_POSITIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      INTEGER_NEGATIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DECIMAL_NEGATIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      DOUBLE_NEGATIVE: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      PNAME_LN: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ],\r\n      PNAME_NS: [\r\n        \"numericExpression\",\r\n        \"?or([[=,numericExpression],[!=,numericExpression],[<,numericExpression],[>,numericExpression],[<=,numericExpression],[>=,numericExpression],[IN,expressionList],[NOT,IN,expressionList]])\"\r\n      ]\r\n    },\r\n    selectClause: {\r\n      SELECT: [\"SELECT\", \"?or([DISTINCT,REDUCED])\", \"or([+or([var,[ (,expression,AS,var,)]]),*])\"]\r\n    },\r\n    selectQuery: {\r\n      SELECT: [\"selectClause\", \"*datasetClause\", \"whereClause\", \"solutionModifier\"]\r\n    },\r\n    serviceGraphPattern: {\r\n      SERVICE: [\"SERVICE\", \"?SILENT\", \"varOrIRIref\", \"groupGraphPattern\"]\r\n    },\r\n    solutionModifier: {\r\n      LIMIT: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      OFFSET: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      ORDER: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      HAVING: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      GROUP: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      VALUES: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      $: [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"],\r\n      \"}\": [\"?groupClause\", \"?havingClause\", \"?orderClause\", \"?limitOffsetClauses\"]\r\n    },\r\n    sourceSelector: {\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"]\r\n    },\r\n    sparql11: {\r\n      $: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      CONSTRUCT: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      DESCRIBE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      ASK: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      INSERT: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      DELETE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      SELECT: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      LOAD: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      CLEAR: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      DROP: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      ADD: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      MOVE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      COPY: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      CREATE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      WITH: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      BASE: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"],\r\n      PREFIX: [\"prologue\", \"or([queryAll,updateAll])\", \"$\"]\r\n    },\r\n    storeProperty: {\r\n      VAR1: [],\r\n      VAR2: [],\r\n      IRI_REF: [],\r\n      PNAME_LN: [],\r\n      PNAME_NS: [],\r\n      a: []\r\n    },\r\n    strReplaceExpression: {\r\n      REPLACE: [\"REPLACE\", \"(\", \"expression\", \",\", \"expression\", \",\", \"expression\", \"?[,,expression]\", \")\"]\r\n    },\r\n    string: {\r\n      STRING_LITERAL1: [\"STRING_LITERAL1\"],\r\n      STRING_LITERAL2: [\"STRING_LITERAL2\"],\r\n      STRING_LITERAL_LONG1: [\"STRING_LITERAL_LONG1\"],\r\n      STRING_LITERAL_LONG2: [\"STRING_LITERAL_LONG2\"]\r\n    },\r\n    subSelect: {\r\n      SELECT: [\"selectClause\", \"whereClause\", \"solutionModifier\", \"valuesClause\"]\r\n    },\r\n    substringExpression: {\r\n      SUBSTR: [\"SUBSTR\", \"(\", \"expression\", \",\", \"expression\", \"?[,,expression]\", \")\"]\r\n    },\r\n    triplesBlock: {\r\n      VAR1: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      VAR2: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      NIL: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      \"(\": [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      \"[\": [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      IRI_REF: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      TRUE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      FALSE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      BLANK_NODE_LABEL: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      ANON: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      PNAME_LN: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      PNAME_NS: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL1: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL2: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG1: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      STRING_LITERAL_LONG2: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      INTEGER: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DECIMAL: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DOUBLE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      INTEGER_POSITIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DECIMAL_POSITIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DOUBLE_POSITIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      INTEGER_NEGATIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DECIMAL_NEGATIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"],\r\n      DOUBLE_NEGATIVE: [\"triplesSameSubjectPath\", \"?[.,?triplesBlock]\"]\r\n    },\r\n    triplesNode: {\r\n      \"(\": [\"collection\"],\r\n      \"[\": [\"blankNodePropertyList\"]\r\n    },\r\n    triplesNodePath: {\r\n      \"(\": [\"collectionPath\"],\r\n      \"[\": [\"blankNodePropertyListPath\"]\r\n    },\r\n    triplesSameSubject: {\r\n      VAR1: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      VAR2: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      NIL: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      IRI_REF: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      TRUE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      FALSE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      ANON: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      PNAME_LN: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      PNAME_NS: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL1: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL2: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      INTEGER: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DECIMAL: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DOUBLE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\", \"propertyListNotEmpty\"],\r\n      \"(\": [\"triplesNode\", \"propertyList\"],\r\n      \"[\": [\"triplesNode\", \"propertyList\"]\r\n    },\r\n    triplesSameSubjectPath: {\r\n      VAR1: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      VAR2: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      NIL: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      IRI_REF: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      TRUE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      FALSE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      BLANK_NODE_LABEL: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      ANON: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      PNAME_LN: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      PNAME_NS: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL1: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL2: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL_LONG1: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      STRING_LITERAL_LONG2: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      INTEGER: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DECIMAL: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DOUBLE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      INTEGER_POSITIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DECIMAL_POSITIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DOUBLE_POSITIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      INTEGER_NEGATIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DECIMAL_NEGATIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      DOUBLE_NEGATIVE: [\"varOrTerm\", \"propertyListPathNotEmpty\"],\r\n      \"(\": [\"triplesNodePath\", \"propertyListPath\"],\r\n      \"[\": [\"triplesNodePath\", \"propertyListPath\"]\r\n    },\r\n    triplesTemplate: {\r\n      VAR1: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      VAR2: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      NIL: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      \"(\": [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      \"[\": [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      IRI_REF: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      TRUE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      FALSE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      BLANK_NODE_LABEL: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      ANON: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      PNAME_LN: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      PNAME_NS: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL1: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL2: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG1: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      STRING_LITERAL_LONG2: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      INTEGER: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DECIMAL: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DOUBLE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      INTEGER_POSITIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DECIMAL_POSITIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DOUBLE_POSITIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      INTEGER_NEGATIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DECIMAL_NEGATIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"],\r\n      DOUBLE_NEGATIVE: [\"triplesSameSubject\", \"?[.,?triplesTemplate]\"]\r\n    },\r\n    unaryExpression: {\r\n      \"!\": [\"!\", \"primaryExpression\"],\r\n      \"+\": [\"+\", \"primaryExpression\"],\r\n      \"-\": [\"-\", \"primaryExpression\"],\r\n      VAR1: [\"primaryExpression\"],\r\n      VAR2: [\"primaryExpression\"],\r\n      \"(\": [\"primaryExpression\"],\r\n      STR: [\"primaryExpression\"],\r\n      LANG: [\"primaryExpression\"],\r\n      LANGMATCHES: [\"primaryExpression\"],\r\n      DATATYPE: [\"primaryExpression\"],\r\n      BOUND: [\"primaryExpression\"],\r\n      IRI: [\"primaryExpression\"],\r\n      URI: [\"primaryExpression\"],\r\n      BNODE: [\"primaryExpression\"],\r\n      RAND: [\"primaryExpression\"],\r\n      ABS: [\"primaryExpression\"],\r\n      CEIL: [\"primaryExpression\"],\r\n      FLOOR: [\"primaryExpression\"],\r\n      ROUND: [\"primaryExpression\"],\r\n      CONCAT: [\"primaryExpression\"],\r\n      STRLEN: [\"primaryExpression\"],\r\n      UCASE: [\"primaryExpression\"],\r\n      LCASE: [\"primaryExpression\"],\r\n      ENCODE_FOR_URI: [\"primaryExpression\"],\r\n      CONTAINS: [\"primaryExpression\"],\r\n      STRSTARTS: [\"primaryExpression\"],\r\n      STRENDS: [\"primaryExpression\"],\r\n      STRBEFORE: [\"primaryExpression\"],\r\n      STRAFTER: [\"primaryExpression\"],\r\n      YEAR: [\"primaryExpression\"],\r\n      MONTH: [\"primaryExpression\"],\r\n      DAY: [\"primaryExpression\"],\r\n      HOURS: [\"primaryExpression\"],\r\n      MINUTES: [\"primaryExpression\"],\r\n      SECONDS: [\"primaryExpression\"],\r\n      TIMEZONE: [\"primaryExpression\"],\r\n      TZ: [\"primaryExpression\"],\r\n      NOW: [\"primaryExpression\"],\r\n      UUID: [\"primaryExpression\"],\r\n      STRUUID: [\"primaryExpression\"],\r\n      MD5: [\"primaryExpression\"],\r\n      SHA1: [\"primaryExpression\"],\r\n      SHA256: [\"primaryExpression\"],\r\n      SHA384: [\"primaryExpression\"],\r\n      SHA512: [\"primaryExpression\"],\r\n      COALESCE: [\"primaryExpression\"],\r\n      IF: [\"primaryExpression\"],\r\n      STRLANG: [\"primaryExpression\"],\r\n      STRDT: [\"primaryExpression\"],\r\n      SAMETERM: [\"primaryExpression\"],\r\n      ISIRI: [\"primaryExpression\"],\r\n      ISURI: [\"primaryExpression\"],\r\n      ISBLANK: [\"primaryExpression\"],\r\n      ISLITERAL: [\"primaryExpression\"],\r\n      ISNUMERIC: [\"primaryExpression\"],\r\n      TRUE: [\"primaryExpression\"],\r\n      FALSE: [\"primaryExpression\"],\r\n      COUNT: [\"primaryExpression\"],\r\n      SUM: [\"primaryExpression\"],\r\n      MIN: [\"primaryExpression\"],\r\n      MAX: [\"primaryExpression\"],\r\n      AVG: [\"primaryExpression\"],\r\n      SAMPLE: [\"primaryExpression\"],\r\n      GROUP_CONCAT: [\"primaryExpression\"],\r\n      SUBSTR: [\"primaryExpression\"],\r\n      REPLACE: [\"primaryExpression\"],\r\n      REGEX: [\"primaryExpression\"],\r\n      EXISTS: [\"primaryExpression\"],\r\n      NOT: [\"primaryExpression\"],\r\n      IRI_REF: [\"primaryExpression\"],\r\n      STRING_LITERAL1: [\"primaryExpression\"],\r\n      STRING_LITERAL2: [\"primaryExpression\"],\r\n      STRING_LITERAL_LONG1: [\"primaryExpression\"],\r\n      STRING_LITERAL_LONG2: [\"primaryExpression\"],\r\n      INTEGER: [\"primaryExpression\"],\r\n      DECIMAL: [\"primaryExpression\"],\r\n      DOUBLE: [\"primaryExpression\"],\r\n      INTEGER_POSITIVE: [\"primaryExpression\"],\r\n      DECIMAL_POSITIVE: [\"primaryExpression\"],\r\n      DOUBLE_POSITIVE: [\"primaryExpression\"],\r\n      INTEGER_NEGATIVE: [\"primaryExpression\"],\r\n      DECIMAL_NEGATIVE: [\"primaryExpression\"],\r\n      DOUBLE_NEGATIVE: [\"primaryExpression\"],\r\n      PNAME_LN: [\"primaryExpression\"],\r\n      PNAME_NS: [\"primaryExpression\"]\r\n    },\r\n    update: {\r\n      INSERT: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      DELETE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      LOAD: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      CLEAR: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      DROP: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      ADD: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      MOVE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      COPY: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      CREATE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      WITH: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      BASE: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      PREFIX: [\"prologue\", \"?[update1,?[;,update]]\"],\r\n      $: [\"prologue\", \"?[update1,?[;,update]]\"]\r\n    },\r\n    update1: {\r\n      LOAD: [\"load\"],\r\n      CLEAR: [\"clear\"],\r\n      DROP: [\"drop\"],\r\n      ADD: [\"add\"],\r\n      MOVE: [\"move\"],\r\n      COPY: [\"copy\"],\r\n      CREATE: [\"create\"],\r\n      INSERT: [\"INSERT\", \"insert1\"],\r\n      DELETE: [\"DELETE\", \"delete1\"],\r\n      WITH: [\"modify\"]\r\n    },\r\n    updateAll: {\r\n      INSERT: [\"?[update1,?[;,update]]\"],\r\n      DELETE: [\"?[update1,?[;,update]]\"],\r\n      LOAD: [\"?[update1,?[;,update]]\"],\r\n      CLEAR: [\"?[update1,?[;,update]]\"],\r\n      DROP: [\"?[update1,?[;,update]]\"],\r\n      ADD: [\"?[update1,?[;,update]]\"],\r\n      MOVE: [\"?[update1,?[;,update]]\"],\r\n      COPY: [\"?[update1,?[;,update]]\"],\r\n      CREATE: [\"?[update1,?[;,update]]\"],\r\n      WITH: [\"?[update1,?[;,update]]\"],\r\n      $: [\"?[update1,?[;,update]]\"]\r\n    },\r\n    usingClause: {\r\n      USING: [\"USING\", \"or([iriRef,[NAMED,iriRef]])\"]\r\n    },\r\n    valueLogical: {\r\n      \"!\": [\"relationalExpression\"],\r\n      \"+\": [\"relationalExpression\"],\r\n      \"-\": [\"relationalExpression\"],\r\n      VAR1: [\"relationalExpression\"],\r\n      VAR2: [\"relationalExpression\"],\r\n      \"(\": [\"relationalExpression\"],\r\n      STR: [\"relationalExpression\"],\r\n      LANG: [\"relationalExpression\"],\r\n      LANGMATCHES: [\"relationalExpression\"],\r\n      DATATYPE: [\"relationalExpression\"],\r\n      BOUND: [\"relationalExpression\"],\r\n      IRI: [\"relationalExpression\"],\r\n      URI: [\"relationalExpression\"],\r\n      BNODE: [\"relationalExpression\"],\r\n      RAND: [\"relationalExpression\"],\r\n      ABS: [\"relationalExpression\"],\r\n      CEIL: [\"relationalExpression\"],\r\n      FLOOR: [\"relationalExpression\"],\r\n      ROUND: [\"relationalExpression\"],\r\n      CONCAT: [\"relationalExpression\"],\r\n      STRLEN: [\"relationalExpression\"],\r\n      UCASE: [\"relationalExpression\"],\r\n      LCASE: [\"relationalExpression\"],\r\n      ENCODE_FOR_URI: [\"relationalExpression\"],\r\n      CONTAINS: [\"relationalExpression\"],\r\n      STRSTARTS: [\"relationalExpression\"],\r\n      STRENDS: [\"relationalExpression\"],\r\n      STRBEFORE: [\"relationalExpression\"],\r\n      STRAFTER: [\"relationalExpression\"],\r\n      YEAR: [\"relationalExpression\"],\r\n      MONTH: [\"relationalExpression\"],\r\n      DAY: [\"relationalExpression\"],\r\n      HOURS: [\"relationalExpression\"],\r\n      MINUTES: [\"relationalExpression\"],\r\n      SECONDS: [\"relationalExpression\"],\r\n      TIMEZONE: [\"relationalExpression\"],\r\n      TZ: [\"relationalExpression\"],\r\n      NOW: [\"relationalExpression\"],\r\n      UUID: [\"relationalExpression\"],\r\n      STRUUID: [\"relationalExpression\"],\r\n      MD5: [\"relationalExpression\"],\r\n      SHA1: [\"relationalExpression\"],\r\n      SHA256: [\"relationalExpression\"],\r\n      SHA384: [\"relationalExpression\"],\r\n      SHA512: [\"relationalExpression\"],\r\n      COALESCE: [\"relationalExpression\"],\r\n      IF: [\"relationalExpression\"],\r\n      STRLANG: [\"relationalExpression\"],\r\n      STRDT: [\"relationalExpression\"],\r\n      SAMETERM: [\"relationalExpression\"],\r\n      ISIRI: [\"relationalExpression\"],\r\n      ISURI: [\"relationalExpression\"],\r\n      ISBLANK: [\"relationalExpression\"],\r\n      ISLITERAL: [\"relationalExpression\"],\r\n      ISNUMERIC: [\"relationalExpression\"],\r\n      TRUE: [\"relationalExpression\"],\r\n      FALSE: [\"relationalExpression\"],\r\n      COUNT: [\"relationalExpression\"],\r\n      SUM: [\"relationalExpression\"],\r\n      MIN: [\"relationalExpression\"],\r\n      MAX: [\"relationalExpression\"],\r\n      AVG: [\"relationalExpression\"],\r\n      SAMPLE: [\"relationalExpression\"],\r\n      GROUP_CONCAT: [\"relationalExpression\"],\r\n      SUBSTR: [\"relationalExpression\"],\r\n      REPLACE: [\"relationalExpression\"],\r\n      REGEX: [\"relationalExpression\"],\r\n      EXISTS: [\"relationalExpression\"],\r\n      NOT: [\"relationalExpression\"],\r\n      IRI_REF: [\"relationalExpression\"],\r\n      STRING_LITERAL1: [\"relationalExpression\"],\r\n      STRING_LITERAL2: [\"relationalExpression\"],\r\n      STRING_LITERAL_LONG1: [\"relationalExpression\"],\r\n      STRING_LITERAL_LONG2: [\"relationalExpression\"],\r\n      INTEGER: [\"relationalExpression\"],\r\n      DECIMAL: [\"relationalExpression\"],\r\n      DOUBLE: [\"relationalExpression\"],\r\n      INTEGER_POSITIVE: [\"relationalExpression\"],\r\n      DECIMAL_POSITIVE: [\"relationalExpression\"],\r\n      DOUBLE_POSITIVE: [\"relationalExpression\"],\r\n      INTEGER_NEGATIVE: [\"relationalExpression\"],\r\n      DECIMAL_NEGATIVE: [\"relationalExpression\"],\r\n      DOUBLE_NEGATIVE: [\"relationalExpression\"],\r\n      PNAME_LN: [\"relationalExpression\"],\r\n      PNAME_NS: [\"relationalExpression\"]\r\n    },\r\n    valuesClause: {\r\n      VALUES: [\"VALUES\", \"dataBlock\"],\r\n      $: [],\r\n      \"}\": []\r\n    },\r\n    var: {\r\n      VAR1: [\"VAR1\"],\r\n      VAR2: [\"VAR2\"]\r\n    },\r\n    varOrIRIref: {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      IRI_REF: [\"iriRef\"],\r\n      PNAME_LN: [\"iriRef\"],\r\n      PNAME_NS: [\"iriRef\"]\r\n    },\r\n    varOrTerm: {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"],\r\n      NIL: [\"graphTerm\"],\r\n      IRI_REF: [\"graphTerm\"],\r\n      TRUE: [\"graphTerm\"],\r\n      FALSE: [\"graphTerm\"],\r\n      BLANK_NODE_LABEL: [\"graphTerm\"],\r\n      ANON: [\"graphTerm\"],\r\n      PNAME_LN: [\"graphTerm\"],\r\n      PNAME_NS: [\"graphTerm\"],\r\n      STRING_LITERAL1: [\"graphTerm\"],\r\n      STRING_LITERAL2: [\"graphTerm\"],\r\n      STRING_LITERAL_LONG1: [\"graphTerm\"],\r\n      STRING_LITERAL_LONG2: [\"graphTerm\"],\r\n      INTEGER: [\"graphTerm\"],\r\n      DECIMAL: [\"graphTerm\"],\r\n      DOUBLE: [\"graphTerm\"],\r\n      INTEGER_POSITIVE: [\"graphTerm\"],\r\n      DECIMAL_POSITIVE: [\"graphTerm\"],\r\n      DOUBLE_POSITIVE: [\"graphTerm\"],\r\n      INTEGER_NEGATIVE: [\"graphTerm\"],\r\n      DECIMAL_NEGATIVE: [\"graphTerm\"],\r\n      DOUBLE_NEGATIVE: [\"graphTerm\"]\r\n    },\r\n    verb: {\r\n      VAR1: [\"storeProperty\", \"varOrIRIref\"],\r\n      VAR2: [\"storeProperty\", \"varOrIRIref\"],\r\n      IRI_REF: [\"storeProperty\", \"varOrIRIref\"],\r\n      PNAME_LN: [\"storeProperty\", \"varOrIRIref\"],\r\n      PNAME_NS: [\"storeProperty\", \"varOrIRIref\"],\r\n      a: [\"storeProperty\", \"a\"]\r\n    },\r\n    verbPath: {\r\n      \"^\": [\"path\"],\r\n      a: [\"path\"],\r\n      \"!\": [\"path\"],\r\n      \"(\": [\"path\"],\r\n      IRI_REF: [\"path\"],\r\n      PNAME_LN: [\"path\"],\r\n      PNAME_NS: [\"path\"]\r\n    },\r\n    verbSimple: {\r\n      VAR1: [\"var\"],\r\n      VAR2: [\"var\"]\r\n    },\r\n    whereClause: {\r\n      \"{\": [\"?WHERE\", \"groupGraphPattern\"],\r\n      WHERE: [\"?WHERE\", \"groupGraphPattern\"]\r\n    }\r\n  },\r\n\r\n  keywords: /^(GROUP_CONCAT|DATATYPE|BASE|PREFIX|SELECT|CONSTRUCT|DESCRIBE|ASK|FROM|NAMED|ORDER|BY|LIMIT|ASC|DESC|OFFSET|DISTINCT|REDUCED|WHERE|GRAPH|OPTIONAL|UNION|FILTER|GROUP|HAVING|AS|VALUES|LOAD|CLEAR|DROP|CREATE|MOVE|COPY|SILENT|INSERT|DELETE|DATA|WITH|TO|USING|NAMED|MINUS|BIND|LANGMATCHES|LANG|BOUND|SAMETERM|ISIRI|ISURI|ISBLANK|ISLITERAL|REGEX|TRUE|FALSE|UNDEF|ADD|DEFAULT|ALL|SERVICE|INTO|IN|NOT|IRI|URI|BNODE|RAND|ABS|CEIL|FLOOR|ROUND|CONCAT|STRLEN|UCASE|LCASE|ENCODE_FOR_URI|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|NOW|UUID|STRUUID|MD5|SHA1|SHA256|SHA384|SHA512|COALESCE|IF|STRLANG|STRDT|ISNUMERIC|SUBSTR|REPLACE|EXISTS|COUNT|SUM|MIN|MAX|AVG|SAMPLE|SEPARATOR|STR)/i,\r\n\r\n  punct: /^(\\*|a|\\.|\\{|\\}|,|\\(|\\)|;|\\[|\\]|\\|\\||&&|=|!=|!|<=|>=|<|>|\\+|-|\\/|\\^\\^|\\?|\\||\\^)/,\r\n\r\n  startSymbol: \"sparql11\",\r\n  acceptEmpty: true\r\n};\r\n","\"use strict\";\r\nvar CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})();\r\nCodeMirror.defineMode(\"sparql11\", function(config, parserConfig) {\r\n  var indentUnit = config.indentUnit;\r\n\r\n  var grammar = require(\"./_tokenizer-table.js\");\r\n  var ll1_table = grammar.table;\r\n\r\n  var IRI_REF = '<[^<>\"`\\|\\{\\}\\^\\\\\\x00-\\x20]*>';\r\n  /*\r\n\t * PN_CHARS_BASE =\r\n\t * '[A-Z]|[a-z]|[\\\\u00C0-\\\\u00D6]|[\\\\u00D8-\\\\u00F6]|[\\\\u00F8-\\\\u02FF]|[\\\\u0370-\\\\u037D]|[\\\\u037F-\\\\u1FFF]|[\\\\u200C-\\\\u200D]|[\\\\u2070-\\\\u218F]|[\\\\u2C00-\\\\u2FEF]|[\\\\u3001-\\\\uD7FF]|[\\\\uF900-\\\\uFDCF]|[\\\\uFDF0-\\\\uFFFD]|[\\\\u10000-\\\\uEFFFF]';\r\n\t */\r\n\r\n  var PN_CHARS_BASE = \"[A-Za-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD]\";\r\n  var PN_CHARS_U = PN_CHARS_BASE + \"|_\";\r\n\r\n  var PN_CHARS = \"(\" + PN_CHARS_U + \"|-|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])\";\r\n  var VARNAME = \"(\" + PN_CHARS_U + \"|[0-9])\" + \"(\" + PN_CHARS_U + \"|[0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040])*\";\r\n  var VAR1 = \"\\\\?\" + VARNAME;\r\n  var VAR2 = \"\\\\$\" + VARNAME;\r\n\r\n  var PN_PREFIX = \"(\" + PN_CHARS_BASE + \")(((\" + PN_CHARS + \")|\\\\.)*(\" + PN_CHARS + \"))?\";\r\n\r\n  var HEX = \"[0-9A-Fa-f]\";\r\n  var PERCENT = \"(%\" + HEX + HEX + \")\";\r\n  var PN_LOCAL_ESC = \"(\\\\\\\\[_~\\\\.\\\\-!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=/\\\\?#@%])\";\r\n  var PLX = \"(\" + PERCENT + \"|\" + PN_LOCAL_ESC + \")\";\r\n  var PN_LOCAL = \"(\" +\r\n    PN_CHARS_U +\r\n    \"|:|[0-9]|\" +\r\n    PLX +\r\n    \")((\" +\r\n    PN_CHARS +\r\n    \"|\\\\.|:|\" +\r\n    PLX +\r\n    \")*(\" +\r\n    PN_CHARS +\r\n    \"|:|\" +\r\n    PLX +\r\n    \"))?\";\r\n  var BLANK_NODE_LABEL = \"_:(\" + PN_CHARS_U + \"|[0-9])((\" + PN_CHARS + \"|\\\\.)*\" + PN_CHARS + \")?\";\r\n  var PNAME_NS = \"(\" + PN_PREFIX + \")?:\";\r\n  var PNAME_LN = PNAME_NS + PN_LOCAL;\r\n  var LANGTAG = \"@[a-zA-Z]+(-[a-zA-Z0-9]+)*\";\r\n\r\n  var EXPONENT = \"[eE][\\\\+-]?[0-9]+\";\r\n  var INTEGER = \"[0-9]+\";\r\n  var DECIMAL = \"(([0-9]+\\\\.[0-9]*)|(\\\\.[0-9]+))\";\r\n  var DOUBLE = \"(([0-9]+\\\\.[0-9]*\" + EXPONENT + \")|\" + \"(\\\\.[0-9]+\" + EXPONENT + \")|\" + \"([0-9]+\" + EXPONENT + \"))\";\r\n\r\n  var INTEGER_POSITIVE = \"\\\\+\" + INTEGER;\r\n  var DECIMAL_POSITIVE = \"\\\\+\" + DECIMAL;\r\n  var DOUBLE_POSITIVE = \"\\\\+\" + DOUBLE;\r\n  var INTEGER_NEGATIVE = \"-\" + INTEGER;\r\n  var DECIMAL_NEGATIVE = \"-\" + DECIMAL;\r\n  var DOUBLE_NEGATIVE = \"-\" + DOUBLE;\r\n\r\n  var ECHAR = \"\\\\\\\\[tbnrf\\\\\\\\\\\"']\";\r\n\r\n  //IMPORTANT: this unicode rule is not in the official grammar.\r\n  //Reason: https://github.com/YASGUI/YASQE/issues/49\r\n  //unicode escape sequences (which the sparql spec considers part of the pre-processing of sparql queries)\r\n  //are marked as invalid. We have little choice (other than adding a layer of complixity) than to modify the grammar accordingly\r\n  //however, for now only allow these escape sequences in literals (where actually, this should be allows in e.g. prefixes as well)\r\n  var hex4 = HEX + \"{4}\";\r\n  var unicode = \"(\\\\\\\\u\" + hex4 + \"|\\\\\\\\U00(10|0\" + HEX + \")\" + hex4 + \")\";\r\n  var LINE_BREAK = \"\\n\";\r\n  var STRING_LITERAL1 = \"'(([^\\\\x27\\\\x5C\\\\x0A\\\\x0D])|\" + ECHAR + \"|\" + unicode + \")*'\";\r\n  var STRING_LITERAL2 = '\"(([^\\\\x22\\\\x5C\\\\x0A\\\\x0D])|' + ECHAR + \"|\" + unicode + ')*\"';\r\n\r\n  var STRING_LITERAL_LONG = {\r\n    SINGLE: {\r\n      CAT: \"STRING_LITERAL_LONG1\",\r\n      QUOTES: \"'''\",\r\n      CONTENTS: \"(('|'')?([^'\\\\\\\\]|\" + ECHAR + \"|\" + unicode + \"))*\"\r\n    },\r\n    DOUBLE: {\r\n      CAT: \"STRING_LITERAL_LONG2\",\r\n      QUOTES: '\"\"\"',\r\n      CONTENTS: '((\"|\"\")?([^\"\\\\\\\\]|' + ECHAR + \"|\" + unicode + \"))*\"\r\n    }\r\n  };\r\n  for (var key in STRING_LITERAL_LONG) {\r\n    STRING_LITERAL_LONG[key].COMPLETE = STRING_LITERAL_LONG[key].QUOTES +\r\n      STRING_LITERAL_LONG[key].CONTENTS +\r\n      STRING_LITERAL_LONG[key].QUOTES;\r\n  }\r\n  //\tvar STRING_LITERAL_LONG_QUOTES = {\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"'''\",\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES2\": '\"\"\"',\r\n  //\t}\r\n  //\tvar STRING_LITERAL_LONG_CONTENTS = {\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES1\": \"(('|'')?([^'\\\\\\\\]|\"+ECHAR+\"|\"+unicode+\"))*\",\r\n  //\t\t\"STRING_LITERAL_LONG_QUOTES2\": '((\"|\"\")?([^\"\\\\\\\\]|'+ECHAR+'|'+unicode+'))*'\r\n  //\t};\r\n  //\tvar STRING_LITERAL_LONG1 = STRING_LITERAL_LONG['SINGLE'].QUOTES + STRING_LITERAL_LONG['SINGLE'].CONTENTS + STRING_LITERAL_LONG['SINGLE'].QUOTES;\r\n  //\tvar STRING_LITERAL_LONG2 = STRING_LITERAL_LONG['DOUBLE'].QUOTES + STRING_LITERAL_LONG['DOUBLE'].CONTENTS + STRING_LITERAL_LONG['DOUBLE'].QUOTES;\r\n\r\n  //\tvar stringLiteralLongContentTerminals = {};\r\n  //\tfor (var key in STRING_LITERAL_LONG) {\r\n  //\t\tstringLiteralLongContentTerminals[key] = {\r\n  //\t\t\tname: key,\r\n  //\t\t\tregex:new RegExp(\"^\"+STRING_LITERAL_LONG_CONTENTS[key]),\r\n  //\t\t\tstyle:\"string\"\r\n  //\t\t};\r\n  //\t}\r\n  //some regular expressions not used in regular terminals, because this is used accross lines\r\n  var stringLiteralLongRegex = {};\r\n  for (var key in STRING_LITERAL_LONG) {\r\n    stringLiteralLongRegex[key] = {\r\n      complete: {\r\n        name: \"STRING_LITERAL_LONG_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].COMPLETE),\r\n        style: \"string\"\r\n      },\r\n      contents: {\r\n        name: \"STRING_LITERAL_LONG_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].CONTENTS),\r\n        style: \"string\"\r\n      },\r\n      closing: {\r\n        name: \"STRING_LITERAL_LONG_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].CONTENTS + STRING_LITERAL_LONG[key].QUOTES),\r\n        style: \"string\"\r\n      },\r\n      quotes: {\r\n        name: \"STRING_LITERAL_LONG_QUOTES_\" + key,\r\n        regex: new RegExp(\"^\" + STRING_LITERAL_LONG[key].QUOTES),\r\n        style: \"string\"\r\n      }\r\n    };\r\n  }\r\n\r\n  var WS = \"[\\\\x20\\\\x09\\\\x0D\\\\x0A]\";\r\n  // Careful! Code mirror feeds one line at a time with no \\n\r\n  // ... but otherwise comment is terminated by \\n\r\n  var COMMENT = \"#([^\\\\n\\\\r]*[\\\\n\\\\r]|[^\\\\n\\\\r]*$)\";\r\n  var WS_OR_COMMENT_STAR = \"(\" + WS + \"|(\" + COMMENT + \"))*\";\r\n  var NIL = \"\\\\(\" + WS_OR_COMMENT_STAR + \"\\\\)\";\r\n  var ANON = \"\\\\[\" + WS_OR_COMMENT_STAR + \"\\\\]\";\r\n  var terminals = [\r\n    {\r\n      name: \"WS\",\r\n      regex: new RegExp(\"^\" + WS + \"+\"),\r\n      style: \"ws\"\r\n    },\r\n\r\n    {\r\n      name: \"COMMENT\",\r\n      regex: new RegExp(\"^\" + COMMENT),\r\n      style: \"comment\"\r\n    },\r\n\r\n    {\r\n      name: \"IRI_REF\",\r\n      regex: new RegExp(\"^\" + IRI_REF),\r\n      style: \"variable-3\"\r\n    },\r\n\r\n    {\r\n      name: \"VAR1\",\r\n      regex: new RegExp(\"^\" + VAR1),\r\n      style: \"atom\"\r\n    },\r\n\r\n    {\r\n      name: \"VAR2\",\r\n      regex: new RegExp(\"^\" + VAR2),\r\n      style: \"atom\"\r\n    },\r\n\r\n    {\r\n      name: \"LANGTAG\",\r\n      regex: new RegExp(\"^\" + LANGTAG),\r\n      style: \"meta\"\r\n    },\r\n\r\n    {\r\n      name: \"DOUBLE\",\r\n      regex: new RegExp(\"^\" + DOUBLE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DECIMAL\",\r\n      regex: new RegExp(\"^\" + DECIMAL),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"INTEGER\",\r\n      regex: new RegExp(\"^\" + INTEGER),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DOUBLE_POSITIVE\",\r\n      regex: new RegExp(\"^\" + DOUBLE_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DECIMAL_POSITIVE\",\r\n      regex: new RegExp(\"^\" + DECIMAL_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"INTEGER_POSITIVE\",\r\n      regex: new RegExp(\"^\" + INTEGER_POSITIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DOUBLE_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + DOUBLE_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"DECIMAL_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + DECIMAL_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n\r\n    {\r\n      name: \"INTEGER_NEGATIVE\",\r\n      regex: new RegExp(\"^\" + INTEGER_NEGATIVE),\r\n      style: \"number\"\r\n    },\r\n    //\t\tstringLiteralLongRegex.SINGLE.complete,\r\n    //\t\tstringLiteralLongRegex.DOUBLE.complete,\r\n    //\t\tstringLiteralLongRegex.SINGLE.quotes,\r\n    //\t\tstringLiteralLongRegex.DOUBLE.quotes,\r\n\r\n    {\r\n      name: \"STRING_LITERAL1\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL1),\r\n      style: \"string\"\r\n    },\r\n\r\n    {\r\n      name: \"STRING_LITERAL2\",\r\n      regex: new RegExp(\"^\" + STRING_LITERAL2),\r\n      style: \"string\"\r\n    },\r\n\r\n    // Enclosed comments won't be highlighted\r\n    {\r\n      name: \"NIL\",\r\n      regex: new RegExp(\"^\" + NIL),\r\n      style: \"punc\"\r\n    },\r\n\r\n    // Enclosed comments won't be highlighted\r\n    {\r\n      name: \"ANON\",\r\n      regex: new RegExp(\"^\" + ANON),\r\n      style: \"punc\"\r\n    },\r\n\r\n    {\r\n      name: \"PNAME_LN\",\r\n      regex: new RegExp(\"^\" + PNAME_LN),\r\n      style: \"string-2\"\r\n    },\r\n\r\n    {\r\n      name: \"PNAME_NS\",\r\n      regex: new RegExp(\"^\" + PNAME_NS),\r\n      style: \"string-2\"\r\n    },\r\n\r\n    {\r\n      name: \"BLANK_NODE_LABEL\",\r\n      regex: new RegExp(\"^\" + BLANK_NODE_LABEL),\r\n      style: \"string-2\"\r\n    }\r\n  ];\r\n\r\n  function getPossibles(symbol) {\r\n    var possibles = [], possiblesOb = ll1_table[symbol];\r\n    if (possiblesOb != undefined) {\r\n      for (var property in possiblesOb) {\r\n        possibles.push(property.toString());\r\n      }\r\n    } else {\r\n      possibles.push(symbol);\r\n    }\r\n    return possibles;\r\n  }\r\n\r\n  function tokenBase(stream, state) {\r\n    function nextToken() {\r\n      var consumed = null;\r\n      if (state.inLiteral) {\r\n        var closingQuotes = false;\r\n        //multi-line literal. try to parse contents.\r\n        consumed = stream.match(stringLiteralLongRegex[state.inLiteral].contents.regex, true, false);\r\n        if (consumed && consumed[0].length == 0) {\r\n          //try seeing whether we can consume closing quotes, to avoid stopping\r\n          consumed = stream.match(stringLiteralLongRegex[state.inLiteral].closing.regex, true, false);\r\n          closingQuotes = true;\r\n        }\r\n\r\n        if (consumed && consumed[0].length > 0) {\r\n          //some string content here.\r\n          var returnObj = {\r\n            quotePos: closingQuotes ? \"end\" : \"content\",\r\n            cat: STRING_LITERAL_LONG[state.inLiteral].CAT,\r\n            style: stringLiteralLongRegex[state.inLiteral].complete.style,\r\n            text: consumed[0],\r\n            start: stream.start\r\n          };\r\n          if (closingQuotes) state.inLiteral = false;\r\n          return returnObj;\r\n        }\r\n      }\r\n\r\n      //Multiline literals\r\n      for (var quoteType in stringLiteralLongRegex) {\r\n        consumed = stream.match(stringLiteralLongRegex[quoteType].quotes.regex, true, false);\r\n        if (consumed) {\r\n          var quotePos;\r\n          if (state.inLiteral) {\r\n            //end of literal. everything is fine\r\n            state.inLiteral = false;\r\n            quotePos = \"end\";\r\n          } else {\r\n            state.inLiteral = quoteType;\r\n            quotePos = \"start\";\r\n          }\r\n          return {\r\n            cat: STRING_LITERAL_LONG[quoteType].CAT,\r\n            style: stringLiteralLongRegex[quoteType].quotes.style,\r\n            text: consumed[0],\r\n            quotePos: quotePos,\r\n            start: stream.start\r\n          };\r\n        }\r\n      }\r\n\r\n      // Tokens defined by individual regular expressions\r\n      for (var i = 0; i < terminals.length; ++i) {\r\n        consumed = stream.match(terminals[i].regex, true, false);\r\n        if (consumed) {\r\n          return {\r\n            cat: terminals[i].name,\r\n            style: terminals[i].style,\r\n            text: consumed[0],\r\n            start: stream.start\r\n          };\r\n        }\r\n      }\r\n\r\n      // Keywords\r\n      consumed = stream.match(grammar.keywords, true, false);\r\n      if (consumed)\r\n        return {\r\n          cat: stream.current().toUpperCase(),\r\n          style: \"keyword\",\r\n          text: consumed[0],\r\n          start: stream.start\r\n        };\r\n\r\n      // Punctuation\r\n      consumed = stream.match(grammar.punct, true, false);\r\n      if (consumed)\r\n        return {\r\n          cat: stream.current(),\r\n          style: \"punc\",\r\n          text: consumed[0],\r\n          start: stream.start\r\n        };\r\n\r\n      // Token is invalid\r\n      // better consume something anyway, or else we're stuck\r\n      consumed = stream.match(/^.[A-Za-z0-9]*/, true, false);\r\n      return {\r\n        cat: \"<invalid_token>\",\r\n        style: \"error\",\r\n        text: consumed[0],\r\n        start: stream.start\r\n      };\r\n    }\r\n\r\n    function recordFailurePos() {\r\n      // tokenOb.style= \"sp-invalid\";\r\n      var col = stream.column();\r\n      state.errorStartPos = col;\r\n      state.errorEndPos = col + tokenOb.text.length;\r\n    }\r\n    function setQueryType(s) {\r\n      if (state.queryType == null) {\r\n        if (\r\n          s == \"SELECT\" ||\r\n          s == \"CONSTRUCT\" ||\r\n          s == \"ASK\" ||\r\n          s == \"DESCRIBE\" ||\r\n          s == \"INSERT\" ||\r\n          s == \"DELETE\" ||\r\n          s == \"LOAD\" ||\r\n          s == \"CLEAR\" ||\r\n          s == \"CREATE\" ||\r\n          s == \"DROP\" ||\r\n          s == \"COPY\" ||\r\n          s == \"MOVE\" ||\r\n          s == \"ADD\"\r\n        )\r\n          state.queryType = s;\r\n      }\r\n    }\r\n\r\n    // Some fake non-terminals are just there to have side-effect on state\r\n    // - i.e. allow or disallow variables and bnodes in certain non-nesting\r\n    // contexts\r\n    function setSideConditions(topSymbol) {\r\n      if (topSymbol === \"prefixDecl\") {\r\n        state.inPrefixDecl = true;\r\n      } else {\r\n        state.inPrefixDecl = false;\r\n      }\r\n      switch (topSymbol) {\r\n        case \"disallowVars\":\r\n          state.allowVars = false;\r\n          break;\r\n        case \"allowVars\":\r\n          state.allowVars = true;\r\n          break;\r\n        case \"disallowBnodes\":\r\n          state.allowBnodes = false;\r\n          break;\r\n        case \"allowBnodes\":\r\n          state.allowBnodes = true;\r\n          break;\r\n        case \"storeProperty\":\r\n          state.storeProperty = true;\r\n          break;\r\n      }\r\n    }\r\n\r\n    function checkSideConditions(topSymbol) {\r\n      return (state.allowVars || topSymbol != \"var\") &&\r\n        (state.allowBnodes ||\r\n          (topSymbol != \"blankNode\" &&\r\n            topSymbol != \"blankNodePropertyList\" &&\r\n            topSymbol != \"blankNodePropertyListPath\"));\r\n    }\r\n\r\n    // CodeMirror works with one line at a time,\r\n    // but newline should behave like whitespace\r\n    // - i.e. a definite break between tokens (for autocompleter)\r\n    if (stream.pos == 0) state.possibleCurrent = state.possibleNext;\r\n\r\n    var tokenOb = nextToken();\r\n\r\n    if (tokenOb.cat == \"<invalid_token>\") {\r\n      // set error state, and\r\n      if (state.OK == true) {\r\n        state.OK = false;\r\n        recordFailurePos();\r\n      }\r\n      state.complete = false;\r\n      // alert(\"Invalid:\"+tokenOb.text);\r\n      return tokenOb.style;\r\n    }\r\n\r\n    if (tokenOb.cat == \"WS\" || tokenOb.cat == \"COMMENT\" || (tokenOb.quotePos && tokenOb.quotePos != \"end\")) {\r\n      state.possibleCurrent = state.possibleNext;\r\n      return tokenOb.style;\r\n    }\r\n    // Otherwise, run the parser until the token is digested\r\n    // or failure\r\n    var finished = false;\r\n    var topSymbol;\r\n    var token = tokenOb.cat;\r\n\r\n    if (!tokenOb.quotePos || tokenOb.quotePos == \"end\") {\r\n      // Incremental LL1 parse\r\n      while (state.stack.length > 0 && token && state.OK && !finished) {\r\n        topSymbol = state.stack.pop();\r\n\r\n        if (!ll1_table[topSymbol]) {\r\n          // Top symbol is a terminal\r\n          if (topSymbol == token) {\r\n            if (state.inPrefixDecl) {\r\n              if (topSymbol === \"PNAME_NS\" && tokenOb.text.length > 0) {\r\n                state.currentPnameNs = tokenOb.text.slice(0, -1);\r\n              } else if (state.currentPnameNs !== undefined && tokenOb.text.length > 2) {\r\n                state.prefixes[state.currentPnameNs] = tokenOb.text.slice(1, -1);\r\n                //reset current pname ns\r\n                state.currentPnameNs = undefined;\r\n              }\r\n            }\r\n            // Matching terminals\r\n            // - consume token from input stream\r\n            finished = true;\r\n            setQueryType(topSymbol);\r\n            // Check whether $ (end of input token) is poss next\r\n            // for everything on stack\r\n            var allNillable = true;\r\n            for (var sp = state.stack.length; sp > 0; --sp) {\r\n              var item = ll1_table[state.stack[sp - 1]];\r\n              if (!item || !item[\"$\"]) allNillable = false;\r\n            }\r\n            state.complete = allNillable;\r\n            if (state.storeProperty && token.cat != \"punc\") {\r\n              state.lastProperty = tokenOb.text;\r\n              state.storeProperty = false;\r\n            }\r\n\r\n            //check whether a used prefix is actually defined\r\n            if (!state.inPrefixDecl && (token === \"PNAME_NS\" || token === \"PNAME_LN\")) {\r\n              var colonIndex = tokenOb.text.indexOf(\":\");\r\n              if (colonIndex >= 0) {\r\n                var prefNs = tokenOb.text.slice(0, colonIndex);\r\n                //avoid warnings for missing bif prefixes (yuck, virtuoso-specific)\r\n                if (!state.prefixes[prefNs] && [\"bif\", \"xsd\", \"sql\"].indexOf(prefNs) < 0) {\r\n                  state.OK = false;\r\n                  recordFailurePos();\r\n                  state.errorMsg = \"Prefix '\" + prefNs + \"' is not defined\";\r\n                }\r\n              }\r\n            }\r\n          } else {\r\n            state.OK = false;\r\n            state.complete = false;\r\n            recordFailurePos();\r\n          }\r\n        } else {\r\n          // topSymbol is nonterminal\r\n          // - see if there is an entry for topSymbol\r\n          // and nextToken in table\r\n          var nextSymbols = ll1_table[topSymbol][token];\r\n          if (nextSymbols != undefined && checkSideConditions(topSymbol)) {\r\n            // Match - copy RHS of rule to stack\r\n            for (var i = nextSymbols.length - 1; i >= 0; --i) {\r\n              state.stack.push(nextSymbols[i]);\r\n            }\r\n            // Peform any non-grammatical side-effects\r\n            setSideConditions(topSymbol);\r\n          } else {\r\n            // No match in table - fail\r\n            state.OK = false;\r\n            state.complete = false;\r\n            recordFailurePos();\r\n            state.stack.push(topSymbol); // Shove topSymbol back on stack\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!finished && state.OK) {\r\n      state.OK = false;\r\n      state.complete = false;\r\n      recordFailurePos();\r\n    }\r\n\r\n    if (state.possibleCurrent.indexOf(\"a\") >= 0) {\r\n      state.lastPredicateOffset = tokenOb.start;\r\n    }\r\n    state.possibleCurrent = state.possibleNext;\r\n\r\n    state.possibleNext = getPossibles(state.stack[state.stack.length - 1]);\r\n\r\n    return tokenOb.style;\r\n  }\r\n\r\n  var indentTop = {\r\n    \"*[,, object]\": 3,\r\n    \"*[(,),object]\": 3,\r\n    \"*[(,),objectPath]\": 3,\r\n    \"*[/,pathEltOrInverse]\": 2,\r\n    object: 2,\r\n    objectPath: 2,\r\n    objectList: 2,\r\n    objectListPath: 2,\r\n    storeProperty: 2,\r\n    pathMod: 2,\r\n    \"?pathMod\": 2,\r\n    propertyListNotEmpty: 1,\r\n    propertyList: 1,\r\n    propertyListPath: 1,\r\n    propertyListPathNotEmpty: 1,\r\n    \"?[verb,objectList]\": 1\r\n    //\t\t\"?[or([verbPath, verbSimple]),objectList]\": 1,\r\n  };\r\n\r\n  var indentTable = {\r\n    \"}\": 1,\r\n    \"]\": 1,\r\n    \")\": 1,\r\n    \"{\": -1,\r\n    \"(\": -1,\r\n    \"[\": -1\r\n    //\t\t\"*[;,?[or([verbPath,verbSimple]),objectList]]\": 1,\r\n  };\r\n\r\n  function indent(state, textAfter) {\r\n    //just avoid we don't indent multi-line  literals\r\n    if (state.inLiteral) return 0;\r\n    if (state.stack.length && state.stack[state.stack.length - 1] == \"?[or([verbPath,verbSimple]),objectList]\") {\r\n      //we are after a semi-colon. I.e., nicely align this line with predicate position of previous line\r\n      return state.lastPredicateOffset;\r\n    } else {\r\n      var n = 0; // indent level\r\n      var i = state.stack.length - 1;\r\n      if (/^[\\}\\]\\)]/.test(textAfter)) {\r\n        // Skip stack items until after matching bracket\r\n        var closeBracket = textAfter.substr(0, 1);\r\n        for (; i >= 0; --i) {\r\n          if (state.stack[i] == closeBracket) {\r\n            --i;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        // Consider nullable non-terminals if at top of stack\r\n        var dn = indentTop[state.stack[i]];\r\n        if (dn) {\r\n          n += dn;\r\n          --i;\r\n        }\r\n      }\r\n      for (; i >= 0; --i) {\r\n        var dn = indentTable[state.stack[i]];\r\n        if (dn) {\r\n          n += dn;\r\n        }\r\n      }\r\n      return n * config.indentUnit;\r\n    }\r\n  }\r\n\r\n  return {\r\n    token: tokenBase,\r\n    startState: function(base) {\r\n      return {\r\n        tokenize: tokenBase,\r\n        OK: true,\r\n        complete: grammar.acceptEmpty,\r\n        errorStartPos: null,\r\n        errorEndPos: null,\r\n        queryType: null,\r\n        possibleCurrent: getPossibles(grammar.startSymbol),\r\n        possibleNext: getPossibles(grammar.startSymbol),\r\n        allowVars: true,\r\n        allowBnodes: true,\r\n        storeProperty: false,\r\n        lastProperty: \"\",\r\n        inLiteral: false,\r\n        stack: [grammar.startSymbol],\r\n        lastPredicateOffset: config.indentUnit,\r\n        prefixes: {}\r\n      };\r\n    },\r\n    indent: indent,\r\n    electricChars: \"}])\"\r\n  };\r\n});\r\nCodeMirror.defineMIME(\"application/x-sparql-query\", \"sparql11\");\r\n","/*\r\n* TRIE implementation in Javascript\r\n* Copyright (c) 2010 Saurabh Odhyan | http://odhyan.com\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n* THE SOFTWARE.\r\n*\r\n* Date: Nov 7, 2010\r\n*/\r\n\r\n/*\r\n* A trie, or prefix tree, is a multi-way tree structure useful for storing strings over an alphabet.\r\n* It has been used to store large dictionaries of English (say) words in spell-checking programs\r\n* and in natural-language \"understanding\" programs.\r\n* @see http://en.wikipedia.org/wiki/Trie\r\n* @see http://www.csse.monash.edu.au/~lloyd/tildeAlgDS/Tree/Trie/\r\n/*\r\n\r\n* @class Trie\r\n* @constructor\r\n*/\r\n\r\nvar Trie = module.exports = function() {\r\n  this.words = 0;\r\n  this.prefixes = 0;\r\n  this.children = [];\r\n};\r\n\r\nTrie.prototype = {\r\n  /*\r\n    * Insert a word into the dictionary.\r\n    * Recursively traverse through the trie nodes, and create new node if does not already exist.\r\n    *\r\n    * @method insert\r\n    * @param {String} str Word to insert in the dictionary\r\n    * @param {Integer} pos Current index of the string to be inserted\r\n    * @return {Void}\r\n    */\r\n  insert: function(str, pos) {\r\n    if (str.length == 0) {\r\n      //blank string cannot be inserted\r\n      return;\r\n    }\r\n\r\n    var T = this, k, child;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      T.words++;\r\n      return;\r\n    }\r\n    T.prefixes++;\r\n    k = str[pos];\r\n    if (T.children[k] === undefined) {\r\n      //if node for this char doesn't exist, create one\r\n      T.children[k] = new Trie();\r\n    }\r\n    child = T.children[k];\r\n    child.insert(str, pos + 1);\r\n  },\r\n\r\n  /*\r\n    * Remove a word from the dictionary.\r\n    *\r\n    * @method remove\r\n    * @param {String} str Word to be removed\r\n    * @param {Integer} pos Current index of the string to be removed\r\n    * @return {Void}\r\n    */\r\n  remove: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return;\r\n    }\r\n\r\n    var T = this, k, child;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (T === undefined) {\r\n      return;\r\n    }\r\n    if (pos === str.length) {\r\n      T.words--;\r\n      return;\r\n    }\r\n    T.prefixes--;\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    child.remove(str, pos + 1);\r\n  },\r\n\r\n  /*\r\n    * Update an existing word in the dictionary.\r\n    * This method removes the old word from the dictionary and inserts the new word.\r\n    *\r\n    * @method update\r\n    * @param {String} strOld The old word to be replaced\r\n    * @param {String} strNew The new word to be inserted\r\n    * @return {Void}\r\n    */\r\n  update: function(strOld, strNew) {\r\n    if (strOld.length == 0 || strNew.length == 0) {\r\n      return;\r\n    }\r\n    this.remove(strOld);\r\n    this.insert(strNew);\r\n  },\r\n\r\n  /*\r\n    * Count the number of times a given word has been inserted into the dictionary\r\n    *\r\n    * @method countWord\r\n    * @param {String} str Word to get count of\r\n    * @param {Integer} pos Current index of the given word\r\n    * @return {Integer} The number of times a given word exists in the dictionary\r\n    */\r\n  countWord: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return 0;\r\n    }\r\n\r\n    var T = this, k, child, ret = 0;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      return T.words;\r\n    }\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    if (child !== undefined) {\r\n      //node exists\r\n      ret = child.countWord(str, pos + 1);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Count the number of times a given prefix exists in the dictionary\r\n    *\r\n    * @method countPrefix\r\n    * @param {String} str Prefix to get count of\r\n    * @param {Integer} pos Current index of the given prefix\r\n    * @return {Integer} The number of times a given prefix exists in the dictionary\r\n    */\r\n  countPrefix: function(str, pos) {\r\n    if (str.length == 0) {\r\n      return 0;\r\n    }\r\n\r\n    var T = this, k, child, ret = 0;\r\n\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    if (pos === str.length) {\r\n      return T.prefixes;\r\n    }\r\n    var k = str[pos];\r\n    child = T.children[k];\r\n    if (child !== undefined) {\r\n      //node exists\r\n      ret = child.countPrefix(str, pos + 1);\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Find a word in the dictionary\r\n    *\r\n    * @method find\r\n    * @param {String} str The word to find in the dictionary\r\n    * @return {Boolean} True if the word exists in the dictionary, else false\r\n    */\r\n  find: function(str) {\r\n    if (str.length == 0) {\r\n      return false;\r\n    }\r\n\r\n    if (this.countWord(str) > 0) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /*\r\n    * Get all words in the dictionary\r\n    *\r\n    * @method getAllWords\r\n    * @param {String} str Prefix of current word\r\n    * @return {Array} Array of words in the dictionary\r\n    */\r\n  getAllWords: function(str) {\r\n    var T = this, k, child, ret = [];\r\n    if (str === undefined) {\r\n      str = \"\";\r\n    }\r\n    if (T === undefined) {\r\n      return [];\r\n    }\r\n    if (T.words > 0) {\r\n      ret.push(str);\r\n    }\r\n    for (k in T.children) {\r\n      if (T.children.hasOwnProperty(k)) {\r\n        child = T.children[k];\r\n        ret = ret.concat(child.getAllWords(str + k));\r\n      }\r\n    }\r\n    return ret;\r\n  },\r\n\r\n  /*\r\n    * Autocomplete a given prefix\r\n    *\r\n    * @method autoComplete\r\n    * @param {String} str Prefix to be completed based on dictionary entries\r\n    * @param {Integer} pos Current index of the prefix\r\n    * @return {Array} Array of possible suggestions\r\n    */\r\n  autoComplete: function(str, pos) {\r\n    var T = this, k, child;\r\n    if (str.length == 0) {\r\n      if (pos === undefined) {\r\n        return T.getAllWords(str);\r\n      } else {\r\n        return [];\r\n      }\r\n    }\r\n    if (pos === undefined) {\r\n      pos = 0;\r\n    }\r\n    k = str[pos];\r\n    child = T.children[k];\r\n    if (child === undefined) {\r\n      //node doesn't exist\r\n      return [];\r\n    }\r\n    if (pos === str.length - 1) {\r\n      return child.getAllWords(str);\r\n    }\r\n    return child.autoComplete(str, pos + 1);\r\n  }\r\n};\r\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"fullScreen\", false, function(cm, val, old) {\n    if (old == CodeMirror.Init) old = false;\n    if (!old == !val) return;\n    if (val) setFullscreen(cm);\n    else setNormal(cm);\n  });\n\n  function setFullscreen(cm) {\n    var wrap = cm.getWrapperElement();\n    cm.state.fullScreenRestore = {scrollTop: window.pageYOffset, scrollLeft: window.pageXOffset,\n                                  width: wrap.style.width, height: wrap.style.height};\n    wrap.style.width = \"\";\n    wrap.style.height = \"auto\";\n    wrap.className += \" CodeMirror-fullscreen\";\n    document.documentElement.style.overflow = \"hidden\";\n    cm.refresh();\n  }\n\n  function setNormal(cm) {\n    var wrap = cm.getWrapperElement();\n    wrap.className = wrap.className.replace(/\\s*CodeMirror-fullscreen\\b/, \"\");\n    document.documentElement.style.overflow = \"\";\n    var info = cm.state.fullScreenRestore;\n    wrap.style.width = info.width; wrap.style.height = info.height;\n    window.scrollTo(info.scrollLeft, info.scrollTop);\n    cm.refresh();\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var ie_lt8 = /MSIE \\d/.test(navigator.userAgent) &&\n    (document.documentMode == null || document.documentMode < 8);\n\n  var Pos = CodeMirror.Pos;\n\n  var matching = {\"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\"};\n\n  function findMatchingBracket(cm, where, strict, config) {\n    var line = cm.getLineHandle(where.line), pos = where.ch - 1;\n    var match = (pos >= 0 && matching[line.text.charAt(pos)]) || matching[line.text.charAt(++pos)];\n    if (!match) return null;\n    var dir = match.charAt(1) == \">\" ? 1 : -1;\n    if (strict && (dir > 0) != (pos == where.ch)) return null;\n    var style = cm.getTokenTypeAt(Pos(where.line, pos + 1));\n\n    var found = scanForBracket(cm, Pos(where.line, pos + (dir > 0 ? 1 : 0)), dir, style || null, config);\n    if (found == null) return null;\n    return {from: Pos(where.line, pos), to: found && found.pos,\n            match: found && found.ch == match.charAt(0), forward: dir > 0};\n  }\n\n  // bracketRegex is used to specify which type of bracket to scan\n  // should be a regexp, e.g. /[[\\]]/\n  //\n  // Note: If \"where\" is on an open bracket, then this bracket is ignored.\n  //\n  // Returns false when no bracket was found, null when it reached\n  // maxScanLines and gave up\n  function scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n\n    var stack = [];\n    var re = config && config.bracketRegex ? config.bracketRegex : /[(){}[\\]]/;\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n                          : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n      var line = cm.getLine(lineNo);\n      if (!line) continue;\n      var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n      if (line.length > maxScanLen) continue;\n      if (lineNo == where.line) pos = where.ch - (dir < 0 ? 1 : 0);\n      for (; pos != end; pos += dir) {\n        var ch = line.charAt(pos);\n        if (re.test(ch) && (style === undefined || cm.getTokenTypeAt(Pos(lineNo, pos + 1)) == style)) {\n          var match = matching[ch];\n          if ((match.charAt(1) == \">\") == (dir > 0)) stack.push(ch);\n          else if (!stack.length) return {pos: Pos(lineNo, pos), ch: ch};\n          else stack.pop();\n        }\n      }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n  }\n\n  function matchBrackets(cm, autoclear, config) {\n    // Disable brace matching in long lines, since it'll cause hugely slow updates\n    var maxHighlightLen = cm.state.matchBrackets.maxHighlightLineLength || 1000;\n    var marks = [], ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      var match = ranges[i].empty() && findMatchingBracket(cm, ranges[i].head, false, config);\n      if (match && cm.getLine(match.from.line).length <= maxHighlightLen) {\n        var style = match.match ? \"CodeMirror-matchingbracket\" : \"CodeMirror-nonmatchingbracket\";\n        marks.push(cm.markText(match.from, Pos(match.from.line, match.from.ch + 1), {className: style}));\n        if (match.to && cm.getLine(match.to.line).length <= maxHighlightLen)\n          marks.push(cm.markText(match.to, Pos(match.to.line, match.to.ch + 1), {className: style}));\n      }\n    }\n\n    if (marks.length) {\n      // Kludge to work around the IE bug from issue #1193, where text\n      // input stops going to the textare whever this fires.\n      if (ie_lt8 && cm.state.focused) cm.focus();\n\n      var clear = function() {\n        cm.operation(function() {\n          for (var i = 0; i < marks.length; i++) marks[i].clear();\n        });\n      };\n      if (autoclear) setTimeout(clear, 800);\n      else return clear;\n    }\n  }\n\n  var currentlyHighlighted = null;\n  function doMatchBrackets(cm) {\n    cm.operation(function() {\n      if (currentlyHighlighted) {currentlyHighlighted(); currentlyHighlighted = null;}\n      currentlyHighlighted = matchBrackets(cm, false, cm.state.matchBrackets);\n    });\n  }\n\n  CodeMirror.defineOption(\"matchBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init)\n      cm.off(\"cursorActivity\", doMatchBrackets);\n    if (val) {\n      cm.state.matchBrackets = typeof val == \"object\" ? val : {};\n      cm.on(\"cursorActivity\", doMatchBrackets);\n    }\n  });\n\n  CodeMirror.defineExtension(\"matchBrackets\", function() {matchBrackets(this, true);});\n  CodeMirror.defineExtension(\"findMatchingBracket\", function(pos, strict, config){\n    return findMatchingBracket(this, pos, strict, config);\n  });\n  CodeMirror.defineExtension(\"scanForBracket\", function(pos, dir, style, config){\n    return scanForBracket(this, pos, dir, style, config);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end && endCh == startCh) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? range.from : cm.firstLine();\n    this.max = range ? range.to - 1 : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter), end;\n      if (!openTag || iter.line != start.line || !(end = toTagEnd(iter))) return;\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && {from: startPos, to: endPos.from};\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    var self = this;\n    cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      this.cm.off(\"cursorActivity\", this.activityFunc);\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i];\n      if (completion.hint) completion.hint(this.cm, data, completion);\n      else this.cm.replaceRange(getText(completion), completion.from || data.from,\n                                completion.to || data.to, \"complete\");\n      CodeMirror.signal(data, \"pick\", completion);\n      this.close();\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < this.startPos.ch || this.cm.somethingSelected() ||\n          (pos.ch && this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      if (data && this.data && isNewCompletion(this.data, data)) return;\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function isNewCompletion(old, nw) {\n    var moved = CodeMirror.cmpPos(nw.from, old.from)\n    return moved > 0 && old.to.ch - old.from.ch != nw.to.ch - nw.from.ch\n  }\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n\n    var hints = this.hints = document.createElement(\"ul\");\n    hints.className = \"CodeMirror-hints\";\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(document.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(document.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    hints.style.left = left + \"px\";\n    hints.style.top = top + \"px\";\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = window.innerWidth || Math.max(document.body.offsetWidth, document.documentElement.offsetWidth);\n    var winH = window.innerHeight || Math.max(document.body.offsetHeight, document.documentElement.offsetHeight);\n    (completion.options.container || document.body).appendChild(hints);\n    var box = hints.getBoundingClientRect(), overlapY = box.bottom - winH;\n    var scrolls = hints.scrollHeight > hints.clientHeight + 1\n    var startScroll = cm.getScrollInfo();\n\n    if (overlapY > 0) {\n      var height = box.bottom - box.top, curTop = pos.top - (pos.bottom - box.top);\n      if (curTop - height > 0) { // Fits above cursor\n        hints.style.top = (top = pos.top - height) + \"px\";\n        below = false;\n      } else if (height > winH) {\n        hints.style.height = (winH - 5) + \"px\";\n        hints.style.top = (top = pos.bottom - box.top) + \"px\";\n        var cursor = cm.getCursor();\n        if (data.from.ch != cursor.ch) {\n          pos = cm.cursorCoords(cursor);\n          hints.style.left = (left = pos.left) + \"px\";\n          box = hints.getBoundingClientRect();\n        }\n      }\n    }\n    var overlapX = box.right - winW;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = pos.left - overlapX) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (window.pageYOffset || (document.documentElement || document.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    CodeMirror.signal(data, \"select\", completions[0], hints.firstChild);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      if (node.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node.offsetTop - 3;\n      else if (node.offsetTop + node.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node.offsetTop + node.offsetHeight - this.hints.clientHeight + 3;\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur);\n    var to = CodeMirror.Pos(cur.line, token.end);\n    if (token.string && /\\w/.test(token.string[token.string.length - 1])) {\n      var term = token.string, from = CodeMirror.Pos(cur.line, token.start);\n    } else {\n      var term = \"\", from = to;\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnUnfocus: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.runMode = function(string, modespec, callback, options) {\n  var mode = CodeMirror.getMode(CodeMirror.defaults, modespec);\n  var ie = /MSIE \\d/.test(navigator.userAgent);\n  var ie_lt9 = ie && (document.documentMode == null || document.documentMode < 9);\n\n  if (callback.appendChild) {\n    var tabSize = (options && options.tabSize) || CodeMirror.defaults.tabSize;\n    var node = callback, col = 0;\n    node.innerHTML = \"\";\n    callback = function(text, style) {\n      if (text == \"\\n\") {\n        // Emitting LF or CRLF on IE8 or earlier results in an incorrect display.\n        // Emitting a carriage return makes everything ok.\n        node.appendChild(document.createTextNode(ie_lt9 ? '\\r' : text));\n        col = 0;\n        return;\n      }\n      var content = \"\";\n      // replace tabs\n      for (var pos = 0;;) {\n        var idx = text.indexOf(\"\\t\", pos);\n        if (idx == -1) {\n          content += text.slice(pos);\n          col += text.length - pos;\n          break;\n        } else {\n          col += idx - pos;\n          content += text.slice(pos, idx);\n          var size = tabSize - col % tabSize;\n          col += size;\n          for (var i = 0; i < size; ++i) content += \" \";\n          pos = idx + 1;\n        }\n      }\n\n      if (style) {\n        var sp = node.appendChild(document.createElement(\"span\"));\n        sp.className = \"cm-\" + style.replace(/ +/g, \" cm-\");\n        sp.appendChild(document.createTextNode(content));\n      } else {\n        node.appendChild(document.createTextNode(content));\n      }\n    };\n  }\n\n  var lines = CodeMirror.splitLines(string), state = (options && options.state) || CodeMirror.startState(mode);\n  for (var i = 0, e = lines.length; i < e; ++i) {\n    if (i) callback(\"\\n\");\n    var stream = new CodeMirror.StringStream(lines[i]);\n    if (!stream.string && mode.blankLine) mode.blankLine(state);\n    while (!stream.eol()) {\n      var style = mode.token(stream, state);\n      callback(stream.current(), style, i, stream.start, state);\n      stream.start = stream.pos;\n    }\n  }\n};\n\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod((function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})());\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var Pos = CodeMirror.Pos;\n\n  function SearchCursor(doc, query, pos, caseFold) {\n    this.atOccurrence = false; this.doc = doc;\n    if (caseFold == null && typeof query == \"string\") caseFold = false;\n\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0);\n    this.pos = {from: pos, to: pos};\n\n    // The matches method is filled in based on the type of query.\n    // It takes a position and a direction, and returns an object\n    // describing the next occurrence of the query, or null if no\n    // more matches were found.\n    if (typeof query != \"string\") { // Regexp match\n      if (!query.global) query = new RegExp(query.source, query.ignoreCase ? \"ig\" : \"g\");\n      this.matches = function(reverse, pos) {\n        if (reverse) {\n          query.lastIndex = 0;\n          var line = doc.getLine(pos.line).slice(0, pos.ch), cutOff = 0, match, start;\n          for (;;) {\n            query.lastIndex = cutOff;\n            var newMatch = query.exec(line);\n            if (!newMatch) break;\n            match = newMatch;\n            start = match.index;\n            cutOff = match.index + (match[0].length || 1);\n            if (cutOff == line.length) break;\n          }\n          var matchLen = (match && match[0].length) || 0;\n          if (!matchLen) {\n            if (start == 0 && line.length == 0) {match = undefined;}\n            else if (start != doc.getLine(pos.line).length) {\n              matchLen++;\n            }\n          }\n        } else {\n          query.lastIndex = pos.ch;\n          var line = doc.getLine(pos.line), match = query.exec(line);\n          var matchLen = (match && match[0].length) || 0;\n          var start = match && match.index;\n          if (start + matchLen != line.length && !matchLen) matchLen = 1;\n        }\n        if (match && matchLen)\n          return {from: Pos(pos.line, start),\n                  to: Pos(pos.line, start + matchLen),\n                  match: match};\n      };\n    } else { // String query\n      var origQuery = query;\n      if (caseFold) query = query.toLowerCase();\n      var fold = caseFold ? function(str){return str.toLowerCase();} : function(str){return str;};\n      var target = query.split(\"\\n\");\n      // Different methods for single-line and multi-line queries\n      if (target.length == 1) {\n        if (!query.length) {\n          // Empty string would match anything and never progress, so\n          // we define it to match nothing instead.\n          this.matches = function() {};\n        } else {\n          this.matches = function(reverse, pos) {\n            if (reverse) {\n              var orig = doc.getLine(pos.line).slice(0, pos.ch), line = fold(orig);\n              var match = line.lastIndexOf(query);\n              if (match > -1) {\n                match = adjustPos(orig, line, match);\n                return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n              }\n             } else {\n               var orig = doc.getLine(pos.line).slice(pos.ch), line = fold(orig);\n               var match = line.indexOf(query);\n               if (match > -1) {\n                 match = adjustPos(orig, line, match) + pos.ch;\n                 return {from: Pos(pos.line, match), to: Pos(pos.line, match + origQuery.length)};\n               }\n            }\n          };\n        }\n      } else {\n        var origTarget = origQuery.split(\"\\n\");\n        this.matches = function(reverse, pos) {\n          var last = target.length - 1;\n          if (reverse) {\n            if (pos.line - (target.length - 1) < doc.firstLine()) return;\n            if (fold(doc.getLine(pos.line).slice(0, origTarget[last].length)) != target[target.length - 1]) return;\n            var to = Pos(pos.line, origTarget[last].length);\n            for (var ln = pos.line - 1, i = last - 1; i >= 1; --i, --ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            var line = doc.getLine(ln), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            return {from: Pos(ln, cut), to: to};\n          } else {\n            if (pos.line + (target.length - 1) > doc.lastLine()) return;\n            var line = doc.getLine(pos.line), cut = line.length - origTarget[0].length;\n            if (fold(line.slice(cut)) != target[0]) return;\n            var from = Pos(pos.line, cut);\n            for (var ln = pos.line + 1, i = 1; i < last; ++i, ++ln)\n              if (target[i] != fold(doc.getLine(ln))) return;\n            if (fold(doc.getLine(ln).slice(0, origTarget[last].length)) != target[last]) return;\n            return {from: from, to: Pos(ln, origTarget[last].length)};\n          }\n        };\n      }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false);},\n    findPrevious: function() {return this.find(true);},\n\n    find: function(reverse) {\n      var self = this, pos = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      function savePosAndFail(line) {\n        var pos = Pos(line, 0);\n        self.pos = {from: pos, to: pos};\n        self.atOccurrence = false;\n        return false;\n      }\n\n      for (;;) {\n        if (this.pos = this.matches(reverse, pos)) {\n          this.atOccurrence = true;\n          return this.pos.match || true;\n        }\n        if (reverse) {\n          if (!pos.line) return savePosAndFail(0);\n          pos = Pos(pos.line-1, this.doc.getLine(pos.line-1).length);\n        }\n        else {\n          var maxLine = this.doc.lineCount();\n          if (pos.line == maxLine - 1) return savePosAndFail(maxLine);\n          pos = Pos(pos.line + 1, 0);\n        }\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from;},\n    to: function() {if (this.atOccurrence) return this.pos.to;},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return;\n      var lines = CodeMirror.splitLines(newText);\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin);\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0));\n    }\n  };\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos) {\n    if (orig.length == folded.length) return pos;\n    for (var pos1 = Math.min(pos, orig.length);;) {\n      var len1 = orig.slice(0, pos1).toLowerCase().length;\n      if (len1 < pos) ++pos1;\n      else if (len1 > pos) --pos1;\n      else return pos1;\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold);\n  });\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold);\n  });\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = [];\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold);\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break;\n      ranges.push({anchor: cur.from(), head: cur.to()});\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0);\n  });\n});\n","\"use strict\"\n// Module export pattern from\n// https://github.com/umdjs/umd/blob/master/returnExports.js\n;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory();\n    } else {\n        // Browser globals (root is window)\n        root.store = factory();\n  }\n}(this, function () {\n\t\n\t// Store.js\n\tvar store = {},\n\t\twin = (typeof window != 'undefined' ? window : global),\n\t\tdoc = win.document,\n\t\tlocalStorageName = 'localStorage',\n\t\tscriptTag = 'script',\n\t\tstorage\n\n\tstore.disabled = false\n\tstore.version = '1.3.20'\n\tstore.set = function(key, value) {}\n\tstore.get = function(key, defaultVal) {}\n\tstore.has = function(key) { return store.get(key) !== undefined }\n\tstore.remove = function(key) {}\n\tstore.clear = function() {}\n\tstore.transact = function(key, defaultVal, transactionFn) {\n\t\tif (transactionFn == null) {\n\t\t\ttransactionFn = defaultVal\n\t\t\tdefaultVal = null\n\t\t}\n\t\tif (defaultVal == null) {\n\t\t\tdefaultVal = {}\n\t\t}\n\t\tvar val = store.get(key, defaultVal)\n\t\ttransactionFn(val)\n\t\tstore.set(key, val)\n\t}\n\tstore.getAll = function() {}\n\tstore.forEach = function() {}\n\n\tstore.serialize = function(value) {\n\t\treturn JSON.stringify(value)\n\t}\n\tstore.deserialize = function(value) {\n\t\tif (typeof value != 'string') { return undefined }\n\t\ttry { return JSON.parse(value) }\n\t\tcatch(e) { return value || undefined }\n\t}\n\n\t// Functions to encapsulate questionable FireFox 3.6.13 behavior\n\t// when about.config::dom.storage.enabled === false\n\t// See https://github.com/marcuswestin/store.js/issues#issue/13\n\tfunction isLocalStorageNameSupported() {\n\t\ttry { return (localStorageName in win && win[localStorageName]) }\n\t\tcatch(err) { return false }\n\t}\n\n\tif (isLocalStorageNameSupported()) {\n\t\tstorage = win[localStorageName]\n\t\tstore.set = function(key, val) {\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setItem(key, store.serialize(val))\n\t\t\treturn val\n\t\t}\n\t\tstore.get = function(key, defaultVal) {\n\t\t\tvar val = store.deserialize(storage.getItem(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t}\n\t\tstore.remove = function(key) { storage.removeItem(key) }\n\t\tstore.clear = function() { storage.clear() }\n\t\tstore.getAll = function() {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = function(callback) {\n\t\t\tfor (var i=0; i<storage.length; i++) {\n\t\t\t\tvar key = storage.key(i)\n\t\t\t\tcallback(key, store.get(key))\n\t\t\t}\n\t\t}\n\t} else if (doc && doc.documentElement.addBehavior) {\n\t\tvar storageOwner,\n\t\t\tstorageContainer\n\t\t// Since #userData storage applies only to specific paths, we need to\n\t\t// somehow link our data to a specific path.  We choose /favicon.ico\n\t\t// as a pretty safe option, since all browsers already make a request to\n\t\t// this URL anyway and being a 404 will not hurt us here.  We wrap an\n\t\t// iframe pointing to the favicon in an ActiveXObject(htmlfile) object\n\t\t// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)\n\t\t// since the iframe access rules appear to allow direct access and\n\t\t// manipulation of the document element, even for a 404 page.  This\n\t\t// document can be used instead of the current document (which would\n\t\t// have been limited to the current path) to perform #userData storage.\n\t\ttry {\n\t\t\tstorageContainer = new ActiveXObject('htmlfile')\n\t\t\tstorageContainer.open()\n\t\t\tstorageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src=\"/favicon.ico\"></iframe>')\n\t\t\tstorageContainer.close()\n\t\t\tstorageOwner = storageContainer.w.frames[0].document\n\t\t\tstorage = storageOwner.createElement('div')\n\t\t} catch(e) {\n\t\t\t// somehow ActiveXObject instantiation failed (perhaps some special\n\t\t\t// security settings or otherwse), fall back to per-path storage\n\t\t\tstorage = doc.createElement('div')\n\t\t\tstorageOwner = doc.body\n\t\t}\n\t\tvar withIEStorage = function(storeFunction) {\n\t\t\treturn function() {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments, 0)\n\t\t\t\targs.unshift(storage)\n\t\t\t\t// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx\n\t\t\t\t// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx\n\t\t\t\tstorageOwner.appendChild(storage)\n\t\t\t\tstorage.addBehavior('#default#userData')\n\t\t\t\tstorage.load(localStorageName)\n\t\t\t\tvar result = storeFunction.apply(store, args)\n\t\t\t\tstorageOwner.removeChild(storage)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\n\t\t// In IE7, keys cannot start with a digit or contain certain chars.\n\t\t// See https://github.com/marcuswestin/store.js/issues/40\n\t\t// See https://github.com/marcuswestin/store.js/issues/83\n\t\tvar forbiddenCharsRegex = new RegExp(\"[!\\\"#$%&'()*+,/\\\\\\\\:;<=>?@[\\\\]^`{|}~]\", \"g\")\n\t\tvar ieKeyFix = function(key) {\n\t\t\treturn key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')\n\t\t}\n\t\tstore.set = withIEStorage(function(storage, key, val) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tif (val === undefined) { return store.remove(key) }\n\t\t\tstorage.setAttribute(key, store.serialize(val))\n\t\t\tstorage.save(localStorageName)\n\t\t\treturn val\n\t\t})\n\t\tstore.get = withIEStorage(function(storage, key, defaultVal) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tvar val = store.deserialize(storage.getAttribute(key))\n\t\t\treturn (val === undefined ? defaultVal : val)\n\t\t})\n\t\tstore.remove = withIEStorage(function(storage, key) {\n\t\t\tkey = ieKeyFix(key)\n\t\t\tstorage.removeAttribute(key)\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.clear = withIEStorage(function(storage) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tstorage.load(localStorageName)\n\t\t\tfor (var i=attributes.length-1; i>=0; i--) {\n\t\t\t\tstorage.removeAttribute(attributes[i].name)\n\t\t\t}\n\t\t\tstorage.save(localStorageName)\n\t\t})\n\t\tstore.getAll = function(storage) {\n\t\t\tvar ret = {}\n\t\t\tstore.forEach(function(key, val) {\n\t\t\t\tret[key] = val\n\t\t\t})\n\t\t\treturn ret\n\t\t}\n\t\tstore.forEach = withIEStorage(function(storage, callback) {\n\t\t\tvar attributes = storage.XMLDocument.documentElement.attributes\n\t\t\tfor (var i=0, attr; attr=attributes[i]; ++i) {\n\t\t\t\tcallback(attr.name, store.deserialize(storage.getAttribute(attr.name)))\n\t\t\t}\n\t\t})\n\t}\n\n\ttry {\n\t\tvar testKey = '__storejs__'\n\t\tstore.set(testKey, testKey)\n\t\tif (store.get(testKey) != testKey) { store.disabled = true }\n\t\tstore.remove(testKey)\n\t} catch(e) {\n\t\tstore.disabled = true\n\t}\n\tstore.enabled = !store.disabled\n\t\n\treturn store\n}));\n","module.exports={\n  \"_args\": [\n    [\n      {\n        \"raw\": \"yasgui-utils@^1.6.0\",\n        \"scope\": null,\n        \"escapedName\": \"yasgui-utils\",\n        \"name\": \"yasgui-utils\",\n        \"rawSpec\": \"^1.6.0\",\n        \"spec\": \">=1.6.0 <2.0.0\",\n        \"type\": \"range\"\n      },\n      \"/home/vagrant/Code/YASGUI.YASQE\"\n    ]\n  ],\n  \"_from\": \"yasgui-utils@>=1.6.0 <2.0.0\",\n  \"_id\": \"yasgui-utils@1.6.0\",\n  \"_inCache\": true,\n  \"_installable\": true,\n  \"_location\": \"/yasgui-utils\",\n  \"_npmUser\": {\n    \"name\": \"laurens.rietveld\",\n    \"email\": \"laurens.rietveld@gmail.com\"\n  },\n  \"_npmVersion\": \"1.4.3\",\n  \"_phantomChildren\": {},\n  \"_requested\": {\n    \"raw\": \"yasgui-utils@^1.6.0\",\n    \"scope\": null,\n    \"escapedName\": \"yasgui-utils\",\n    \"name\": \"yasgui-utils\",\n    \"rawSpec\": \"^1.6.0\",\n    \"spec\": \">=1.6.0 <2.0.0\",\n    \"type\": \"range\"\n  },\n  \"_requiredBy\": [\n    \"/\"\n  ],\n  \"_resolved\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\",\n  \"_shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n  \"_shrinkwrap\": null,\n  \"_spec\": \"yasgui-utils@^1.6.0\",\n  \"_where\": \"/home/vagrant/Code/YASGUI.YASQE\",\n  \"author\": {\n    \"name\": \"Laurens Rietveld\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/YASGUI/Utils/issues\"\n  },\n  \"dependencies\": {\n    \"store\": \"^1.3.14\"\n  },\n  \"description\": \"Utils for YASGUI libs\",\n  \"devDependencies\": {},\n  \"directories\": {},\n  \"dist\": {\n    \"shasum\": \"bcb9091109c233e3e82737c94c202e6512389c47\",\n    \"tarball\": \"https://registry.npmjs.org/yasgui-utils/-/yasgui-utils-1.6.0.tgz\"\n  },\n  \"homepage\": \"https://github.com/YASGUI/Utils\",\n  \"licenses\": [\n    {\n      \"type\": \"MIT\",\n      \"url\": \"http://yasgui.github.io/license.txt\"\n    }\n  ],\n  \"main\": \"src/main.js\",\n  \"maintainers\": [\n    {\n      \"name\": \"laurens.rietveld\",\n      \"email\": \"laurens.rietveld@gmail.com\"\n    }\n  ],\n  \"name\": \"yasgui-utils\",\n  \"optionalDependencies\": {},\n  \"readme\": \"ERROR: No README data found!\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/YASGUI/Utils.git\"\n  },\n  \"version\": \"1.6.0\"\n}\n","window.console = window.console || {\"log\":function(){}};//make sure any console statements don't break IE\nmodule.exports = {\n\tstorage: require(\"./storage.js\"),\n\tsvg: require(\"./svg.js\"),\n\tversion: {\n\t\t\"yasgui-utils\" : require(\"../package.json\").version,\n\t},\n\tnestedExists : function(obj) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\n\t\tfor (var i = 0; i < args.length; i++) {\n\t\t\tif (!obj || !obj.hasOwnProperty(args[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tobj = obj[args[i]];\n\t\t}\n\t\treturn true;\n\t}\n};\n","var store = require(\"store\");\nvar times = {\n\tday: function() {\n\t\treturn 1000 * 3600 * 24;//millis to day\n\t},\n\tmonth: function() {\n\t\ttimes.day() * 30;\n\t},\n\tyear: function() {\n\t\ttimes.month() * 12;\n\t}\n};\n\nvar root = module.exports = {\n\tset : function(key, val, exp) {\n    if (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key && val !== undefined) {\n\t\t\tif (typeof exp == \"string\") {\n\t\t\t\texp = times[exp]();\n\t\t\t}\n\t\t\t//try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\t\t\tif (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\t\t\tstore.set(key, {\n\t\t\t\tval : val,\n\t\t\t\texp : exp,\n\t\t\t\ttime : new Date().getTime()\n\t\t\t});\n\t\t}\n\t},\n\tremove: function(key) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) store.remove(key)\n\t},\n\tremoveAll: function(filter) {\n\t\tif (!store.enabled) return;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (typeof filter === 'function') {\n\t\t\tfor (var key in store.getAll()) {\n\t\t\t\tif (filter(key, root.get(key))) root.remove(key);\n\t\t\t}\n\t\t}\n\t},\n\tget : function(key) {\n    if (!store.enabled) return null;//this is probably in private mode. Don't run, as we might get Js errors\n\t\tif (key) {\n\t\t\tvar info = store.get(key);\n\t\t\tif (!info) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif (info.exp && new Date().getTime() - info.time > info.exp) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn info.val;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n};\n","module.exports = {\n\tdraw: function(parent, svgString) {\n\t\tif (!parent) return;\n\t\tvar el = module.exports.getElement(svgString);\n\t\tif (el) {\n\t\t\tif (parent.append) {\n\t\t\t\tparent.append(el);\n\t\t\t} else {\n\t\t\t\t//regular dom doc\n\t\t\t\tparent.appendChild(el);\n\t\t\t}\n\t\t}\n\t},\n\tgetElement: function(svgString) {\n\t\tif (svgString && svgString.indexOf(\"<svg\") == 0) {\n\t\t\t//no style passed via config. guess own styles\n\t\t\tvar parser = new DOMParser();\n\t\t\tvar dom = parser.parseFromString(svgString, \"text/xml\");\n\t\t\tvar svg = dom.documentElement;\n\t\t\t\n\t\t\tvar svgContainer = document.createElement(\"div\");\n\t\t\tsvgContainer.className = 'svgImg';\n\t\t\tsvgContainer.appendChild(svg);\n\t\t\treturn svgContainer;\n\t\t}\n\t\treturn false;\n\t}\n};","module.exports={\r\n  \"name\": \"yasgui-yasqe\",\r\n  \"description\": \"Yet Another SPARQL Query Editor\",\r\n  \"version\": \"2.11.10\",\r\n  \"main\": \"src/main.js\",\r\n  \"license\": \"MIT\",\r\n  \"author\": \"Laurens Rietveld\",\r\n  \"homepage\": \"http://yasqe.yasgui.org\",\r\n  \"scripts\": {\r\n    \"dev\": \"gulp serve\",\r\n    \"build\": \"gulp\",\r\n    \"patch\": \"gulp patch\",\r\n    \"minor\": \"gulp minor\",\r\n    \"major\": \"gulp major\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"bootstrap-sass\": \"^3.3.7\",\r\n    \"browserify\": \"^13.1.0\",\r\n    \"browserify-shim\": \"^3.8.12\",\r\n    \"browserify-transform-tools\": \"^1.6.0\",\r\n    \"exorcist\": \"^0.4.0\",\r\n    \"gulp\": \"^3.9.1\",\r\n    \"gulp-autoprefixer\": \"^3.1.0\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-cssimport\": \"^3.1.0\",\r\n    \"gulp-cssnano\": \"^2.1.2\",\r\n    \"gulp-filter\": \"^4.0.0\",\r\n    \"gulp-jsvalidate\": \"^2.1.0\",\r\n    \"gulp-notify\": \"^2.2.0\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-sass\": \"^2.3.2\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-streamify\": \"1.0.2\",\r\n    \"gulp-uglify\": \"^1.5.4\",\r\n    \"gulp-bump\": \"^2.2.0\",\r\n    \"gulp-connect\": \"^4.2.0\",\r\n    \"gulp-embedlr\": \"^0.5.2\",\r\n    \"gulp-git\": \"^1.10.0\",\r\n    \"gulp-livereload\": \"^3.8.1\",\r\n    \"gulp-tag-version\": \"^1.3.0\",\r\n    \"node-sass\": \"^3.8.0\",\r\n    \"require-dir\": \"^0.3.0\",\r\n    \"run-sequence\": \"^1.2.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"~1.1.0\",\r\n    \"vinyl-transform\": \"1.0.0\",\r\n    \"watchify\": \"^3.7.0\"\r\n  },\r\n  \"bugs\": \"https://github.com/YASGUI/YASQE/issues/\",\r\n  \"keywords\": [\r\n    \"JavaScript\",\r\n    \"SPARQL\",\r\n    \"Editor\",\r\n    \"Semantic Web\",\r\n    \"Linked Data\"\r\n  ],\r\n  \"maintainers\": [\r\n    {\r\n      \"name\": \"Laurens Rietveld\",\r\n      \"email\": \"laurens.rietveld@gmail.com\",\r\n      \"web\": \"http://laurensrietveld.nl\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/YASGUI/YASQE.git\"\r\n  },\r\n  \"dependencies\": {\r\n    \"codemirror\": \"5.17.0\",\r\n    \"jquery\": \"^2.2.4\",\r\n    \"yasgui-utils\": \"^1.6.0\"\r\n  },\r\n  \"optionalShim\": {\r\n    \"codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    },\r\n    \"jquery\": {\r\n      \"require\": \"jquery\",\r\n      \"global\": \"jQuery\"\r\n    },\r\n    \"../../lib/codemirror\": {\r\n      \"require\": \"codemirror\",\r\n      \"global\": \"CodeMirror\"\r\n    }\r\n  }\r\n}\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n  utils = require(\"../utils.js\"),\r\n  yutils = require(\"yasgui-utils\"),\r\n  Trie = require(\"../../lib/trie.js\"),\r\n  YASQE = require(\"../main.js\");\r\n\r\nmodule.exports = function(YASQE, yasqe) {\r\n  var completionNotifications = {};\r\n  var completers = {};\r\n  var tries = {};\r\n\r\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\r\n    autoComplete(true);\r\n  });\r\n  yasqe.on(\"change\", function() {\r\n    var needPossibleAdjustment = [];\r\n    for (var notificationName in completionNotifications) {\r\n      if (completionNotifications[notificationName].is(\":visible\")) {\r\n        needPossibleAdjustment.push(completionNotifications[notificationName]);\r\n      }\r\n    }\r\n    if (needPossibleAdjustment.length > 0) {\r\n      //position completion notifications\r\n      var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n      var offset = 0;\r\n      if (scrollBar.is(\":visible\")) {\r\n        offset = scrollBar.outerWidth();\r\n      }\r\n      needPossibleAdjustment.forEach(function(notification) {\r\n        notification.css(\"right\", offset);\r\n      });\r\n    }\r\n  });\r\n\r\n  /**\r\n\t * Store bulk completions in memory as trie, and store these in localstorage as well (if enabled)\r\n\t * \r\n\t * @method doc.storeBulkCompletions\r\n\t * @param completions {array}\r\n\t */\r\n  var storeBulkCompletions = function(completer, completions) {\r\n    // store array as trie\r\n    tries[completer.name] = new Trie();\r\n    for (var i = 0; i < completions.length; i++) {\r\n      tries[completer.name].insert(completions[i]);\r\n    }\r\n    // store in localstorage as well\r\n    var storageId = utils.getPersistencyId(yasqe, completer.persistent);\r\n    if (storageId) yutils.storage.set(storageId, completions, \"month\");\r\n  };\r\n\r\n  var initCompleter = function(name, completionInit) {\r\n    var completer = completers[name] = new completionInit(yasqe, name);\r\n    completer.name = name;\r\n    if (completer.bulk) {\r\n      var storeArrayAsBulk = function(suggestions) {\r\n        if (suggestions && suggestions instanceof Array && suggestions.length > 0) {\r\n          storeBulkCompletions(completer, suggestions);\r\n        }\r\n      };\r\n      if (completer.get instanceof Array) {\r\n        // we don't care whether the completions are already stored in\r\n        // localstorage. just use this one\r\n        storeArrayAsBulk(completer.get);\r\n      } else {\r\n        // if completions are defined in localstorage, use those! (calling the\r\n        // function may come with overhead (e.g. async calls))\r\n        var completionsFromStorage = null;\r\n        var persistencyIdentifier = utils.getPersistencyId(yasqe, completer.persistent);\r\n        if (persistencyIdentifier) completionsFromStorage = yutils.storage.get(persistencyIdentifier);\r\n        if (completionsFromStorage && completionsFromStorage.length > 0) {\r\n          storeArrayAsBulk(completionsFromStorage);\r\n        } else {\r\n          // nothing in storage. check whether we have a function via which we\r\n          // can get our prefixes\r\n          if (completer.get instanceof Function) {\r\n            if (completer.async) {\r\n              completer.get(null, storeArrayAsBulk);\r\n            } else {\r\n              storeArrayAsBulk(completer.get());\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  var autoComplete = function(fromAutoShow) {\r\n    if (yasqe.somethingSelected()) return;\r\n    var tryHintType = function(completer) {\r\n      if (\r\n        fromAutoShow && // from autoShow, i.e. this gets called each time the editor content changes\r\n        (!completer.autoShow || // autoshow for  this particular type of autocompletion is -not- enabled\r\n          (!completer.bulk && completer.async)) // async is enabled (don't want to re-do ajax-like request for every editor change)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      var hintConfig = {\r\n        closeCharacters: /(?=a)b/,\r\n        completeSingle: false\r\n      };\r\n      if (!completer.bulk && completer.async) {\r\n        hintConfig.async = true;\r\n      }\r\n      var wrappedHintCallback = function(yasqe, callback) {\r\n        return getCompletionHintsObject(completer, callback);\r\n      };\r\n      var result = YASQE.showHint(yasqe, wrappedHintCallback, hintConfig);\r\n      return true;\r\n    };\r\n    for (var completerName in completers) {\r\n      if ($.inArray(completerName, yasqe.options.autocompleters) == -1) continue; //this completer is disabled\r\n      var completer = completers[completerName];\r\n      if (!completer.isValidCompletionPosition) continue; //no way to check whether we are in a valid position\r\n\r\n      if (!completer.isValidCompletionPosition()) {\r\n        //if needed, fire callbacks for when we are -not- in valid completion position\r\n        if (completer.callbacks && completer.callbacks.invalidPosition) {\r\n          completer.callbacks.invalidPosition(yasqe, completer);\r\n        }\r\n        //not in a valid position, so continue to next completion candidate type\r\n        continue;\r\n      }\r\n      // run valid position handler, if there is one (if it returns false, stop the autocompletion!)\r\n      if (completer.callbacks && completer.callbacks.validPosition) {\r\n        if (completer.callbacks.validPosition(yasqe, completer) === false) continue;\r\n      }\r\n      var success = tryHintType(completer);\r\n      if (success) break;\r\n    }\r\n  };\r\n\r\n  var getCompletionHintsObject = function(completer, callback) {\r\n    var getSuggestionsFromToken = function(partialToken) {\r\n      var stringToAutocomplete = partialToken.autocompletionString || partialToken.string;\r\n      var suggestions = [];\r\n      if (tries[completer.name]) {\r\n        suggestions = tries[completer.name].autoComplete(stringToAutocomplete);\r\n      } else if (typeof completer.get == \"function\" && completer.async == false) {\r\n        suggestions = completer.get(stringToAutocomplete);\r\n      } else if (typeof completer.get == \"object\") {\r\n        var partialTokenLength = stringToAutocomplete.length;\r\n        for (var i = 0; i < completer.get.length; i++) {\r\n          var completion = completer.get[i];\r\n          if (completion.slice(0, partialTokenLength) == stringToAutocomplete) {\r\n            suggestions.push(completion);\r\n          }\r\n        }\r\n      }\r\n      return getSuggestionsAsHintObject(suggestions, completer, partialToken);\r\n    };\r\n\r\n    var token = yasqe.getCompleteToken();\r\n    if (completer.preProcessToken) {\r\n      token = completer.preProcessToken(token);\r\n    }\r\n\r\n    if (token) {\r\n      // use custom completionhint function, to avoid reaching a loop when the\r\n      // completionhint is the same as the current token\r\n      // regular behaviour would keep changing the codemirror dom, hence\r\n      // constantly calling this callback\r\n      if (!completer.bulk && completer.async) {\r\n        var wrappedCallback = function(suggestions) {\r\n          callback(getSuggestionsAsHintObject(suggestions, completer, token));\r\n        };\r\n        completer.get(token, wrappedCallback);\r\n      } else {\r\n        return getSuggestionsFromToken(token);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n\t *  get our array of suggestions (strings) in the codemirror hint format\r\n\t */\r\n  var getSuggestionsAsHintObject = function(suggestions, completer, token) {\r\n    var hintList = [];\r\n    for (var i = 0; i < suggestions.length; i++) {\r\n      var suggestedString = suggestions[i];\r\n      if (completer.postProcessToken) {\r\n        suggestedString = completer.postProcessToken(token, suggestedString);\r\n      }\r\n      hintList.push({\r\n        text: suggestedString,\r\n        displayText: suggestedString,\r\n        hint: selectHint\r\n      });\r\n    }\r\n\r\n    var cur = yasqe.getCursor();\r\n    var returnObj = {\r\n      completionToken: token.string,\r\n      list: hintList,\r\n      from: {\r\n        line: cur.line,\r\n        ch: token.start\r\n      },\r\n      to: {\r\n        line: cur.line,\r\n        ch: token.end\r\n      }\r\n    };\r\n    //if we have some autocompletion handlers specified, add these these to the object. Codemirror will take care of firing these\r\n    if (completer.callbacks) {\r\n      for (var callbackName in completer.callbacks) {\r\n        if (completer.callbacks[callbackName]) {\r\n          YASQE.on(returnObj, callbackName, completer.callbacks[callbackName]);\r\n        }\r\n      }\r\n    }\r\n    return returnObj;\r\n  };\r\n\r\n  return {\r\n    init: initCompleter,\r\n    completers: completers,\r\n    notifications: {\r\n      getEl: function(completer) {\r\n        return $(completionNotifications[completer.name]);\r\n      },\r\n      show: function(yasqe, completer) {\r\n        //only draw when the user needs to use a keypress to summon autocompletions\r\n        if (!completer.autoshow) {\r\n          if (!completionNotifications[completer.name])\r\n            completionNotifications[completer.name] = $(\"<div class='completionNotification'></div>\");\r\n          completionNotifications[completer.name]\r\n            .show()\r\n            .text(\r\n              \"Press \" +\r\n                (navigator.userAgent.indexOf(\"Mac OS X\") != -1 ? \"CMD\" : \"CTRL\") +\r\n                \" - <spacebar> to autocomplete\"\r\n            )\r\n            .appendTo($(yasqe.getWrapperElement()));\r\n        }\r\n      },\r\n      hide: function(yasqe, completer) {\r\n        if (completionNotifications[completer.name]) {\r\n          completionNotifications[completer.name].hide();\r\n        }\r\n      }\r\n    },\r\n    autoComplete: autoComplete,\r\n    getTrie: function(completer) {\r\n      return typeof completer == \"string\" ? tries[completer] : tries[completer.name];\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * function which fires after the user selects a completion. this function checks whether we actually need to store this one (if completion is same as current token, don't do anything)\r\n */\r\nvar selectHint = function(yasqe, data, completion) {\r\n  if (completion.text != yasqe.getTokenAt(yasqe.getCursor()).string) {\r\n    yasqe.replaceRange(completion.text, data.from, data.to);\r\n  }\r\n};\r\n\r\n//\r\n//module.exports = {\r\n//\tpreprocessPrefixTokenForCompletion: preprocessPrefixTokenForCompletion,\r\n//\tpostprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion,\r\n//\tpreprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n//\tshowCompletionNotification: showCompletionNotification,\r\n//\thideCompletionNotification: hideCompletionNotification,\r\n//\tautoComplete: autoComplete,\r\n//\tautocompleteVariables: autocompleteVariables,\r\n//\tfetchFromPrefixCc: fetchFromPrefixCc,\r\n//\tfetchFromLov: fetchFromLov,\r\n////\tstoreBulkCompletions: storeBulkCompletions,\r\n//\tloadBulkCompletions: loadBulkCompletions,\r\n//};\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(yasqe);\r\n    },\r\n    get: function(token, callback) {\r\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preProcessToken(yasqe, token);\r\n    },\r\n    postProcessToken: function(token, suggestedString) {\r\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\r\n    },\r\n    async: true,\r\n    bulk: false,\r\n    autoShow: false,\r\n    persistent: name,\r\n    callbacks: {\r\n      validPosition: yasqe.autocompleters.notifications.show,\r\n      invalidPosition: yasqe.autocompleters.notifications.hide\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n  var token = yasqe.getCompleteToken();\r\n  if (token.string.indexOf(\"?\") == 0) return false;\r\n  var cur = yasqe.getCursor();\r\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n  if (previousToken.string == \"a\") return true;\r\n  if (previousToken.string == \"rdf:type\") return true;\r\n  if (previousToken.string == \"rdfs:domain\") return true;\r\n  if (previousToken.string == \"rdfs:range\") return true;\r\n  return false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\r\n};\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n//this is a mapping from the class names (generic ones, for compatability with codemirror themes), to what they -actually- represent\r\nvar tokenTypes = {\r\n  \"string-2\": \"prefixed\",\r\n  atom: \"var\"\r\n};\r\n\r\nmodule.exports = function(yasqe, completerName) {\r\n  //this autocompleter also fires on-change!\r\n  yasqe.on(\"change\", function() {\r\n    module.exports.appendPrefixIfNeeded(yasqe, completerName);\r\n  });\r\n\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(yasqe);\r\n    },\r\n    get: function(token, callback) {\r\n      $.get(module.exports.fetchFrom, function(data) {\r\n        var prefixArray = [];\r\n        for (var prefix in data) {\r\n          if (prefix == \"bif\") continue; // skip this one! see #231\r\n          var completeString = prefix + \": <\" + data[prefix] + \">\";\r\n          prefixArray.push(completeString); // the array we want to store in localstorage\r\n        }\r\n\r\n        prefixArray.sort();\r\n        callback(prefixArray);\r\n      });\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preprocessPrefixTokenForCompletion(yasqe, token);\r\n    },\r\n    async: true,\r\n    bulk: true,\r\n    autoShow: true,\r\n    persistent: completerName,\r\n    callbacks: {\r\n      pick: function() {\r\n        yasqe.collapsePrefixes(false);\r\n      }\r\n    }\r\n  };\r\n};\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n  var cur = yasqe.getCursor(), token = yasqe.getTokenAt(cur);\r\n\r\n  // not at end of line\r\n  if (yasqe.getLine(cur.line).length > cur.ch) return false;\r\n\r\n  if (token.type != \"ws\") {\r\n    // we want to complete token, e.g. when the prefix starts with an a\r\n    // (treated as a token in itself..)\r\n    // but we to avoid including the PREFIX tag. So when we have just\r\n    // typed a space after the prefix tag, don't get the complete token\r\n    token = yasqe.getCompleteToken();\r\n  }\r\n\r\n  // we shouldnt be at the uri part the prefix declaration\r\n  // also check whether current token isnt 'a' (that makes codemirror\r\n  // thing a namespace is a possiblecurrent\r\n  if (!token.string.indexOf(\"a\") == 0 && $.inArray(\"PNAME_NS\", token.state.possibleCurrent) == -1) return false;\r\n\r\n  // First token of line needs to be PREFIX,\r\n  // there should be no trailing text (otherwise, text is wrongly inserted\r\n  // in between)\r\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n  if (!previousToken || previousToken.string.toUpperCase() != \"PREFIX\") return false;\r\n  return true;\r\n};\r\nmodule.exports.preprocessPrefixTokenForCompletion = function(yasqe, token) {\r\n  var previousToken = yasqe.getPreviousNonWsToken(yasqe.getCursor().line, token);\r\n  if (previousToken && previousToken.string && previousToken.string.slice(-1) == \":\") {\r\n    //combine both tokens! In this case we have the cursor at the end of line \"PREFIX bla: <\".\r\n    //we want the token to be \"bla: <\", en not \"<\"\r\n    token = {\r\n      start: previousToken.start,\r\n      end: token.end,\r\n      string: previousToken.string + \" \" + token.string,\r\n      state: token.state\r\n    };\r\n  }\r\n  return token;\r\n};\r\n/**\r\n * Check whether typed prefix is declared. If not, automatically add declaration\r\n * using list from prefix.cc\r\n *\r\n * @param yasqe\r\n */\r\nmodule.exports.appendPrefixIfNeeded = function(yasqe, completerName) {\r\n  if (!yasqe.autocompleters.getTrie(completerName)) return; // no prefixed defined. just stop\r\n  if (!yasqe.options.autocompleters || yasqe.options.autocompleters.indexOf(completerName) == -1) return; //this autocompleter is disabled\r\n  var cur = yasqe.getCursor();\r\n\r\n  var token = yasqe.getTokenAt(cur);\r\n  if (tokenTypes[token.type] == \"prefixed\") {\r\n    var colonIndex = token.string.indexOf(\":\");\r\n    if (colonIndex !== -1) {\r\n      // check previous token isnt PREFIX, or a '<'(which would mean we are in a uri)\r\n      //\t\t\tvar firstTokenString = yasqe.getNextNonWsToken(cur.line).string.toUpperCase();\r\n      var lastNonWsTokenString = yasqe.getPreviousNonWsToken(cur.line, token).string.toUpperCase();\r\n      var previousToken = yasqe.getTokenAt({\r\n        line: cur.line,\r\n        ch: token.start\r\n      }); // needs to be null (beginning of line), or whitespace\r\n      if (lastNonWsTokenString != \"PREFIX\" && (previousToken.type == \"ws\" || previousToken.type == null)) {\r\n        // check whether it isnt defined already (saves us from looping\r\n        // through the array)\r\n        var currentPrefix = token.string.substring(0, colonIndex + 1);\r\n        var queryPrefixes = yasqe.getPrefixesFromQuery();\r\n        if (queryPrefixes[currentPrefix.slice(0, -1)] == null) {\r\n          // ok, so it isnt added yet!\r\n          var completions = yasqe.autocompleters.getTrie(completerName).autoComplete(currentPrefix);\r\n          if (completions.length > 0) {\r\n            yasqe.addPrefixes(completions[0]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports.fetchFrom = (window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\") +\r\n  \"prefix.cc/popular/all.file.json\";\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe, name) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      return module.exports.isValidCompletionPosition(yasqe);\r\n    },\r\n    get: function(token, callback) {\r\n      return require(\"./utils\").fetchFromLov(yasqe, this, token, callback);\r\n    },\r\n    preProcessToken: function(token) {\r\n      return module.exports.preProcessToken(yasqe, token);\r\n    },\r\n    postProcessToken: function(token, suggestedString) {\r\n      return module.exports.postProcessToken(yasqe, token, suggestedString);\r\n    },\r\n    async: true,\r\n    bulk: false,\r\n    autoShow: false,\r\n    persistent: name,\r\n    callbacks: {\r\n      validPosition: yasqe.autocompleters.notifications.show,\r\n      invalidPosition: yasqe.autocompleters.notifications.hide\r\n    }\r\n  };\r\n};\r\n\r\nmodule.exports.isValidCompletionPosition = function(yasqe) {\r\n  var token = yasqe.getCompleteToken();\r\n  if (token.string.length == 0) return false; //we want -something- to autocomplete\r\n  if (token.string.indexOf(\"?\") == 0) return false; // we are typing a var\r\n  if ($.inArray(\"a\", token.state.possibleCurrent) >= 0) return true; // predicate pos\r\n  var cur = yasqe.getCursor();\r\n  var previousToken = yasqe.getPreviousNonWsToken(cur.line, token);\r\n  if (previousToken.string == \"rdfs:subPropertyOf\") return true;\r\n\r\n  // hmm, we would like -better- checks here, e.g. checking whether we are\r\n  // in a subject, and whether next item is a rdfs:subpropertyof.\r\n  // difficult though... the grammar we use is unreliable when the query\r\n  // is invalid (i.e. during typing), and often the predicate is not typed\r\n  // yet, when we are busy writing the subject...\r\n  return false;\r\n};\r\nmodule.exports.preProcessToken = function(yasqe, token) {\r\n  return require(\"./utils.js\").preprocessResourceTokenForCompletion(yasqe, token);\r\n};\r\nmodule.exports.postProcessToken = function(yasqe, token, suggestedString) {\r\n  return require(\"./utils.js\").postprocessResourceTokenForCompletion(yasqe, token, suggestedString);\r\n};\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\"), yutils = require(\"yasgui-utils\");\r\n/**\r\n * Where the base class only contains functionality related to -all- completions, this class contains some utils used here and there in our autocompletions\r\n */\r\n\r\n/**\r\n * Converts rdf:type to http://.../type and converts <http://...> to http://...\r\n * Stores additional info such as the used namespace and prefix in the token object\r\n */\r\nvar preprocessResourceTokenForCompletion = function(yasqe, token) {\r\n  var queryPrefixes = yasqe.getPrefixesFromQuery();\r\n  if (!token.string.indexOf(\"<\") == 0) {\r\n    token.tokenPrefix = token.string.substring(0, token.string.indexOf(\":\") + 1);\r\n\r\n    if (queryPrefixes[token.tokenPrefix.slice(0, -1)] != null) {\r\n      token.tokenPrefixUri = queryPrefixes[token.tokenPrefix.slice(0, -1)];\r\n    }\r\n  }\r\n\r\n  token.autocompletionString = token.string.trim();\r\n  if (!token.string.indexOf(\"<\") == 0 && token.string.indexOf(\":\") > -1) {\r\n    // hmm, the token is prefixed. We still need the complete uri for autocompletions. generate this!\r\n    for (var prefix in queryPrefixes) {\r\n      if (token.tokenPrefix === prefix + \":\") {\r\n        token.autocompletionString = queryPrefixes[prefix];\r\n        token.autocompletionString += token.string.substring(prefix.length + 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (token.autocompletionString.indexOf(\"<\") == 0)\r\n    token.autocompletionString = token.autocompletionString.substring(1);\r\n  if (token.autocompletionString.indexOf(\">\", token.length - 1) !== -1)\r\n    token.autocompletionString = token.autocompletionString.substring(0, token.autocompletionString.length - 1);\r\n  return token;\r\n};\r\n\r\nvar postprocessResourceTokenForCompletion = function(yasqe, token, suggestedString) {\r\n  if (token.tokenPrefix && token.autocompletionString && token.tokenPrefixUri) {\r\n    // we need to get the suggested string back to prefixed form\r\n    suggestedString = token.tokenPrefix + suggestedString.substring(token.tokenPrefixUri.length);\r\n  } else {\r\n    // it is a regular uri. add '<' and '>' to string\r\n    suggestedString = \"<\" + suggestedString + \">\";\r\n  }\r\n  return suggestedString;\r\n};\r\n\r\n//Use protocol relative request when served via http[s]*. Otherwise (e.g. file://, fetch via http)\r\nvar reqProtocol = window.location.protocol.indexOf(\"http\") === 0 ? \"//\" : \"http://\";\r\nvar fetchFromLov = function(yasqe, completer, token, callback) {\r\n  if (!token || !token.string || token.string.trim().length == 0) {\r\n    yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Nothing to autocomplete yet!\");\r\n    return false;\r\n  }\r\n  var maxResults = 50;\r\n\r\n  var args = {\r\n    q: token.autocompletionString,\r\n    page: 1\r\n  };\r\n  if (completer.name == \"classes\") {\r\n    args.type = \"class\";\r\n  } else {\r\n    args.type = \"property\";\r\n  }\r\n  var results = [];\r\n  var url = \"\";\r\n  var updateUrl = function() {\r\n    url = reqProtocol + \"lov.okfn.org/dataset/lov/api/v2/autocomplete/terms?\" + $.param(args);\r\n  };\r\n  updateUrl();\r\n  var increasePage = function() {\r\n    args.page++;\r\n    updateUrl();\r\n  };\r\n  var doRequests = function() {\r\n    $.get(url, function(data) {\r\n      for (var i = 0; i < data.results.length; i++) {\r\n        if ($.isArray(data.results[i].uri) && data.results[i].uri.length > 0) {\r\n          results.push(data.results[i].uri[0]);\r\n        } else {\r\n          results.push(data.results[i].uri);\r\n        }\r\n      }\r\n      if (results.length < data.total_results && results.length < maxResults) {\r\n        increasePage();\r\n        doRequests();\r\n      } else {\r\n        //if notification bar is there, show feedback, or close\r\n        if (results.length > 0) {\r\n          yasqe.autocompleters.notifications.hide(yasqe, completer);\r\n        } else {\r\n          yasqe.autocompleters.notifications.getEl(completer).text(\"0 matches found...\");\r\n        }\r\n        callback(results);\r\n        // requests done! Don't call this function again\r\n      }\r\n    }).fail(function(jqXHR, textStatus, errorThrown) {\r\n      yasqe.autocompleters.notifications.getEl(completer).empty().append(\"Failed fetching suggestions..\");\r\n    });\r\n  };\r\n  //if notification bar is there, show a loader\r\n  yasqe.autocompleters.notifications\r\n    .getEl(completer)\r\n    .empty()\r\n    .append($(\"<span>Fetchting autocompletions &nbsp;</span>\"))\r\n    .append($(yutils.svg.getElement(require(\"../imgs.js\").loader)).addClass(\"notificationLoader\"));\r\n  doRequests();\r\n};\r\n\r\nmodule.exports = {\r\n  fetchFromLov: fetchFromLov,\r\n  preprocessResourceTokenForCompletion: preprocessResourceTokenForCompletion,\r\n  postprocessResourceTokenForCompletion: postprocessResourceTokenForCompletion\r\n};\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nmodule.exports = function(yasqe) {\r\n  return {\r\n    isValidCompletionPosition: function() {\r\n      var token = yasqe.getTokenAt(yasqe.getCursor());\r\n      if (token.type != \"ws\") {\r\n        token = yasqe.getCompleteToken(token);\r\n        if (token && token.string.indexOf(\"?\") == 0) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    get: function(token) {\r\n      if (token.trim().length == 0) return []; //nothing to autocomplete\r\n      var distinctVars = {};\r\n      //do this outside of codemirror. I expect jquery to be faster here (just finding dom elements with classnames)\r\n      $(yasqe.getWrapperElement()).find(\".cm-atom\").each(function() {\r\n        var variable = this.innerHTML;\r\n        if (variable.indexOf(\"?\") == 0) {\r\n          //ok, lets check if the next element in the div is an atom as well. In that case, they belong together (may happen sometimes when query is not syntactically valid)\r\n          var nextEl = $(this).next();\r\n          var nextElClass = nextEl.attr(\"class\");\r\n          if (nextElClass && nextEl.attr(\"class\").indexOf(\"cm-atom\") >= 0) {\r\n            variable += nextEl.text();\r\n          }\r\n\r\n          //skip single questionmarks\r\n          if (variable.length <= 1) return;\r\n\r\n          //it should match our token ofcourse\r\n          if (variable.indexOf(token) !== 0) return;\r\n\r\n          //skip exact matches\r\n          if (variable == token) return;\r\n\r\n          //store in map so we have a unique list\r\n          distinctVars[variable] = true;\r\n        }\r\n      });\r\n      var variables = [];\r\n      for (var variable in distinctVars) {\r\n        variables.push(variable);\r\n      }\r\n      variables.sort();\r\n      return variables;\r\n    },\r\n    async: false,\r\n    bulk: false,\r\n    autoShow: true\r\n  };\r\n};\r\n","var sparql = require(\"./sparql.js\"), $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\nvar quote = function(string) {\r\n  return \"'\" + string + \"'\";\r\n};\r\nmodule.exports = {\r\n  createCurlString: function(yasqe, config) {\r\n    var ajaxConfig = sparql.getAjaxConfig(yasqe, config);\r\n    var url = ajaxConfig.url;\r\n    if (ajaxConfig.url.indexOf(\"http\") !== 0) {\r\n      //this is either a relative or absolute url, which is not supported by CURL.\r\n      //Add domain, schema, etc etc\r\n      var url = window.location.protocol + \"//\" + window.location.host;\r\n      if (ajaxConfig.url.indexOf(\"/\") === 0) {\r\n        //its an absolute path\r\n        url += ajaxConfig.url;\r\n      } else {\r\n        //relative, so append current location to url first\r\n        url += window.location.pathname + ajaxConfig.url;\r\n      }\r\n    }\r\n    var cmds = [\"curl\", url, \"-X\", yasqe.options.sparql.requestMethod];\r\n    if (yasqe.options.sparql.requestMethod == \"POST\") {\r\n      cmds.push(\"--data \" + quote($.param(ajaxConfig.data)));\r\n    }\r\n    for (var header in ajaxConfig.headers) {\r\n      cmds.push(\"-H \" + quote(header + \": \" + ajaxConfig.headers[header]));\r\n    }\r\n    return cmds.join(\" \");\r\n  }\r\n};\r\n","/**\r\n * The default options of YASQE (check the CodeMirror documentation for even\r\n * more options, such as disabling line numbers, or changing keyboard shortcut\r\n * keys). Either change the default options by setting YASQE.defaults, or by\r\n * passing your own options as second argument to the YASQE constructor\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), YASQE = require(\"./main.js\");\r\nYASQE.defaults = $.extend(true, {}, YASQE.defaults, {\r\n  mode: \"sparql11\",\r\n  /**\r\n\t * Query string\r\n\t */\r\n  value: \"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\nSELECT * WHERE {\\n  ?sub ?pred ?obj .\\n} \\nLIMIT 10\",\r\n  highlightSelectionMatches: {\r\n    showToken: /\\w/\r\n  },\r\n  tabMode: \"indent\",\r\n  lineNumbers: true,\r\n  lineWrapping: true,\r\n  backdrop: false,\r\n  foldGutter: {\r\n    rangeFinder: new YASQE.fold.combine(YASQE.fold.brace, YASQE.fold.prefix)\r\n  },\r\n  collapsePrefixesOnLoad: false,\r\n  gutters: [\"gutterErrorBar\", \"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\r\n  matchBrackets: true,\r\n  fixedGutter: true,\r\n  syntaxErrorCheck: true,\r\n  /**\r\n\t * Extra shortcut keys. Check the CodeMirror manual on how to add your own\r\n\t *\r\n\t * @property extraKeys\r\n\t * @type object\r\n\t */\r\n  extraKeys: {\r\n    //\t\t\t\t\t\"Ctrl-Space\" : function(yasqe) {\r\n    //\t\t\t\t\t\tYASQE.autoComplete(yasqe);\r\n    //\t\t\t\t\t},\r\n    \"Ctrl-Space\": YASQE.autoComplete,\r\n\r\n    \"Cmd-Space\": YASQE.autoComplete,\r\n    \"Ctrl-D\": YASQE.deleteLine,\r\n    \"Ctrl-K\": YASQE.deleteLine,\r\n    \"Shift-Ctrl-K\": YASQE.deleteLine,\r\n    \"Cmd-D\": YASQE.deleteLine,\r\n    \"Cmd-K\": YASQE.deleteLine,\r\n    \"Ctrl-/\": YASQE.commentLines,\r\n    \"Cmd-/\": YASQE.commentLines,\r\n    \"Ctrl-Alt-Down\": YASQE.copyLineDown,\r\n    \"Ctrl-Alt-Up\": YASQE.copyLineUp,\r\n    \"Cmd-Alt-Down\": YASQE.copyLineDown,\r\n    \"Cmd-Alt-Up\": YASQE.copyLineUp,\r\n    \"Shift-Ctrl-F\": YASQE.doAutoFormat,\r\n    \"Shift-Cmd-F\": YASQE.doAutoFormat,\r\n    \"Ctrl-]\": YASQE.indentMore,\r\n    \"Cmd-]\": YASQE.indentMore,\r\n    \"Ctrl-[\": YASQE.indentLess,\r\n    \"Cmd-[\": YASQE.indentLess,\r\n    \"Ctrl-S\": YASQE.storeQuery,\r\n    \"Cmd-S\": YASQE.storeQuery,\r\n    \"Ctrl-Enter\": YASQE.executeQuery,\r\n    \"Cmd-Enter\": YASQE.executeQuery,\r\n    F11: function(yasqe) {\r\n      yasqe.setOption(\"fullScreen\", !yasqe.getOption(\"fullScreen\"));\r\n    },\r\n    Esc: function(yasqe) {\r\n      if (yasqe.getOption(\"fullScreen\")) yasqe.setOption(\"fullScreen\", false);\r\n    }\r\n  },\r\n  cursorHeight: 0.9,\r\n\r\n  /**\r\n\t * Show a button with which users can create a link to this query. Set this value to null to disable this functionality.\r\n\t * By default, this feature is enabled, and the only the query value is appended to the link.\r\n\t * ps. This function should return an object which is parseable by jQuery.param (http://api.jquery.com/jQuery.param/)\r\n\t */\r\n  createShareLink: YASQE.createShareLink,\r\n\r\n  createShortLink: null,\r\n\r\n  /**\r\n\t * Consume links shared by others, by checking the url for arguments coming from a query link. Defaults by only checking the 'query=' argument in the url\r\n\t */\r\n  consumeShareLink: YASQE.consumeShareLink,\r\n\r\n  /**\r\n\t * Change persistency settings for the YASQE query value. Setting the values\r\n\t * to null, will disable persistancy: nothing is stored between browser\r\n\t * sessions Setting the values to a string (or a function which returns a\r\n\t * string), will store the query in localstorage using the specified string.\r\n\t * By default, the ID is dynamically generated using the closest dom ID, to avoid collissions when using multiple YASQE items on one\r\n\t * page\r\n\t *\r\n\t * @type function|string\r\n\t */\r\n  persistent: function(yasqe) {\r\n    return \"yasqe_\" + $(yasqe.getWrapperElement()).closest(\"[id]\").attr(\"id\") + \"_queryVal\";\r\n  },\r\n\r\n  /**\r\n\t * Settings for querying sparql endpoints\r\n\t */\r\n  sparql: {\r\n    queryName: function(yasqe) {\r\n      return yasqe.getQueryMode();\r\n    },\r\n    showQueryButton: false,\r\n\r\n    /**f\r\n\t\t * Endpoint to query\r\n\t\t *\r\n\t\t * @property sparql.endpoint\r\n\t\t * @type String|function\r\n\t\t */\r\n    endpoint: \"http://dbpedia.org/sparql\",\r\n    /**\r\n\t\t * Request method via which to access SPARQL endpoint\r\n\t\t *\r\n\t\t * @property sparql.requestMethod\r\n\t\t * @type String|function\r\n\t\t */\r\n    requestMethod: \"POST\",\r\n\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderGraph: \"text/turtle,*/*;q=0.9\",\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderSelect: \"application/sparql-results+json,*/*;q=0.9\",\r\n    /**\r\n\t\t * @type String|function\r\n\t\t */\r\n    acceptHeaderUpdate: \"text/plain,*/*;q=0.9\",\r\n\r\n    /**\r\n\t\t * Named graphs to query.\r\n\t\t */\r\n    namedGraphs: [],\r\n    /**\r\n\t\t * Default graphs to query.\r\n\t\t */\r\n    defaultGraphs: [],\r\n\r\n    /**\r\n\t\t * Additional request arguments. Add them in the form: {name: \"name\", value: \"value\"}\r\n\t\t */\r\n    args: [],\r\n\r\n    /**\r\n\t\t * Additional request headers\r\n\t\t */\r\n    headers: {},\r\n\r\n    getQueryForAjax: null,\r\n    /**\r\n\t\t * Set of ajax callbacks\r\n\t\t */\r\n    callbacks: {\r\n      beforeSend: null,\r\n      complete: null,\r\n      error: null,\r\n      success: null\r\n    },\r\n    handlers: {} //keep here for backwards compatability\r\n  }\r\n});\r\n","//this is the entry-point for browserify.\r\n//the current browserify version does not support require-ing js files which are used as entry-point\r\n//this way, we can still require our main.js file\r\nmodule.exports = require(\"./main.js\");\r\n","\"use strict\";\r\nmodule.exports = {\r\n  query: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 80 80\" enable-background=\"new 0 0 80 80\" xml:space=\"preserve\"><g ></g><g >\t<path d=\"M64.622,2.411H14.995c-6.627,0-12,5.373-12,12v49.897c0,6.627,5.373,12,12,12h49.627c6.627,0,12-5.373,12-12V14.411   C76.622,7.783,71.249,2.411,64.622,2.411z M24.125,63.906V15.093L61,39.168L24.125,63.906z\"/></g></svg>',\r\n  queryInvalid: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"0 0 73.627 73.897\"   enable-background=\"new 0 0 80 80\"   xml:space=\"preserve\"      inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"warning.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     inkscape:zoom=\"3.1936344\"     inkscape:cx=\"36.8135\"     inkscape:cy=\"36.9485\"     inkscape:window-x=\"2625\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"svg2\" /><g     transform=\"translate(-2.995,-2.411)\"      /><g     transform=\"translate(-2.995,-2.411)\"     ><path       d=\"M 64.622,2.411 H 14.995 c -6.627,0 -12,5.373 -12,12 v 49.897 c 0,6.627 5.373,12 12,12 h 49.627 c 6.627,0 12,-5.373 12,-12 V 14.411 c 0,-6.628 -5.373,-12 -12,-12 z M 24.125,63.906 V 15.093 L 61,39.168 24.125,63.906 z\"       inkscape:connector-curvature=\"0\"        /></g><path     d=\"M 66.129381,65.903784 H 49.769875 c -1.64721,0 -2.889385,-0.581146 -3.498678,-1.63595 -0.609293,-1.055608 -0.491079,-2.422161 0.332391,-3.848223 l 8.179753,-14.167069 c 0.822934,-1.42633 1.9477,-2.211737 3.166018,-2.211737 1.218319,0 2.343086,0.785407 3.166019,2.211737 l 8.179751,14.167069 c 0.823472,1.426062 0.941686,2.792615 0.33239,3.848223 -0.609023,1.054804 -1.851197,1.63595 -3.498138,1.63595 z M 59.618815,60.91766 c 0,-0.850276 -0.68944,-1.539719 -1.539717,-1.539719 -0.850276,0 -1.539718,0.689443 -1.539718,1.539719 0,0.850277 0.689442,1.539718 1.539718,1.539718 0.850277,0 1.539717,-0.689441 1.539717,-1.539718 z m 0.04155,-9.265919 c 0,-0.873061 -0.707939,-1.580998 -1.580999,-1.580998 -0.873061,0 -1.580999,0.707937 -1.580999,1.580998 l 0.373403,5.610965 h 0.0051 c 0.05415,0.619747 0.568548,1.10761 1.202504,1.10761 0.586239,0 1.075443,-0.415756 1.188563,-0.968489 0.0092,-0.04476 0.0099,-0.09248 0.01392,-0.138854 h 0.01072 l 0.367776,-5.611232 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#aa8800\" /></svg>',\r\n  download: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" baseProfile=\"tiny\" x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" xml:space=\"preserve\"><g ></g><g >\t<path fill-rule=\"evenodd\" fill=\"#000000\" d=\"M88,84v-2c0-2.961-0.859-4-4-4H16c-2.961,0-4,0.98-4,4v2c0,3.102,1.039,4,4,4h68   C87.02,88,88,87.039,88,84z M58,12H42c-5,0-6,0.941-6,6v22H16l34,34l34-34H64V18C64,12.941,62.939,12,58,12z\"/></g></svg>',\r\n  share: '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"  x=\"0px\" y=\"0px\" width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" style=\"enable-background:new 0 0 100 100;\" xml:space=\"preserve\"><path d=\"M36.764,50c0,0.308-0.07,0.598-0.088,0.905l32.247,16.119c2.76-2.338,6.293-3.797,10.195-3.797  C87.89,63.228,95,70.338,95,79.109C95,87.89,87.89,95,79.118,95c-8.78,0-15.882-7.11-15.882-15.891c0-0.316,0.07-0.598,0.088-0.905  L31.077,62.085c-2.769,2.329-6.293,3.788-10.195,3.788C12.11,65.873,5,58.771,5,50c0-8.78,7.11-15.891,15.882-15.891  c3.902,0,7.427,1.468,10.195,3.797l32.247-16.119c-0.018-0.308-0.088-0.598-0.088-0.914C63.236,12.11,70.338,5,79.118,5  C87.89,5,95,12.11,95,20.873c0,8.78-7.11,15.891-15.882,15.891c-3.911,0-7.436-1.468-10.195-3.806L36.676,49.086  C36.693,49.394,36.764,49.684,36.764,50z\"/></svg>',\r\n  warning: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"   x=\"0px\"   y=\"0px\"   viewBox=\"0 0 66.399998 66.399998\"   enable-background=\"new 0 0 69.3 69.3\"   xml:space=\"preserve\"   height=\"100%\"   width=\"100%\"   inkscape:version=\"0.48.4 r9939\"   ><g      transform=\"translate(-1.5,-1.5)\"     style=\"fill:#ff0000\"><path       d=\"M 34.7,1.5 C 16.4,1.5 1.5,16.4 1.5,34.7 1.5,53 16.4,67.9 34.7,67.9 53,67.9 67.9,53 67.9,34.7 67.9,16.4 53,1.5 34.7,1.5 z m 0,59.4 C 20.2,60.9 8.5,49.1 8.5,34.7 8.5,20.2 20.3,8.5 34.7,8.5 c 14.4,0 26.2,11.8 26.2,26.2 0,14.4 -11.8,26.2 -26.2,26.2 z\"      inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.6,47.1 c -1.4,0 -2.5,0.5 -3.5,1.5 -0.9,1 -1.4,2.2 -1.4,3.6 0,1.6 0.5,2.8 1.5,3.8 1,0.9 2.1,1.3 3.4,1.3 1.3,0 2.4,-0.5 3.4,-1.4 1,-0.9 1.5,-2.2 1.5,-3.7 0,-1.4 -0.5,-2.6 -1.4,-3.6 -0.9,-1 -2.1,-1.5 -3.5,-1.5 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /><path       d=\"m 34.8,13.9 c -1.5,0 -2.8,0.5 -3.7,1.6 -0.9,1 -1.4,2.4 -1.4,4.2 0,1.1 0.1,2.9 0.2,5.6 l 0.8,13.1 c 0.2,1.8 0.4,3.2 0.9,4.1 0.5,1.2 1.5,1.8 2.9,1.8 1.3,0 2.3,-0.7 2.9,-1.9 0.5,-1 0.7,-2.3 0.9,-4 L 39.4,25 c 0.1,-1.3 0.2,-2.5 0.2,-3.8 0,-2.2 -0.3,-3.9 -0.8,-5.1 -0.5,-1 -1.6,-2.2 -4,-2.2 z\"       inkscape:connector-curvature=\"0\"       style=\"fill:#ff0000\" /></g></svg>',\r\n  fullscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"640\"     inkscape:window-height=\"480\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"0\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m -7.962963,-10 v 38.889 l 16.667,-16.667 16.667,16.667 5.555,-5.555 -16.667,-16.667 16.667,-16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 92.037037,-10 v 38.889 l -16.667,-16.667 -16.666,16.667 -5.556,-5.555 16.666,-16.667 -16.666,-16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M -7.962963,90 V 51.111 l 16.667,16.666 16.667,-16.666 5.555,5.556 -16.667,16.666 16.667,16.667 h -38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"M 92.037037,90 V 51.111 l -16.667,16.666 -16.666,-16.666 -5.556,5.556 16.666,16.666 -16.666,16.667 h 38.889 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>',\r\n  smallscreen: '<svg   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"   xmlns:cc=\"http://creativecommons.org/ns#\"   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"   xmlns:svg=\"http://www.w3.org/2000/svg\"   xmlns=\"http://www.w3.org/2000/svg\"   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"   version=\"1.1\"      x=\"0px\"   y=\"0px\"   width=\"100%\"   height=\"100%\"   viewBox=\"5 -10 74.074074 100\"   enable-background=\"new 0 0 100 100\"   xml:space=\"preserve\"   inkscape:version=\"0.48.4 r9939\"   sodipodi:docname=\"noun_2186_cc.svg\"><metadata     ><rdf:RDF><cc:Work         rdf:about=\"\"><dc:format>image/svg+xml</dc:format><dc:type           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" /></cc:Work></rdf:RDF></metadata><defs      /><sodipodi:namedview     pagecolor=\"#ffffff\"     bordercolor=\"#666666\"     borderopacity=\"1\"     objecttolerance=\"10\"     gridtolerance=\"10\"     guidetolerance=\"10\"     inkscape:pageopacity=\"0\"     inkscape:pageshadow=\"2\"     inkscape:window-width=\"1855\"     inkscape:window-height=\"1056\"          showgrid=\"false\"     fit-margin-top=\"0\"     fit-margin-left=\"0\"     fit-margin-right=\"0\"     fit-margin-bottom=\"0\"     inkscape:zoom=\"2.36\"     inkscape:cx=\"44.101509\"     inkscape:cy=\"31.481481\"     inkscape:window-x=\"65\"     inkscape:window-y=\"24\"     inkscape:window-maximized=\"1\"     inkscape:current-layer=\"Layer_1\" /><path     d=\"m 30.926037,28.889 0,-38.889 -16.667,16.667 -16.667,-16.667 -5.555,5.555 16.667,16.667 -16.667,16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,28.889 0,-38.889 16.667,16.667 16.666,-16.667 5.556,5.555 -16.666,16.667 16.666,16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 30.926037,51.111 0,38.889 -16.667,-16.666 -16.667,16.666 -5.555,-5.556 16.667,-16.666 -16.667,-16.667 38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /><path     d=\"m 53.148037,51.111 0,38.889 16.667,-16.666 16.666,16.666 5.556,-5.556 -16.666,-16.666 16.666,-16.667 -38.889,0 z\"          inkscape:connector-curvature=\"0\"     style=\"fill:#010101\" /></svg>'\r\n};\r\n","\"use strict\";\r\n//make sure any console statements\r\nwindow.console = window.console || {\r\n  log: function() {}\r\n};\r\n\r\n/**\r\n * Load libraries\r\n */\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(),\r\n  CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(),\r\n  utils = require(\"./utils.js\"),\r\n  yutils = require(\"yasgui-utils\"),\r\n  imgs = require(\"./imgs.js\");\r\n\r\nrequire(\"../lib/deparam.js\");\r\nrequire(\"codemirror/addon/fold/foldcode.js\");\r\nrequire(\"codemirror/addon/fold/foldgutter.js\");\r\nrequire(\"codemirror/addon/fold/xml-fold.js\");\r\nrequire(\"codemirror/addon/fold/brace-fold.js\");\r\nrequire(\"./prefixFold.js\");\r\nrequire(\"codemirror/addon/hint/show-hint.js\");\r\nrequire(\"codemirror/addon/search/searchcursor.js\");\r\nrequire(\"codemirror/addon/edit/matchbrackets.js\");\r\nrequire(\"codemirror/addon/runmode/runmode.js\");\r\nrequire(\"codemirror/addon/display/fullscreen.js\");\r\nrequire(\"../lib/grammar/tokenizer.js\");\r\n\r\n/**\r\n * Main YASQE constructor. Pass a DOM element as argument to append the editor to, and (optionally) pass along config settings (see the YASQE.defaults object below, as well as the regular CodeMirror documentation, for more information on configurability)\r\n *\r\n * @constructor\r\n * @param {DOM-Element} parent element to append editor to.\r\n * @param {object} settings\r\n * @class YASQE\r\n * @return {doc} YASQE document\r\n */\r\nvar root = module.exports = function(parent, config) {\r\n  var rootEl = $(\"<div>\", {\r\n    class: \"yasqe\"\r\n  }).appendTo($(parent));\r\n  config = extendConfig(config);\r\n  var yasqe = extendCmInstance(CodeMirror(rootEl[0], config));\r\n  postProcessCmElement(yasqe);\r\n  return yasqe;\r\n};\r\n\r\n/**\r\n * Extend config object, which we will pass on to the CM constructor later on.\r\n * Need this, to make sure our own 'onBlur' etc events do not get overwritten by\r\n * people who add their own onblur events to the config Additionally, need this\r\n * to include the CM defaults ourselves. CodeMirror has a method for including\r\n * defaults, but we can't rely on that one: it assumes flat config object, where\r\n * we have nested objects (e.g. the persistency option)\r\n *\r\n * @private\r\n */\r\nvar extendConfig = function(config) {\r\n  var extendedConfig = $.extend(true, {}, root.defaults, config);\r\n\r\n  // I know, codemirror deals with  default options as well.\r\n  //However, it does not do this recursively (i.e. the persistency option)\r\n\r\n  return extendedConfig;\r\n};\r\n/**\r\n * Add extra functions to the CM document (i.e. the codemirror instantiated\r\n * object)\r\n *\r\n * @private\r\n */\r\nvar extendCmInstance = function(yasqe) {\r\n  //instantiate autocompleters\r\n  yasqe.autocompleters = require(\"./autocompleters/autocompleterBase.js\")(root, yasqe);\r\n  if (yasqe.options.autocompleters) {\r\n    yasqe.options.autocompleters.forEach(function(name) {\r\n      if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\r\n    });\r\n  }\r\n  yasqe.lastQueryDuration = null;\r\n  yasqe.getCompleteToken = function(token, cur) {\r\n    return require(\"./tokenUtils.js\").getCompleteToken(yasqe, token, cur);\r\n  };\r\n  yasqe.getPreviousNonWsToken = function(line, token) {\r\n    return require(\"./tokenUtils.js\").getPreviousNonWsToken(yasqe, line, token);\r\n  };\r\n  yasqe.getNextNonWsToken = function(lineNumber, charNumber) {\r\n    return require(\"./tokenUtils.js\").getNextNonWsToken(yasqe, lineNumber, charNumber);\r\n  };\r\n  yasqe.collapsePrefixes = function(collapse) {\r\n    if (collapse === undefined) collapse = true;\r\n    yasqe.foldCode(\r\n      require(\"./prefixFold.js\").findFirstPrefixLine(yasqe),\r\n      root.fold.prefix,\r\n      collapse ? \"fold\" : \"unfold\"\r\n    );\r\n  };\r\n  var backdrop = null;\r\n  var animateSpeed = null;\r\n  yasqe.setBackdrop = function(show) {\r\n    if (yasqe.options.backdrop || yasqe.options.backdrop === 0 || yasqe.options.backdrop === \"0\") {\r\n      if (animateSpeed === null) {\r\n        animateSpeed = +yasqe.options.backdrop;\r\n        if (animateSpeed === 1) {\r\n          //ah, yasqe.options.backdrop was 'true'. Set this to default animate speed 400\r\n          animateSpeed = 400;\r\n        }\r\n      }\r\n\r\n      if (!backdrop) {\r\n        backdrop = $(\"<div>\", {\r\n          class: \"backdrop\"\r\n        })\r\n          .click(function() {\r\n            $(this).hide();\r\n          })\r\n          .insertAfter($(yasqe.getWrapperElement()));\r\n      }\r\n      if (show) {\r\n        backdrop.show(animateSpeed);\r\n      } else {\r\n        backdrop.hide(animateSpeed);\r\n      }\r\n    }\r\n  };\r\n  /**\r\n\t * Execute query. Pass a callback function, or a configuration object (see\r\n\t * default settings below for possible values) I.e., you can change the\r\n\t * query configuration by either changing the default settings, changing the\r\n\t * settings of this document, or by passing query settings to this function\r\n\t *\r\n\t * @method doc.query\r\n\t * @param function|object\r\n\t */\r\n  yasqe.query = function(callbackOrConfig) {\r\n    root.executeQuery(yasqe, callbackOrConfig);\r\n  };\r\n\r\n  yasqe.getUrlArguments = function(config) {\r\n    return root.getUrlArguments(yasqe, config);\r\n  };\r\n\r\n  /**\r\n\t * Fetch defined prefixes from query string\r\n\t *\r\n\t * @method doc.getPrefixesFromQuery\r\n\t * @return object\r\n\t */\r\n  yasqe.getPrefixesFromQuery = function() {\r\n    return require(\"./prefixUtils.js\").getPrefixesFromQuery(yasqe);\r\n  };\r\n\r\n  yasqe.addPrefixes = function(prefixes) {\r\n    return require(\"./prefixUtils.js\").addPrefixes(yasqe, prefixes);\r\n  };\r\n  yasqe.removePrefixes = function(prefixes) {\r\n    return require(\"./prefixUtils.js\").removePrefixes(yasqe, prefixes);\r\n  };\r\n\r\n  yasqe.getValueWithoutComments = function() {\r\n    var cleanedQuery = \"\";\r\n    root.runMode(yasqe.getValue(), \"sparql11\", function(stringVal, className) {\r\n      if (className != \"comment\") {\r\n        cleanedQuery += stringVal;\r\n      }\r\n    });\r\n    return cleanedQuery;\r\n  };\r\n  /**\r\n\t * Fetch the query type (e.g., SELECT||DESCRIBE||INSERT||DELETE||ASK||CONSTRUCT)\r\n\t *\r\n\t * @method doc.getQueryType\r\n\t * @return string\r\n\t *\r\n\t */\r\n  yasqe.getQueryType = function() {\r\n    return yasqe.queryType;\r\n  };\r\n  /**\r\n\t * Fetch the query mode: 'query' or 'update'\r\n\t *\r\n\t * @method doc.getQueryMode\r\n\t * @return string\r\n\t *\r\n\t */\r\n  yasqe.getQueryMode = function() {\r\n    var type = yasqe.getQueryType();\r\n    if (\r\n      type == \"INSERT\" ||\r\n      type == \"DELETE\" ||\r\n      type == \"LOAD\" ||\r\n      type == \"CLEAR\" ||\r\n      type == \"CREATE\" ||\r\n      type == \"DROP\" ||\r\n      type == \"COPY\" ||\r\n      type == \"MOVE\" ||\r\n      type == \"ADD\"\r\n    ) {\r\n      return \"update\";\r\n    } else {\r\n      return \"query\";\r\n    }\r\n  };\r\n\r\n  yasqe.setCheckSyntaxErrors = function(isEnabled) {\r\n    yasqe.options.syntaxErrorCheck = isEnabled;\r\n    checkSyntax(yasqe);\r\n  };\r\n\r\n  yasqe.enableCompleter = function(name) {\r\n    addCompleterToSettings(yasqe.options, name);\r\n    if (root.Autocompleters[name]) yasqe.autocompleters.init(name, root.Autocompleters[name]);\r\n  };\r\n  yasqe.disableCompleter = function(name) {\r\n    removeCompleterFromSettings(yasqe.options, name);\r\n  };\r\n  return yasqe;\r\n};\r\n\r\nvar addCompleterToSettings = function(settings, name) {\r\n  if (!settings.autocompleters) settings.autocompleters = [];\r\n  settings.autocompleters.push(name);\r\n};\r\nvar removeCompleterFromSettings = function(settings, name) {\r\n  if (typeof settings.autocompleters == \"object\") {\r\n    var index = $.inArray(name, settings.autocompleters);\r\n    if (index >= 0) {\r\n      settings.autocompleters.splice(index, 1);\r\n      removeCompleterFromSettings(settings, name); //just in case. suppose 1 completer is listed twice\r\n    }\r\n  }\r\n};\r\nvar postProcessCmElement = function(yasqe) {\r\n  /**\r\n\t * Set doc value\r\n\t */\r\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n  if (storageId) {\r\n    var valueFromStorage = yutils.storage.get(storageId);\r\n    if (valueFromStorage) yasqe.setValue(valueFromStorage);\r\n  }\r\n\r\n  root.drawButtons(yasqe);\r\n\r\n  /**\r\n\t * Add event handlers\r\n\t */\r\n  yasqe.on(\"blur\", function(yasqe, eventInfo) {\r\n    root.storeQuery(yasqe);\r\n  });\r\n  yasqe.on(\"change\", function(yasqe, eventInfo) {\r\n    checkSyntax(yasqe);\r\n    root.updateQueryButton(yasqe);\r\n    root.positionButtons(yasqe);\r\n  });\r\n  yasqe.on(\"changes\", function() {\r\n    //e.g. on paste\r\n    checkSyntax(yasqe);\r\n    root.updateQueryButton(yasqe);\r\n    root.positionButtons(yasqe);\r\n  });\r\n\r\n  yasqe.on(\"cursorActivity\", function(yasqe, eventInfo) {\r\n    updateButtonsTransparency(yasqe);\r\n  });\r\n  yasqe.prevQueryValid = false;\r\n  checkSyntax(yasqe); // on first load, check as well (our stored or default query might be incorrect)\r\n  root.positionButtons(yasqe);\r\n\r\n  $(yasqe.getWrapperElement())\r\n    .on(\"mouseenter\", \".cm-atom\", function() {\r\n      var matchText = $(this).text();\r\n      $(yasqe.getWrapperElement())\r\n        .find(\".cm-atom\")\r\n        .filter(function() {\r\n          return $(this).text() === matchText;\r\n        })\r\n        .addClass(\"matchingVar\");\r\n    })\r\n    .on(\"mouseleave\", \".cm-atom\", function() {\r\n      $(yasqe.getWrapperElement()).find(\".matchingVar\").removeClass(\"matchingVar\");\r\n    });\r\n  /**\r\n\t * check url args and modify yasqe settings if needed\r\n\t */\r\n  if (yasqe.options.consumeShareLink) {\r\n    yasqe.options.consumeShareLink(yasqe, getUrlParams());\r\n    //and: add a hash listener!\r\n    window.addEventListener(\"hashchange\", function() {\r\n      yasqe.options.consumeShareLink(yasqe, getUrlParams());\r\n    });\r\n  }\r\n  if (yasqe.options.collapsePrefixesOnLoad) yasqe.collapsePrefixes(true);\r\n};\r\n\r\n/**\r\n * get url params. first try fetching using hash. If it fails, try the regular query parameters (for backwards compatability)\r\n */\r\nvar getUrlParams = function() {\r\n  //first try hash\r\n  var urlParams = null;\r\n  if (window.location.hash.length > 1) {\r\n    //firefox does some decoding if we're using window.location.hash (e.g. the + sign in contentType settings)\r\n    //Don't want this. So simply get the hash string ourselves\r\n    urlParams = $.deparam(location.href.split(\"#\")[1]);\r\n  }\r\n  if ((!urlParams || !(\"query\" in urlParams)) && window.location.search.length > 1) {\r\n    //ok, then just try regular url params\r\n    urlParams = $.deparam(window.location.search.substring(1));\r\n  }\r\n  return urlParams;\r\n};\r\n\r\n/**\r\n * Update transparency of buttons. Increase transparency when cursor is below buttons\r\n */\r\n\r\nvar updateButtonsTransparency = function(yasqe) {\r\n  yasqe.cursor = $(\".CodeMirror-cursor\");\r\n  if (yasqe.buttons && yasqe.buttons.is(\":visible\") && yasqe.cursor.length > 0) {\r\n    if (utils.elementsOverlap(yasqe.cursor, yasqe.buttons)) {\r\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"0.2\");\r\n    } else {\r\n      yasqe.buttons.find(\"svg\").attr(\"opacity\", \"1.0\");\r\n    }\r\n  }\r\n};\r\n\r\nvar clearError = null;\r\nvar checkSyntax = function(yasqe, deepcheck) {\r\n  yasqe.queryValid = true;\r\n\r\n  yasqe.clearGutter(\"gutterErrorBar\");\r\n\r\n  var state = null;\r\n  for (var l = 0; l < yasqe.lineCount(); ++l) {\r\n    var precise = false;\r\n    if (!yasqe.prevQueryValid) {\r\n      // we don't want cached information in this case, otherwise the\r\n      // previous error sign might still show up,\r\n      // even though the syntax error might be gone already\r\n      precise = true;\r\n    }\r\n\r\n    var token = yasqe.getTokenAt(\r\n      {\r\n        line: l,\r\n        ch: yasqe.getLine(l).length\r\n      },\r\n      precise\r\n    );\r\n    var state = token.state;\r\n    yasqe.queryType = state.queryType;\r\n    if (state.OK == false) {\r\n      if (!yasqe.options.syntaxErrorCheck) {\r\n        //the library we use already marks everything as being an error. Overwrite this class attribute.\r\n        $(yasqe.getWrapperElement).find(\".sp-error\").css(\"color\", \"black\");\r\n        //we don't want to gutter error, so return\r\n        return;\r\n      }\r\n\r\n      var warningEl = yutils.svg.getElement(imgs.warning);\r\n      if (state.errorMsg) {\r\n        require(\"./tooltip\")(yasqe, warningEl, function() {\r\n          return $(\"<div/>\").text(token.state.errorMsg).html();\r\n        });\r\n      } else if (state.possibleCurrent && state.possibleCurrent.length > 0) {\r\n        //\t\t\t\twarningEl.style.zIndex = \"99999999\";\r\n        require(\"./tooltip\")(yasqe, warningEl, function() {\r\n          var expectedEncoded = [];\r\n          state.possibleCurrent.forEach(function(expected) {\r\n            expectedEncoded.push(\r\n              \"<strong style='text-decoration:underline'>\" + $(\"<div/>\").text(expected).html() + \"</strong>\"\r\n            );\r\n          });\r\n          return \"This line is invalid. Expected: \" + expectedEncoded.join(\", \");\r\n        });\r\n      }\r\n      warningEl.style.marginTop = \"2px\";\r\n      warningEl.style.marginLeft = \"2px\";\r\n      warningEl.className = \"parseErrorIcon\";\r\n      yasqe.setGutterMarker(l, \"gutterErrorBar\", warningEl);\r\n\r\n      yasqe.queryValid = false;\r\n      break;\r\n    }\r\n  }\r\n  yasqe.prevQueryValid = yasqe.queryValid;\r\n  if (deepcheck) {\r\n    if (state != null && state.stack != undefined) {\r\n      var stack = state.stack, len = state.stack.length;\r\n      // Because incremental parser doesn't receive end-of-input\r\n      // it can't clear stack, so we have to check that whatever\r\n      // is left on the stack is nillable\r\n      if (len > 1)\r\n        yasqe.queryValid = false;\r\n      else if (len == 1) {\r\n        if (stack[0] != \"solutionModifier\" && stack[0] != \"?limitOffsetClauses\" && stack[0] != \"?offsetClause\")\r\n          yasqe.queryValid = false;\r\n      }\r\n    }\r\n  }\r\n};\r\n/**\r\n * Static Utils\r\n */\r\n// first take all CodeMirror references and store them in the YASQE object\r\n$.extend(root, CodeMirror);\r\n\r\n//add registrar for autocompleters\r\nroot.Autocompleters = {};\r\nroot.registerAutocompleter = function(name, constructor) {\r\n  root.Autocompleters[name] = constructor;\r\n  addCompleterToSettings(root.defaults, name);\r\n};\r\n\r\nroot.autoComplete = function(yasqe) {\r\n  //this function gets called when pressing the keyboard shortcut. I.e., autoShow = false\r\n  yasqe.autocompleters.autoComplete(false);\r\n};\r\n//include the autocompleters we provide out-of-the-box\r\nroot.registerAutocompleter(\"prefixes\", require(\"./autocompleters/prefixes.js\"));\r\nroot.registerAutocompleter(\"properties\", require(\"./autocompleters/properties.js\"));\r\nroot.registerAutocompleter(\"classes\", require(\"./autocompleters/classes.js\"));\r\nroot.registerAutocompleter(\"variables\", require(\"./autocompleters/variables.js\"));\r\n\r\nroot.positionButtons = function(yasqe) {\r\n  var scrollBar = $(yasqe.getWrapperElement()).find(\".CodeMirror-vscrollbar\");\r\n  var offset = 0;\r\n  if (scrollBar.is(\":visible\")) {\r\n    offset = scrollBar.outerWidth();\r\n  }\r\n  if (yasqe.buttons.is(\":visible\")) yasqe.buttons.css(\"right\", offset + 4);\r\n};\r\n\r\n/**\r\n * Create a share link\r\n *\r\n * @method YASQE.createShareLink\r\n * @param {doc} YASQE document\r\n * @default {query: doc.getValue()}\r\n * @return object\r\n */\r\nroot.createShareLink = function(yasqe) {\r\n  //extend existing link, so first fetch current arguments\r\n  var urlParams = {};\r\n  if (window.location.hash.length > 1) urlParams = $.deparam(window.location.hash.substring(1));\r\n  urlParams[\"query\"] = yasqe.getValue();\r\n  return urlParams;\r\n};\r\nroot.getAsCurl = function(yasqe, ajaxConfig) {\r\n  var curl = require(\"./curl.js\");\r\n  return curl.createCurlString(yasqe, ajaxConfig);\r\n};\r\n/**\r\n * Consume the share link, by parsing the document URL for possible yasqe arguments, and setting the appropriate values in the YASQE doc\r\n *\r\n * @method YASQE.consumeShareLink\r\n * @param {doc} YASQE document\r\n */\r\nroot.consumeShareLink = function(yasqe, urlParams) {\r\n  if (urlParams && urlParams.query) {\r\n    yasqe.setValue(urlParams.query);\r\n  }\r\n};\r\nroot.drawButtons = function(yasqe) {\r\n  yasqe.buttons = $(\"<div class='yasqe_buttons'></div>\").appendTo($(yasqe.getWrapperElement()));\r\n\r\n  /**\r\n\t * draw share link button\r\n\t */\r\n  if (yasqe.options.createShareLink) {\r\n    var svgShare = $(yutils.svg.getElement(imgs.share));\r\n    svgShare\r\n      .click(function(event) {\r\n        event.stopPropagation();\r\n        var popup = $(\"<div class='yasqe_sharePopup'></div>\").appendTo(yasqe.buttons);\r\n        $(\"html\").click(function() {\r\n          if (popup) popup.remove();\r\n        });\r\n\r\n        popup.click(function(event) {\r\n          event.stopPropagation();\r\n        });\r\n        var $input = $(\"<input>\").val(\r\n          location.protocol +\r\n            \"//\" +\r\n            location.host +\r\n            location.pathname +\r\n            location.search +\r\n            \"#\" +\r\n            $.param(yasqe.options.createShareLink(yasqe))\r\n        );\r\n\r\n        $input.focus(function() {\r\n          var $this = $(this);\r\n          $this.select();\r\n\r\n          // Work around Chrome's little problem\r\n          $this.mouseup(function() {\r\n            // Prevent further mouseup intervention\r\n            $this.unbind(\"mouseup\");\r\n            return false;\r\n          });\r\n        });\r\n\r\n        popup.empty().append($(\"<div>\", { class: \"inputWrapper\" }).append($input));\r\n        if (yasqe.options.createShortLink) {\r\n          popup.addClass(\"enableShort\");\r\n          $(\"<button>Shorten</button>\")\r\n            .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\r\n            .click(function() {\r\n              $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\r\n              yasqe.options.createShortLink($input.val(), function(errString, shortLink) {\r\n                if (errString) {\r\n                  $input.remove();\r\n                  popup.find(\".inputWrapper\").append($(\"<span>\", { class: \"shortlinkErr\" }).text(errString));\r\n                } else {\r\n                  $input.val(shortLink).focus();\r\n                }\r\n              });\r\n            })\r\n            .appendTo(popup);\r\n        }\r\n        $(\"<button>CURL</button>\")\r\n          .addClass(\"yasqe_btn yasqe_btn-sm yasqe_btn-primary\")\r\n          .click(function() {\r\n            $(this).parent().find(\"button\").attr(\"disabled\", \"disabled\");\r\n            $input.val(root.getAsCurl(yasqe)).focus();\r\n          })\r\n          .appendTo(popup);\r\n        var positions = svgShare.position();\r\n        popup\r\n          .css(\"top\", positions.top + svgShare.outerHeight() + parseInt(popup.css(\"padding-top\")) + \"px\")\r\n          .css(\"left\", positions.left + svgShare.outerWidth() - popup.outerWidth() + \"px\");\r\n        $input.focus();\r\n      })\r\n      .addClass(\"yasqe_share\")\r\n      .attr(\"title\", \"Share your query\")\r\n      .appendTo(yasqe.buttons);\r\n  }\r\n\r\n  /**\r\n\t * draw fullscreen button\r\n\t */\r\n\r\n  var toggleFullscreen = $(\"<div>\", {\r\n    class: \"fullscreenToggleBtns\"\r\n  })\r\n    .append(\r\n      $(yutils.svg.getElement(imgs.fullscreen))\r\n        .addClass(\"yasqe_fullscreenBtn\")\r\n        .attr(\"title\", \"Set editor full screen\")\r\n        .click(function() {\r\n          yasqe.setOption(\"fullScreen\", true);\r\n        })\r\n    )\r\n    .append(\r\n      $(yutils.svg.getElement(imgs.smallscreen))\r\n        .addClass(\"yasqe_smallscreenBtn\")\r\n        .attr(\"title\", \"Set editor to normale size\")\r\n        .click(function() {\r\n          yasqe.setOption(\"fullScreen\", false);\r\n        })\r\n    );\r\n  yasqe.buttons.append(toggleFullscreen);\r\n\r\n  if (yasqe.options.sparql.showQueryButton) {\r\n    $(\"<div>\", {\r\n      class: \"yasqe_queryButton\"\r\n    })\r\n      .click(function() {\r\n        if ($(this).hasClass(\"query_busy\")) {\r\n          if (yasqe.xhr) yasqe.xhr.abort();\r\n          root.updateQueryButton(yasqe);\r\n        } else {\r\n          yasqe.query();\r\n        }\r\n      })\r\n      .appendTo(yasqe.buttons);\r\n    root.updateQueryButton(yasqe);\r\n  }\r\n};\r\n\r\nvar queryButtonIds = {\r\n  busy: \"loader\",\r\n  valid: \"query\",\r\n  error: \"queryInvalid\"\r\n};\r\n\r\n/**\r\n * Update the query button depending on current query status. If no query status is passed via the parameter, it auto-detects the current query status\r\n *\r\n * @param {doc} YASQE document\r\n * @param status {string|null, \"busy\"|\"valid\"|\"error\"}\r\n */\r\nroot.updateQueryButton = function(yasqe, status) {\r\n  var queryButton = $(yasqe.getWrapperElement()).find(\".yasqe_queryButton\");\r\n  if (queryButton.length == 0) return; //no query button drawn\r\n\r\n  //detect status\r\n  if (!status) {\r\n    status = \"valid\";\r\n    if (yasqe.queryValid === false) status = \"error\";\r\n  }\r\n\r\n  if (status != yasqe.queryStatus) {\r\n    queryButton.empty().removeClass(function(index, classNames) {\r\n      return classNames\r\n        .split(\" \")\r\n        .filter(function(c) {\r\n          //remove classname from previous status\r\n          return c.indexOf(\"query_\") == 0;\r\n        })\r\n        .join(\" \");\r\n    });\r\n\r\n    if (status == \"busy\") {\r\n      queryButton.append(\r\n        $(\"<div>\", {\r\n          class: \"loader\"\r\n        })\r\n      );\r\n      yasqe.queryStatus = status;\r\n    } else if (status == \"valid\" || status == \"error\") {\r\n      queryButton.addClass(\"query_\" + status);\r\n      yutils.svg.draw(queryButton, imgs[queryButtonIds[status]]);\r\n      yasqe.queryStatus = status;\r\n    }\r\n  }\r\n};\r\n/**\r\n * Initialize YASQE from an existing text area (see http://codemirror.net/doc/manual.html#fromTextArea for more info)\r\n *\r\n * @method YASQE.fromTextArea\r\n * @param textArea {DOM element}\r\n * @param config {object}\r\n * @returns {doc} YASQE document\r\n */\r\nroot.fromTextArea = function(textAreaEl, config) {\r\n  config = extendConfig(config);\r\n  //add yasqe div as parent (needed for styles to be manageable and scoped).\r\n  //In this case, I -also- put it as parent el of the text area. This is wrapped in a div now\r\n  var rootEl = $(\"<div>\", {\r\n    class: \"yasqe\"\r\n  })\r\n    .insertBefore($(textAreaEl))\r\n    .append($(textAreaEl));\r\n  var yasqe = extendCmInstance(CodeMirror.fromTextArea(textAreaEl, config));\r\n  postProcessCmElement(yasqe);\r\n  return yasqe;\r\n};\r\n\r\nroot.storeQuery = function(yasqe) {\r\n  var storageId = utils.getPersistencyId(yasqe, yasqe.options.persistent);\r\n  if (storageId) {\r\n    yutils.storage.set(storageId, yasqe.getValue(), \"month\");\r\n  }\r\n};\r\nroot.commentLines = function(yasqe) {\r\n  var startLine = yasqe.getCursor(true).line;\r\n  var endLine = yasqe.getCursor(false).line;\r\n  var min = Math.min(startLine, endLine);\r\n  var max = Math.max(startLine, endLine);\r\n\r\n  // if all lines start with #, remove this char. Otherwise add this char\r\n  var linesAreCommented = true;\r\n  for (var i = min; i <= max; i++) {\r\n    var line = yasqe.getLine(i);\r\n    if (line.length == 0 || line.substring(0, 1) != \"#\") {\r\n      linesAreCommented = false;\r\n      break;\r\n    }\r\n  }\r\n  for (var i = min; i <= max; i++) {\r\n    if (linesAreCommented) {\r\n      // lines are commented, so remove comments\r\n      yasqe.replaceRange(\r\n        \"\",\r\n        {\r\n          line: i,\r\n          ch: 0\r\n        },\r\n        {\r\n          line: i,\r\n          ch: 1\r\n        }\r\n      );\r\n    } else {\r\n      // Not all lines are commented, so add comments\r\n      yasqe.replaceRange(\"#\", {\r\n        line: i,\r\n        ch: 0\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nroot.copyLineUp = function(yasqe) {\r\n  var cursor = yasqe.getCursor();\r\n  var lineCount = yasqe.lineCount();\r\n  // First create new empty line at end of text\r\n  yasqe.replaceRange(\"\\n\", {\r\n    line: lineCount - 1,\r\n    ch: yasqe.getLine(lineCount - 1).length\r\n  });\r\n  // Copy all lines to their next line\r\n  for (var i = lineCount; i > cursor.line; i--) {\r\n    var line = yasqe.getLine(i - 1);\r\n    yasqe.replaceRange(\r\n      line,\r\n      {\r\n        line: i,\r\n        ch: 0\r\n      },\r\n      {\r\n        line: i,\r\n        ch: yasqe.getLine(i).length\r\n      }\r\n    );\r\n  }\r\n};\r\nroot.copyLineDown = function(yasqe) {\r\n  root.copyLineUp(yasqe);\r\n  // Make sure cursor goes one down (we are copying downwards)\r\n  var cursor = yasqe.getCursor();\r\n  cursor.line++;\r\n  yasqe.setCursor(cursor);\r\n};\r\nroot.doAutoFormat = function(yasqe) {\r\n  if (!yasqe.somethingSelected()) yasqe.execCommand(\"selectAll\");\r\n  var to = {\r\n    line: yasqe.getCursor(false).line,\r\n    ch: yasqe.getSelection().length\r\n  };\r\n  autoFormatRange(yasqe, yasqe.getCursor(true), to);\r\n};\r\n\r\nvar autoFormatRange = function(yasqe, from, to) {\r\n  var absStart = yasqe.indexFromPos(from);\r\n  var absEnd = yasqe.indexFromPos(to);\r\n  // Insert additional line breaks where necessary according to the\r\n  // mode's syntax\r\n  var res = autoFormatLineBreaks(yasqe.getValue(), absStart, absEnd);\r\n\r\n  // Replace and auto-indent the range\r\n  yasqe.operation(function() {\r\n    yasqe.replaceRange(res, from, to);\r\n    var startLine = yasqe.posFromIndex(absStart).line;\r\n    var endLine = yasqe.posFromIndex(absStart + res.length).line;\r\n    for (var i = startLine; i <= endLine; i++) {\r\n      yasqe.indentLine(i, \"smart\");\r\n    }\r\n  });\r\n};\r\n\r\nvar autoFormatLineBreaks = function(text, start, end) {\r\n  text = text.substring(start, end);\r\n  var breakAfterArray = [\r\n    [\"keyword\", \"ws\", \"prefixed\", \"ws\", \"uri\"], // i.e. prefix declaration\r\n    [\"keyword\", \"ws\", \"uri\"] // i.e. base\r\n  ];\r\n  var breakAfterCharacters = [\"{\", \".\", \";\"];\r\n  var breakBeforeCharacters = [\"}\"];\r\n  var getBreakType = function(stringVal, type) {\r\n    for (var i = 0; i < breakAfterArray.length; i++) {\r\n      if (stackTrace.valueOf().toString() == breakAfterArray[i].valueOf().toString()) {\r\n        return 1;\r\n      }\r\n    }\r\n    for (var i = 0; i < breakAfterCharacters.length; i++) {\r\n      if (stringVal == breakAfterCharacters[i]) {\r\n        return 1;\r\n      }\r\n    }\r\n    for (var i = 0; i < breakBeforeCharacters.length; i++) {\r\n      // don't want to issue 'breakbefore' AND 'breakafter', so check\r\n      // current line\r\n      if ($.trim(currentLine) != \"\" && stringVal == breakBeforeCharacters[i]) {\r\n        return -1;\r\n      }\r\n    }\r\n    return 0;\r\n  };\r\n  var formattedQuery = \"\";\r\n  var currentLine = \"\";\r\n  var stackTrace = [];\r\n  CodeMirror.runMode(text, \"sparql11\", function(stringVal, type) {\r\n    stackTrace.push(type);\r\n    var breakType = getBreakType(stringVal, type);\r\n    if (breakType != 0) {\r\n      if (breakType == 1) {\r\n        formattedQuery += stringVal + \"\\n\";\r\n        currentLine = \"\";\r\n      } else {\r\n        // (-1)\r\n        formattedQuery += \"\\n\" + stringVal;\r\n        currentLine = stringVal;\r\n      }\r\n      stackTrace = [];\r\n    } else {\r\n      currentLine += stringVal;\r\n      formattedQuery += stringVal;\r\n    }\r\n    if (stackTrace.length == 1 && stackTrace[0] == \"sp-ws\") stackTrace = [];\r\n  });\r\n  return $.trim(formattedQuery.replace(/\\n\\s*\\n/g, \"\\n\"));\r\n};\r\n\r\nrequire(\"./sparql.js\"), require(\"./defaults.js\");\r\nroot.$ = $;\r\nroot.version = {\r\n  CodeMirror: CodeMirror.version,\r\n  YASQE: require(\"../package.json\").version,\r\n  jquery: $.fn.jquery,\r\n  \"yasgui-utils\": yutils.version\r\n};\r\n","var CodeMirror = (function(){try{return require('codemirror')}catch(e){return window.CodeMirror}})(), tokenUtils = require(\"./tokenUtils.js\");\r\n\r\n(\"use strict\");\r\nvar lookFor = \"PREFIX\";\r\nmodule.exports = {\r\n  findFirstPrefixLine: function(cm) {\r\n    var lastLine = cm.lastLine();\r\n    for (var i = 0; i <= lastLine; ++i) {\r\n      if (findFirstPrefix(cm, i) >= 0) {\r\n        return i;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction findFirstPrefix(cm, line, ch, lineText) {\r\n  if (!ch) ch = 0;\r\n  if (!lineText) lineText = cm.getLine(line);\r\n  lineText = lineText.toUpperCase();\r\n  for (var at = ch, pass = 0; ; ) {\r\n    var found = lineText.indexOf(lookFor, at);\r\n    if (found == -1) {\r\n      //no prefix on this line\r\n      if (pass == 1) break;\r\n      pass = 1;\r\n      at = lineText.length;\r\n      continue;\r\n    }\r\n    if (pass == 1 && found < ch) break;\r\n    var tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n    if (!/^(comment|string)/.test(tokenType)) return found + 1;\r\n    at = found - 1;\r\n    //Could not find a prefix, no use looping any further. Probably invalid query\r\n    if (at === pass) break;\r\n  }\r\n}\r\n\r\nCodeMirror.registerHelper(\"fold\", \"prefix\", function(cm, start) {\r\n  var line = start.line, lineText = cm.getLine(line);\r\n\r\n  var startCh, tokenType;\r\n\r\n  function hasPreviousPrefix() {\r\n    var hasPreviousPrefix = false;\r\n    for (var i = line - 1; i >= 0; i--) {\r\n      if (cm.getLine(i).toUpperCase().indexOf(lookFor) >= 0) {\r\n        hasPreviousPrefix = true;\r\n        break;\r\n      }\r\n    }\r\n    return hasPreviousPrefix;\r\n  }\r\n\r\n  function findOpening(openCh) {\r\n    for (var at = start.ch, pass = 0; ; ) {\r\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\r\n      if (found == -1) {\r\n        if (pass == 1) break;\r\n        pass = 1;\r\n        at = lineText.length;\r\n        continue;\r\n      }\r\n      if (pass == 1 && found < start.ch) break;\r\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\r\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\r\n      at = found - 1;\r\n    }\r\n  }\r\n  var getLastPrefixPos = function(line, ch) {\r\n    var prefixKeywordToken = cm.getTokenAt(CodeMirror.Pos(line, ch + 1));\r\n    if (!prefixKeywordToken || prefixKeywordToken.type != \"keyword\") return -1;\r\n    var prefixShortname = tokenUtils.getNextNonWsToken(cm, line, prefixKeywordToken.end + 1);\r\n    if (!prefixShortname || prefixShortname.type != \"string-2\") return -1; //missing prefix keyword shortname\r\n    var prefixUri = tokenUtils.getNextNonWsToken(cm, line, prefixShortname.end + 1);\r\n    if (!prefixUri || prefixUri.type != \"variable-3\") return -1; //missing prefix uri\r\n    return prefixUri.end;\r\n  };\r\n\r\n  //only use opening prefix declaration\r\n  if (hasPreviousPrefix()) return;\r\n  var prefixStart = findFirstPrefix(cm, line, start.ch, lineText);\r\n\r\n  if (prefixStart == null) return;\r\n  var stopAt = \"{\"; //if this char is there, we won't have a chance of finding more prefixes\r\n  var stopAtNextLine = false;\r\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\r\n  var prefixEndChar = getLastPrefixPos(line, prefixStart);\r\n  var prefixEndLine = line;\r\n\r\n  outer:\r\n  for (var i = line; i <= lastLine; ++i) {\r\n    if (stopAtNextLine) break;\r\n    var text = cm.getLine(i), pos = i == line ? prefixStart + 1 : 0;\r\n\r\n    for (;;) {\r\n      if (!stopAtNextLine && text.indexOf(stopAt) >= 0) stopAtNextLine = true;\r\n\r\n      var nextPrefixDeclaration = text.toUpperCase().indexOf(lookFor, pos);\r\n\r\n      if (nextPrefixDeclaration >= 0) {\r\n        if ((endCh = getLastPrefixPos(i, nextPrefixDeclaration)) > 0) {\r\n          prefixEndChar = endCh;\r\n          prefixEndLine = i;\r\n          pos = prefixEndChar;\r\n        }\r\n        pos++;\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    from: CodeMirror.Pos(line, prefixStart + lookFor.length),\r\n    to: CodeMirror.Pos(prefixEndLine, prefixEndChar)\r\n  };\r\n});\r\n","\"use strict\";\r\n/**\r\n * Append prefix declaration to list of prefixes in query window.\r\n *\r\n * @param yasqe\r\n * @param prefix\r\n */\r\nvar addPrefixes = function(yasqe, prefixes) {\r\n  var existingPrefixes = yasqe.getPrefixesFromQuery();\r\n  //for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\r\n  if (typeof prefixes == \"string\") {\r\n    addPrefixAsString(yasqe, prefixes);\r\n  } else {\r\n    for (var pref in prefixes) {\r\n      if (!(pref in existingPrefixes)) addPrefixAsString(yasqe, pref + \": <\" + prefixes[pref] + \">\");\r\n    }\r\n  }\r\n  yasqe.collapsePrefixes(false);\r\n};\r\n\r\nvar addPrefixAsString = function(yasqe, prefixString) {\r\n  var lastPrefix = null;\r\n  var lastPrefixLine = 0;\r\n  var numLines = yasqe.lineCount();\r\n  for (var i = 0; i < numLines; i++) {\r\n    var firstToken = yasqe.getNextNonWsToken(i);\r\n    if (firstToken != null && (firstToken.string == \"PREFIX\" || firstToken.string == \"BASE\")) {\r\n      lastPrefix = firstToken;\r\n      lastPrefixLine = i;\r\n    }\r\n  }\r\n\r\n  if (lastPrefix == null) {\r\n    yasqe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\r\n      line: 0,\r\n      ch: 0\r\n    });\r\n  } else {\r\n    var previousIndent = getIndentFromLine(yasqe, lastPrefixLine);\r\n    yasqe.replaceRange(\"\\n\" + previousIndent + \"PREFIX \" + prefixString, {\r\n      line: lastPrefixLine\r\n    });\r\n  }\r\n  yasqe.collapsePrefixes(false);\r\n};\r\nvar removePrefixes = function(yasqe, prefixes) {\r\n  var escapeRegex = function(string) {\r\n    //taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\r\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\r\n  };\r\n  for (var pref in prefixes) {\r\n    yasqe.setValue(\r\n      yasqe\r\n        .getValue()\r\n        .replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), \"\")\r\n    );\r\n  }\r\n  yasqe.collapsePrefixes(false);\r\n};\r\n\r\n/**\r\n * Get defined prefixes from query as array, in format {\"prefix:\" \"uri\"}\r\n *\r\n * @param cm\r\n * @returns {Array}\r\n */\r\nvar getPrefixesFromQuery = function(yasqe) {\r\n  //Use precise here. We want to be sure we use the most up to date state. If we're\r\n  //not, we might get outdated prefixes from the current query (creating loops such\r\n  //as https://github.com/OpenTriply/YASGUI/issues/84)\r\n  return yasqe.getTokenAt({ line: yasqe.lastLine(), ch: yasqe.getLine(yasqe.lastLine()).length }, true).state.prefixes;\r\n};\r\n\r\n/**\r\n * Get the used indentation for a certain line\r\n *\r\n * @param yasqe\r\n * @param line\r\n * @param charNumber\r\n * @returns\r\n */\r\nvar getIndentFromLine = function(yasqe, line, charNumber) {\r\n  if (charNumber == undefined) charNumber = 1;\r\n  var token = yasqe.getTokenAt({\r\n    line: line,\r\n    ch: charNumber\r\n  });\r\n  if (token == null || token == undefined || token.type != \"ws\") {\r\n    return \"\";\r\n  } else {\r\n    return token.string + getIndentFromLine(yasqe, line, token.end + 1);\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addPrefixes: addPrefixes,\r\n  getPrefixesFromQuery: getPrefixesFromQuery,\r\n  removePrefixes: removePrefixes\r\n};\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\"), YASQE = require(\"./main.js\");\r\n\r\nYASQE.getAjaxConfig = function(yasqe, callbackOrConfig) {\r\n  var callback = typeof callbackOrConfig == \"function\" ? callbackOrConfig : null;\r\n  var config = typeof callbackOrConfig == \"object\" ? callbackOrConfig : {};\r\n\r\n  if (yasqe.options.sparql) config = $.extend({}, yasqe.options.sparql, config);\r\n\r\n  //for backwards compatability, make sure we copy sparql handlers to sparql callbacks\r\n  if (config.handlers) $.extend(true, config.callbacks, config.handlers);\r\n\r\n  if (!config.endpoint || config.endpoint.length == 0) return; // nothing to query!\r\n\r\n  /**\r\n\t * initialize ajax config\r\n\t */\r\n  var ajaxConfig = {\r\n    url: typeof config.endpoint == \"function\" ? config.endpoint(yasqe) : config.endpoint,\r\n    type: typeof config.requestMethod == \"function\" ? config.requestMethod(yasqe) : config.requestMethod,\r\n    headers: {\r\n      Accept: getAcceptHeader(yasqe, config)\r\n    }\r\n  };\r\n  if (config.xhrFields) ajaxConfig.xhrFields = config.xhrFields;\r\n  /**\r\n\t * add complete, beforesend, etc callbacks (if specified)\r\n\t */\r\n  var handlerDefined = false;\r\n  if (config.callbacks) {\r\n    for (var handler in config.callbacks) {\r\n      if (config.callbacks[handler]) {\r\n        handlerDefined = true;\r\n        ajaxConfig[handler] = config.callbacks[handler];\r\n      }\r\n    }\r\n  }\r\n  if (ajaxConfig.type === \"GET\") {\r\n    //we need to do encoding ourselve, as jquery does not properly encode the url string\r\n    //https://github.com/OpenTriply/YASGUI/issues/75\r\n    var first = true;\r\n    $.each(yasqe.getUrlArguments(config), function(key, val) {\r\n      ajaxConfig.url += (first ? \"?\" : \"&\") + val.name + \"=\" + encodeURIComponent(val.value);\r\n      first = false;\r\n    });\r\n  } else {\r\n    ajaxConfig.data = yasqe.getUrlArguments(config);\r\n  }\r\n  if (!handlerDefined && !callback) return; // ok, we can query, but have no callbacks. just stop now\r\n\r\n  // if only callback is passed as arg, add that on as 'onComplete' callback\r\n  if (callback) ajaxConfig.complete = callback;\r\n\r\n  /**\r\n\t * merge additional request headers\r\n\t */\r\n  if (config.headers && !$.isEmptyObject(config.headers)) $.extend(ajaxConfig.headers, config.headers);\r\n\r\n  var queryStart = new Date();\r\n  var updateYasqe = function() {\r\n    yasqe.lastQueryDuration = new Date() - queryStart;\r\n    YASQE.updateQueryButton(yasqe);\r\n    yasqe.setBackdrop(false);\r\n  };\r\n  //Make sure the query button is updated again on complete\r\n  var completeCallbacks = [\r\n    function() {\r\n      require(\"./main.js\").signal(yasqe, \"queryFinish\", arguments);\r\n    },\r\n    updateYasqe\r\n  ];\r\n\r\n  if (ajaxConfig.complete) {\r\n    completeCallbacks.push(ajaxConfig.complete);\r\n  }\r\n  ajaxConfig.complete = completeCallbacks;\r\n  return ajaxConfig;\r\n};\r\n\r\nYASQE.executeQuery = function(yasqe, callbackOrConfig) {\r\n  YASQE.signal(yasqe, \"query\", yasqe, callbackOrConfig);\r\n  YASQE.updateQueryButton(yasqe, \"busy\");\r\n  yasqe.setBackdrop(true);\r\n  yasqe.xhr = $.ajax(YASQE.getAjaxConfig(yasqe, callbackOrConfig));\r\n};\r\n\r\nYASQE.getUrlArguments = function(yasqe, config) {\r\n  var queryMode = yasqe.getQueryMode();\r\n  var data = [\r\n    {\r\n      name: utils.getString(yasqe, yasqe.options.sparql.queryName),\r\n      value: config.getQueryForAjax ? config.getQueryForAjax(yasqe) : yasqe.getValue()\r\n    }\r\n  ];\r\n\r\n  /**\r\n\t * add named graphs to ajax config\r\n\t */\r\n  if (config.namedGraphs && config.namedGraphs.length > 0) {\r\n    var argName = queryMode == \"query\" ? \"named-graph-uri\" : \"using-named-graph-uri \";\r\n    for (var i = 0; i < config.namedGraphs.length; i++)\r\n      data.push({\r\n        name: argName,\r\n        value: config.namedGraphs[i]\r\n      });\r\n  }\r\n  /**\r\n\t * add default graphs to ajax config\r\n\t */\r\n  if (config.defaultGraphs && config.defaultGraphs.length > 0) {\r\n    var argName = queryMode == \"query\" ? \"default-graph-uri\" : \"using-graph-uri \";\r\n    for (var i = 0; i < config.defaultGraphs.length; i++)\r\n      data.push({\r\n        name: argName,\r\n        value: config.defaultGraphs[i]\r\n      });\r\n  }\r\n\r\n  /**\r\n\t * add additional request args\r\n\t */\r\n  if (config.args && config.args.length > 0) $.merge(data, config.args);\r\n\r\n  return data;\r\n};\r\nvar getAcceptHeader = function(yasqe, config) {\r\n  var acceptHeader = null;\r\n  if (config.acceptHeader && !config.acceptHeaderGraph && !config.acceptHeaderSelect && !config.acceptHeaderUpdate) {\r\n    //this is the old config. For backwards compatability, keep supporting it\r\n    if (typeof config.acceptHeader == \"function\") {\r\n      acceptHeader = config.acceptHeader(yasqe);\r\n    } else {\r\n      acceptHeader = config.acceptHeader;\r\n    }\r\n  } else {\r\n    if (yasqe.getQueryMode() == \"update\") {\r\n      acceptHeader = typeof config.acceptHeader == \"function\"\r\n        ? config.acceptHeaderUpdate(yasqe)\r\n        : config.acceptHeaderUpdate;\r\n    } else {\r\n      var qType = yasqe.getQueryType();\r\n      if (qType == \"DESCRIBE\" || qType == \"CONSTRUCT\") {\r\n        acceptHeader = typeof config.acceptHeaderGraph == \"function\"\r\n          ? config.acceptHeaderGraph(yasqe)\r\n          : config.acceptHeaderGraph;\r\n      } else {\r\n        acceptHeader = typeof config.acceptHeaderSelect == \"function\"\r\n          ? config.acceptHeaderSelect(yasqe)\r\n          : config.acceptHeaderSelect;\r\n      }\r\n    }\r\n  }\r\n  return acceptHeader;\r\n};\r\n\r\nmodule.exports = {\r\n  getAjaxConfig: YASQE.getAjaxConfig\r\n};\r\n","\"use strict\";\r\n/**\r\n * When typing a query, this query is sometimes syntactically invalid, causing\r\n * the current tokens to be incorrect This causes problem for autocompletion.\r\n * http://bla might result in two tokens: http:// and bla. We'll want to combine\r\n * these\r\n * \r\n * @param yasqe {doc}\r\n * @param token {object}\r\n * @param cursor {object}\r\n * @return token {object}\r\n * @method YASQE.getCompleteToken\r\n */\r\nvar getCompleteToken = function(yasqe, token, cur) {\r\n  if (!cur) {\r\n    cur = yasqe.getCursor();\r\n  }\r\n  if (!token) {\r\n    token = yasqe.getTokenAt(cur);\r\n  }\r\n  var prevToken = yasqe.getTokenAt({\r\n    line: cur.line,\r\n    ch: token.start\r\n  });\r\n  // not start of line, and not whitespace\r\n  if (prevToken.type != null && prevToken.type != \"ws\" && token.type != null && token.type != \"ws\") {\r\n    token.start = prevToken.start;\r\n    token.string = prevToken.string + token.string;\r\n    return getCompleteToken(yasqe, token, {\r\n      line: cur.line,\r\n      ch: prevToken.start\r\n    }); // recursively, might have multiple tokens which it should include\r\n  } else if (token.type != null && token.type == \"ws\") {\r\n    //always keep 1 char of whitespace between tokens. Otherwise, autocompletions might end up next to the previous node, without whitespace between them\r\n    token.start = token.start + 1;\r\n    token.string = token.string.substring(1);\r\n    return token;\r\n  } else {\r\n    return token;\r\n  }\r\n};\r\nvar getPreviousNonWsToken = function(yasqe, line, token) {\r\n  var previousToken = yasqe.getTokenAt({\r\n    line: line,\r\n    ch: token.start\r\n  });\r\n  if (previousToken != null && previousToken.type == \"ws\") {\r\n    previousToken = getPreviousNonWsToken(yasqe, line, previousToken);\r\n  }\r\n  return previousToken;\r\n};\r\nvar getNextNonWsToken = function(yasqe, lineNumber, charNumber) {\r\n  if (charNumber == undefined) charNumber = 1;\r\n  var token = yasqe.getTokenAt({\r\n    line: lineNumber,\r\n    ch: charNumber\r\n  });\r\n  if (token == null || token == undefined || token.end < charNumber) {\r\n    return null;\r\n  }\r\n  if (token.type == \"ws\") {\r\n    return getNextNonWsToken(yasqe, lineNumber, token.end + 1);\r\n  }\r\n  return token;\r\n};\r\n\r\nmodule.exports = {\r\n  getPreviousNonWsToken: getPreviousNonWsToken,\r\n  getCompleteToken: getCompleteToken,\r\n  getNextNonWsToken: getNextNonWsToken\r\n};\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})(), utils = require(\"./utils.js\");\r\n\r\n/**\r\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\r\n * Requirements: \r\n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\r\n * \t\tuse html as content\r\n */\r\nmodule.exports = function(yasqe, parent, html) {\r\n  var parent = $(parent);\r\n  var tooltip;\r\n  parent.hover(\r\n    function() {\r\n      if (typeof html == \"function\") html = html();\r\n      tooltip = $(\"<div>\").addClass(\"yasqe_tooltip\").html(html).appendTo(parent);\r\n      repositionTooltip();\r\n    },\r\n    function() {\r\n      $(\".yasqe_tooltip\").remove();\r\n    }\r\n  );\r\n\r\n  /**\r\n\t * only need to take into account top and bottom offset for this usecase\r\n\t */\r\n  var repositionTooltip = function() {\r\n    if ($(yasqe.getWrapperElement()).offset().top >= tooltip.offset().top) {\r\n      //shit, move the tooltip down. The tooltip now hovers over the top edge of the yasqe instance\r\n      tooltip.css(\"bottom\", \"auto\");\r\n      tooltip.css(\"top\", \"26px\");\r\n    }\r\n  };\r\n};\r\n","\"use strict\";\r\nvar $ = (function(){try{return require('jquery')}catch(e){return window.jQuery}})();\r\n\r\nvar keyExists = function(objectToTest, key) {\r\n  var exists = false;\r\n  try {\r\n    if (objectToTest[key] !== undefined) exists = true;\r\n  } catch (e) {}\r\n  return exists;\r\n};\r\n\r\nvar getPersistencyId = function(yasqe, persistentIdCreator) {\r\n  var persistencyId = null;\r\n\r\n  if (persistentIdCreator) {\r\n    if (typeof persistentIdCreator == \"string\") {\r\n      persistencyId = persistentIdCreator;\r\n    } else {\r\n      persistencyId = persistentIdCreator(yasqe);\r\n    }\r\n  }\r\n  return persistencyId;\r\n};\r\n\r\nvar elementsOverlap = (function() {\r\n  function getPositions(elem) {\r\n    var pos, width, height;\r\n    pos = $(elem).offset();\r\n    width = $(elem).width();\r\n    height = $(elem).height();\r\n    return [[pos.left, pos.left + width], [pos.top, pos.top + height]];\r\n  }\r\n\r\n  function comparePositions(p1, p2) {\r\n    var r1, r2;\r\n    r1 = p1[0] < p2[0] ? p1 : p2;\r\n    r2 = p1[0] < p2[0] ? p2 : p1;\r\n    return r1[1] > r2[0] || r1[0] === r2[0];\r\n  }\r\n\r\n  return function(a, b) {\r\n    var pos1 = getPositions(a), pos2 = getPositions(b);\r\n    return comparePositions(pos1[0], pos2[0]) && comparePositions(pos1[1], pos2[1]);\r\n  };\r\n})();\r\n\r\nvar getString = function(yasqe, item) {\r\n  if (typeof item == \"function\") {\r\n    return item(yasqe);\r\n  } else {\r\n    return item;\r\n  }\r\n};\r\nmodule.exports = {\r\n  keyExists: keyExists,\r\n  getPersistencyId: getPersistencyId,\r\n  elementsOverlap: elementsOverlap,\r\n  getString: getString\r\n};\r\n"]}